<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android 源码编译</title>
    <url>/2021/11/27/Android%20%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<h3 id="Perpare-Env"><a href="#Perpare-Env" class="headerlink" title="Perpare Env"></a>Perpare Env</h3><h4 id="下载-repo-工具"><a href="#下载-repo-工具" class="headerlink" title="下载 repo 工具:"></a>下载 repo 工具:</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mkdir ~/bin</span><br><span class="line">PATH=~/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">curl</span> https://storage.googleapis.com/git<span class="literal">-repo-downloads</span>/repo &gt; ~/bin/repo</span><br><span class="line">chmod a+x ~/bin/repo</span><br></pre></td></tr></table></figure>

<h4 id="使用每月更新的初始化包"><a href="#使用每月更新的初始化包" class="headerlink" title="使用每月更新的初始化包"></a>使用每月更新的初始化包</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -c https://mirrors.tuna.tsinghua.edu.cn/aosp-monthly/aosp-latest.tar # 下载初始化包</span><br><span class="line">tar xf aosp-latest.tar</span><br><span class="line">cd AOSP   # 解压得到的 AOSP 工程目录</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这时 <span class="built_in">ls</span> 的话什么也看不到，因为只有一个隐藏的 .repo 目录</span></span><br><span class="line">repo sync # 正常同步一遍即可得到完整目录</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或 repo <span class="built_in">sync</span> -l 仅checkout代码</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>
<h4 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库:"></a>初始化仓库:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">repo init -u https://mirrors.tuna.tsinghua.edu.cn/git/AOSP/platform/manifest</span><br></pre></td></tr></table></figure>

<p><strong>如果提示无法连接到 gerrit.googlesource.com，请参照</strong><a href="https://mirrors.tuna.tsinghua.edu.cn/help/git-repo"><strong>git-repo的帮助页面</strong></a><strong>的更新一节。</strong></p>
<h4 id="如果需要某个特定的-Android-版本-列表-："><a href="#如果需要某个特定的-Android-版本-列表-：" class="headerlink" title="如果需要某个特定的 Android 版本(列表)："></a>如果需要某个特定的 Android 版本(<a href="https://source.android.com/setup/start/build-numbers#source-code-tags-and-builds">列表</a>)：</h4><p>master branch maybe no pass</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">repo init -u https://mirrors.tuna.tsinghua.edu.cn/git/AOSP/platform/manifest -b android-4.0.1_r1</span><br></pre></td></tr></table></figure>

<h4 id="同步源码树（以后只需执行这条命令来同步）："><a href="#同步源码树（以后只需执行这条命令来同步）：" class="headerlink" title="同步源码树（以后只需执行这条命令来同步）："></a>同步源码树（以后只需执行这条命令来同步）：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">repo sync</span><br></pre></td></tr></table></figure>

<h4 id="install-dependencies-for-ubuntu-20-04"><a href="#install-dependencies-for-ubuntu-20-04" class="headerlink" title="install dependencies for ubuntu 20.04"></a>install dependencies for ubuntu 20.04</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">java</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install openjdk-8-jdk</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dependencies</span></span><br><span class="line">sudo apt install git-core gnupg flex bison gperf build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev libgl1-mesa-dev libxml2-utils xsltproc unzip</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">for</span> Ubuntu 20</span></span><br><span class="line">sudo apt-get install libncurses5</span><br></pre></td></tr></table></figure>

<h3 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h3><h4 id="First-set-Env"><a href="#First-set-Env" class="headerlink" title="First set Env"></a>First set Env</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source build/envsetup.sh</span><br></pre></td></tr></table></figure>

<h4 id="select-BUILD-and-BUILDTYPE"><a href="#select-BUILD-and-BUILDTYPE" class="headerlink" title="select  BUILD and BUILDTYPE"></a>select  BUILD and BUILDTYPE</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">method 1 : select direct</span></span><br><span class="line">lunch aosp_arm64-eng</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">method 2 :list build, and select</span></span><br><span class="line">lunch</span><br></pre></td></tr></table></figure>

<h4 id="build"><a href="#build" class="headerlink" title="build"></a>build</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make -j12</span><br></pre></td></tr></table></figure>

<h4 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source build/envsetup.sh</span><br><span class="line">lunch(选择刚才你设置的目标版本,比如这里了我选择的是2)</span><br><span class="line">emulator</span><br><span class="line"></span><br><span class="line">export ANDROID_SDK_ROOT=/home/xxx/Android/Sdk</span><br><span class="line">emulator -list-avds</span><br><span class="line">emulator -avd Pixel_3a_API_30 -ramdisk ramdisk.img -system system.img -data userdata.img</span><br></pre></td></tr></table></figure>

<h4 id="system-img"><a href="#system-img" class="headerlink" title="system.img"></a>system.img</h4><p>系统镜像，用于存储Android系统的核心文件，对应于系统的 <code>system</code> 目录，主要内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apex  bin         etc    framework  lib64     product     usr     xbin</span><br><span class="line">app   build.prop  fonts  lib        priv-app  system_ext  vendor</span><br></pre></td></tr></table></figure>

<h4 id="userdata-img"><a href="#userdata-img" class="headerlink" title="userdata.img"></a>userdata.img</h4><p>用户镜像，用来存储与用户数据相关的数据</p>
<h4 id="ramdisk-img"><a href="#ramdisk-img" class="headerlink" title="ramdisk.img"></a>ramdisk.img</h4><p>内存磁盘镜像，用于存储Linux内核启动时要装载的核心文件，对应 <code>root</code> 目录</p>
<h4 id="vendor-img"><a href="#vendor-img" class="headerlink" title="vendor.img"></a>vendor.img</h4><p>驱动镜像，带有品牌标识和驱动的包，系统和驱动分开，方便以后升级系统</p>
<h4 id="cache-img"><a href="#cache-img" class="headerlink" title="cache.img"></a>cache.img</h4><p>缓存镜像，用来进行系统升级或recovery</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li>build : <a href="https://www.jianshu.com/p/367f0886e62b">https://www.jianshu.com/p/367f0886e62b</a></li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Hook</title>
    <url>/2021/11/22/C++%20Hook/</url>
    <content><![CDATA[<h2 id="C-Hook"><a href="#C-Hook" class="headerlink" title="C++ Hook"></a>C++ Hook</h2><h3 id="LD-PRELOAD-预加载hook-so"><a href="#LD-PRELOAD-预加载hook-so" class="headerlink" title="LD_PRELOAD 预加载hook so"></a>LD_PRELOAD 预加载hook so</h3><p>通过<code>LD_PRELOAD</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">&quot;password&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Incorrect password\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Correct password\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -o main main.c</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span><span class="params">(*Fun)</span><span class="params">(<span class="type">const</span> <span class="type">char</span>*, <span class="type">const</span> <span class="type">char</span>*)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">strcmp</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s1, <span class="type">const</span> <span class="type">char</span>* s2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">static</span> <span class="type">void</span>* handle = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="type">static</span> Fun org_strcmp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!handle)</span><br><span class="line">  &#123;   <span class="comment">//解析得到真实的strcmp函数</span></span><br><span class="line">      handle = dlopen(<span class="string">&quot;libc.so.6&quot;</span>, RTLD_LAZY);</span><br><span class="line">      org_strcmp = (Fun)dlsym(handle, <span class="string">&quot;strcmp&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">//做我们想做的</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hacked by way of ld_preload\n\n\n&quot;</span>);</span><br><span class="line">    <span class="comment">//完成真实地功能</span></span><br><span class="line">  <span class="keyword">return</span> org_strcmp(s1, s2);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -fPIC -shared -o libmyhook.so my_hook.c -ldl</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">LD_PRELOAD=./libmyhook.so ./main password </span><br></pre></td></tr></table></figure>

<h4 id="LD-PRELOAD"><a href="#LD-PRELOAD" class="headerlink" title="LD_PRELOAD"></a>LD_PRELOAD</h4><p>LD_PRELOAD，是个环境变量，用于动态库的加载，动态库加载的优先级最高，一般情况下，其加载顺序为LD_PRELOAD &gt; LD_LIBRARY_PATH &gt; &#x2F;etc&#x2F;ld.so.cache &gt; &#x2F;lib&gt;&#x2F;usr&#x2F;lib。程序中我们经常要调用一些外部库的函数，以rand为例，如果我们有个自定义的rand函数，把它编译成动态库后，通过LD_PRELOAD加载，当程序中调用rand函数时，调用的其实是我们自定义的函数。</p>
<h4 id="dlsym参数"><a href="#dlsym参数" class="headerlink" title="dlsym参数"></a>dlsym参数</h4><p>RTLD_DEFAULT是在当前库中查找函数，而RTLD_NEXT则是在当前库之后查找第一次出现的函数。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">define _GNU_SOURCE</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">include &lt;string.h&gt;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">include &lt;dlfcn.h&gt;</span></span><br><span class="line"></span><br><span class="line">typedef int(*Fun)(const char*, const char*);</span><br><span class="line"></span><br><span class="line">int strcmp(const char* s1, const char* s2)</span><br><span class="line">&#123;</span><br><span class="line">  static Fun org_strcmp = NULL;</span><br><span class="line"></span><br><span class="line">      org_strcmp = (Fun)dlsym(RTLD_NEXT, &quot;strcmp&quot;);</span><br><span class="line">    //做我们想做的</span><br><span class="line">  printf(&quot;Hacked by way of ld_preload\n\n\n&quot;);</span><br><span class="line">    //完成真实地功能</span><br><span class="line">  return org_strcmp(s1, s2);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>RTLD_NEXT找不到</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">define _GNU_SOURCE</span></span><br></pre></td></tr></table></figure>

<h4 id="dlopen参数"><a href="#dlopen参数" class="headerlink" title="dlopen参数"></a>dlopen参数</h4><p>RTLD_LAZY:在dlopen返回前，对于动态库中存在的未定义的变量(如外部变量extern，也可以是函数)不执行解析，就是不解析这个变量的地址。<br>RTLD_NOW：与上面不同，他需要在dlopen返回前，解析出每个未定义变量的地址，如果解析不出来，在dlopen会返回NULL，错误为：   : undefined symbol: xxxx…….<br>RTLD_GLOBAL:它的含义是使得库中的解析的定义变量在随后的其它的链接库中变得可以使用。</p>
<h3 id="Android-Hook"><a href="#Android-Hook" class="headerlink" title="Android Hook"></a>Android Hook</h3><p><code>ZygotePreload</code> 在app创建前预加载一些库（java 或native），比如使用 <code>LD_PRELOAD</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">android:zygotePreloadName=<span class="string">&quot;io.github.zauther.demo.ZygotePreload&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Keep</span></span><br><span class="line"><span class="meta">@RequiresApi(api = Build.VERSION_CODES.Q)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZygotePreload</span> <span class="keyword">implements</span> <span class="title class_">android</span>.app.ZygotePreload&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doPreload</span><span class="params">(<span class="meta">@NonNull</span> ApplicationInfo appInfo)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==TEST==&quot;</span>);</span><br><span class="line">        Log.i(<span class="string">&quot;==TEST==&quot;</span>,<span class="string">&quot;ZygotePreload:&quot;</span>+appInfo.dataDir);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="通过符号表Hook对应的方法"><a href="#通过符号表Hook对应的方法" class="headerlink" title="通过符号表Hook对应的方法"></a>通过符号表Hook对应的方法</h3><h4 id="定义函数指针-lookup"><a href="#定义函数指针-lookup" class="headerlink" title="定义函数指针 lookup"></a>定义函数指针 lookup</h4><p>lookup需要跟实际调用方法参数保持一致</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span>* (*lookup)(<span class="type">void</span>*, <span class="type">char</span> <span class="type">const</span>*, <span class="type">unsigned</span> <span class="type">int</span>);</span><br></pre></td></tr></table></figure>

<h4 id="找到so对应位置"><a href="#找到so对应位置" class="headerlink" title="找到so对应位置"></a>找到so对应位置</h4><ul>
<li>fdlopen 打开so库</li>
<li>fdlsym 找到符号表位置</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::string soPath = <span class="string">&quot;/system/&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">get_api_level</span>() &gt; <span class="number">29</span>) &#123;</span><br><span class="line">    soPath = <span class="string">&quot;/apex/com.android.art/&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">get_api_level</span>() == <span class="number">29</span>) &#123;</span><br><span class="line">    soPath = <span class="string">&quot;/apex/com.android.runtime/&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *handle = <span class="built_in">fdlopen</span>((soPath + <span class="string">&quot;lib/libart.so&quot;</span>).<span class="built_in">c_str</span>(), RTLD_LAZY);</span><br><span class="line"><span class="keyword">if</span> (handle == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    handle = <span class="built_in">fdlopen</span>((soPath + <span class="string">&quot;lib64/libart.so&quot;</span>).<span class="built_in">c_str</span>(), RTLD_LAZY);</span><br><span class="line">    <span class="keyword">if</span> (handle == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    lookup = (<span class="type">void</span>* (*)(<span class="type">void</span>* prt, <span class="type">char</span> <span class="type">const</span>*, <span class="type">unsigned</span> <span class="type">int</span>))<span class="built_in">fdlsym</span>(handle, <span class="string">&quot;_ZN3art10ClassTable6LookupEPKcm&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (lookup == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    lookup = (<span class="type">void</span>* (*)(<span class="type">void</span>* prt, <span class="type">char</span> <span class="type">const</span>*, <span class="type">unsigned</span> <span class="type">int</span>))<span class="built_in">fdlsym</span>(handle, <span class="string">&quot;_ZN3art10ClassTable6LookupEPKcj&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (lookup == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<h4 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">(*lookup)((<span class="type">void</span> *)classTableAddr, descriptor.<span class="built_in">c_str</span>(), descriptor_hash);</span><br></pre></td></tr></table></figure>

<p>demo</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (jsize i = <span class="number">0</span>; i &lt; env-&gt;<span class="built_in">GetArrayLength</span>(classNames); i++) &#123;</span><br><span class="line">    jstring className = (jstring)env-&gt;<span class="built_in">GetObjectArrayElement</span>(classNames, i);</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* name = env-&gt;<span class="built_in">GetStringUTFChars</span>(className, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    env-&gt;<span class="built_in">DeleteLocalRef</span>(className);</span><br><span class="line">    <span class="function">std::string <span class="title">descriptor</span><span class="params">(DotToDescriptor(name))</span></span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">size_t</span> descriptor_hash = <span class="built_in">ComputeModifiedUtf8Hash</span>(descriptor.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="type">void</span>* addr = (*lookup)((<span class="type">void</span> *)classTableAddr, descriptor.<span class="built_in">c_str</span>(), descriptor_hash);</span><br><span class="line">    <span class="keyword">if</span> (addr == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    vector.<span class="built_in">push_back</span>(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Native开发</title>
    <url>/2019/07/02/Android-Native%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h2 id="Android-Native开发"><a href="#Android-Native开发" class="headerlink" title="Android Native开发"></a>Android Native开发</h2><p>Android 从</p>
<h3 id="0x01-JNI-开发"><a href="#0x01-JNI-开发" class="headerlink" title="0x01 JNI 开发"></a>0x01 JNI 开发</h3><h4 id="1-Demo"><a href="#1-Demo" class="headerlink" title="1. Demo"></a>1. Demo</h4><p>我们现来看一个例子。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloJni</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;native-lib&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title function_">stringFromJNI</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"><span class="function">JNIEXPORT jstring JNICALL</span></span><br><span class="line"><span class="function"><span class="title">Java_cn_cwiki_someapp_test_HelloJni_stringFromJNI</span><span class="params">(JNIEnv *env, jclass type)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">    <span class="keyword">return</span> env-&gt;<span class="built_in">NewStringUTF</span>(<span class="string">&quot;Hello, Java Native Interface!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"><span class="function">JNIEXPORT jstring JNICALL</span></span><br><span class="line"><span class="function"><span class="title">Java_cn_cwiki_someapp_test_HelloJni_test</span><span class="params">(JNIEnv *env, jobject instance)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">    <span class="keyword">return</span> env-&gt;<span class="built_in">NewStringUTF</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20190628232500731.webp" alt="image-20190628232500731"></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.4</span>.<span class="number">1</span>)</span><br><span class="line"><span class="keyword">add_library</span>(</span><br><span class="line">        native-lib SHARED</span><br><span class="line">        src/main/cpp/native-lib.cpp</span><br><span class="line">)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(</span><br><span class="line">        native-lib</span><br><span class="line">        src/main/cpp/native-lib.cpp</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    externalNativeBuild &#123;</span><br><span class="line">        cmake &#123;</span><br><span class="line">            path <span class="string">&quot;CMakeLists.txt&quot;</span>  <span class="comment">//CMakeLists.txt的路径</span></span><br><span class="line">            version <span class="string">&quot;3.10.2&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20190628233820985.webp" alt="image-20190628233820985"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">stringFromJNI</span> <span class="operator">=</span> HelloJni.stringFromJNI();</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20190628234045501.webp" alt="image-20190628234045501"></p>
<span id="more"></span>

<h4 id="2-Java-Native-Interface-Jni-："><a href="#2-Java-Native-Interface-Jni-：" class="headerlink" title="2.  Java Native Interface(Jni)："></a>2.  Java Native Interface(Jni)：</h4><p>jni.h</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">uint8_t</span>  jboolean; <span class="comment">/* unsigned 8 bits */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int8_t</span>   jbyte;    <span class="comment">/* signed 8 bits */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uint16_t</span> jchar;    <span class="comment">/* unsigned 16 bits */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int16_t</span>  jshort;   <span class="comment">/* signed 16 bits */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int32_t</span>  jint;     <span class="comment">/* signed 32 bits */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int64_t</span>  jlong;    <span class="comment">/* signed 64 bits */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">float</span>    jfloat;   <span class="comment">/* 32-bit IEEE 754 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span>   jdouble;  <span class="comment">/* 64-bit IEEE 754 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Reference types, in C.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">void</span>*           jobject;</span><br><span class="line"><span class="keyword">typedef</span> jobject         jclass;</span><br><span class="line"><span class="keyword">typedef</span> jobject         jstring;</span><br><span class="line"><span class="keyword">typedef</span> jobject         jarray;</span><br><span class="line"><span class="keyword">typedef</span> jarray          jobjectArray;</span><br><span class="line"><span class="keyword">typedef</span> jarray          jbooleanArray;</span><br><span class="line"><span class="keyword">typedef</span> jarray          jbyteArray;</span><br><span class="line"><span class="keyword">typedef</span> jarray          jcharArray;</span><br><span class="line"><span class="keyword">typedef</span> jarray          jshortArray;</span><br><span class="line"><span class="keyword">typedef</span> jarray          jintArray;</span><br><span class="line"><span class="keyword">typedef</span> jarray          jlongArray;</span><br><span class="line"><span class="keyword">typedef</span> jarray          jfloatArray;</span><br><span class="line"><span class="keyword">typedef</span> jarray          jdoubleArray;</span><br><span class="line"><span class="keyword">typedef</span> jobject         jthrowable;</span><br><span class="line"><span class="keyword">typedef</span> jobject         jweak;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__cplusplus)</span></span><br><span class="line"><span class="keyword">typedef</span> _JNIEnv JNIEnv;</span><br><span class="line"><span class="keyword">typedef</span> _JavaVM JavaVM;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">JNINativeInterface</span>* JNIEnv;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">JNIInvokeInterface</span>* JavaVM;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<h3 id="0x02-NDK-开发"><a href="#0x02-NDK-开发" class="headerlink" title="0x02 NDK 开发"></a>0x02 NDK 开发</h3><p>CMake配置：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.4</span>.<span class="number">1</span>)</span><br><span class="line"><span class="keyword">add_library</span>(native_app_glue STATIC</span><br><span class="line">        <span class="variable">$&#123;ANDROID_NDK&#125;</span>/sources/android/native_app_glue/android_native_app_glue.c)</span><br><span class="line"><span class="keyword">add_library</span>(main SHARED <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/src/main/cpp/main.cpp)</span><br><span class="line"><span class="keyword">target_include_directories</span>(main PRIVATE</span><br><span class="line">        <span class="variable">$&#123;ANDROID_NDK&#125;</span>/sources/android/native_app_glue)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(</span><br><span class="line">        main</span><br><span class="line">        android</span><br><span class="line">        native_app_glue</span><br><span class="line">        EGL</span><br><span class="line">        GLESv1_CM</span><br><span class="line">        log</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>AndroidManifest.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span> <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span> <span class="attr">android:hasCode</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;android.app.NativeActivity&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">&quot;android.app.lib_name&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">android:value</span>=<span class="string">&quot;main&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Main.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (C) 2010 The Android Open Source Project</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//BEGIN_INCLUDE(all)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;initializer_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;EGL/egl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;GLES/gl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;android/sensor.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;android/log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;android_native_app_glue.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;android/bitmap.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;GrContext.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SkGpuDevice.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;gl/GrGLInterface.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;GrContext.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SkCanvas.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SkGraphics.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SkSurface.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SkString.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SkTime.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&quot;GrBackendSemaphore.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;GLES/gl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;core/SkExecutor.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cpp/skia/WindowContextFactory_android.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cpp/skia/Window.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;native-activity&quot;</span>, __VA_ARGS__))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOGW(...) ((void)__android_log_print(ANDROID_LOG_WARN, <span class="string">&quot;native-activity&quot;</span>, __VA_ARGS__))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Our saved state data.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">saved_state</span> &#123;</span><br><span class="line">    <span class="type">float</span> angle;</span><br><span class="line">    <span class="type">int32_t</span> x;</span><br><span class="line">    <span class="type">int32_t</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Shared state for our app.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">engine</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">android_app</span> *app;</span><br><span class="line">    ASensorManager *sensorManager;</span><br><span class="line">    <span class="type">const</span> ASensor *accelerometerSensor;</span><br><span class="line">    ASensorEventQueue *sensorEventQueue;</span><br><span class="line">    <span class="type">int</span> animating;</span><br><span class="line">    EGLDisplay display;</span><br><span class="line">    EGLSurface surface;</span><br><span class="line">    EGLContext context;</span><br><span class="line">    <span class="type">int32_t</span> width;</span><br><span class="line">    <span class="type">int32_t</span> height;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">saved_state</span> state;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">init_es_egl</span><span class="params">(<span class="keyword">struct</span> engine *engine)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// initialize OpenGL ES and EGL</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Here specify the attributes of the desired configuration.</span></span><br><span class="line"><span class="comment">     * Below, we select an EGLConfig with at least 8 bits per color</span></span><br><span class="line"><span class="comment">     * component compatible with on-screen windows</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">const</span> EGLint attribs[] = &#123;</span><br><span class="line">            EGL_SURFACE_TYPE, EGL_WINDOW_BIT,</span><br><span class="line">            EGL_BLUE_SIZE, <span class="number">8</span>,</span><br><span class="line">            EGL_GREEN_SIZE, <span class="number">8</span>,</span><br><span class="line">            EGL_RED_SIZE, <span class="number">8</span>,</span><br><span class="line">            EGL_NONE</span><br><span class="line">    &#125;;</span><br><span class="line">    EGLint w, h, format;</span><br><span class="line">    EGLint numConfigs;</span><br><span class="line">    EGLConfig config;</span><br><span class="line">    EGLSurface surface;</span><br><span class="line">    EGLContext context;</span><br><span class="line">    EGLDisplay display = <span class="built_in">eglGetDisplay</span>(EGL_DEFAULT_DISPLAY);</span><br><span class="line">    <span class="built_in">eglInitialize</span>(display, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">SkAssertResult</span>(<span class="built_in">eglBindAPI</span>(EGL_OPENGL_ES_API));</span><br><span class="line">    <span class="comment">/* Here, the application chooses the configuration it desires.</span></span><br><span class="line"><span class="comment">     * find the best match if possible, otherwise use the very first one</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">eglChooseConfig</span>(display, attribs, <span class="literal">nullptr</span>, <span class="number">0</span>, &amp;numConfigs);</span><br><span class="line">    <span class="function">std::unique_ptr&lt;EGLConfig[]&gt; <span class="title">supportedConfigs</span><span class="params">(<span class="keyword">new</span> EGLConfig[numConfigs])</span></span>;</span><br><span class="line">    <span class="built_in">assert</span>(supportedConfigs);</span><br><span class="line">    <span class="built_in">eglChooseConfig</span>(display, attribs, supportedConfigs.<span class="built_in">get</span>(), numConfigs, &amp;numConfigs);</span><br><span class="line">    <span class="built_in">assert</span>(numConfigs);</span><br><span class="line">    <span class="keyword">auto</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; numConfigs; i++) &#123;</span><br><span class="line">        <span class="keyword">auto</span> &amp;cfg = supportedConfigs[i];</span><br><span class="line">        EGLint r, g, b, d;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">eglGetConfigAttrib</span>(display, cfg, EGL_RED_SIZE, &amp;r) &amp;&amp;</span><br><span class="line">            <span class="built_in">eglGetConfigAttrib</span>(display, cfg, EGL_GREEN_SIZE, &amp;g) &amp;&amp;</span><br><span class="line">            <span class="built_in">eglGetConfigAttrib</span>(display, cfg, EGL_BLUE_SIZE, &amp;b) &amp;&amp;</span><br><span class="line">            <span class="built_in">eglGetConfigAttrib</span>(display, cfg, EGL_DEPTH_SIZE, &amp;d) &amp;&amp;</span><br><span class="line">            r == <span class="number">8</span> &amp;&amp; g == <span class="number">8</span> &amp;&amp; b == <span class="number">8</span> &amp;&amp; d == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            config = supportedConfigs[i];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i == numConfigs) &#123;</span><br><span class="line">        config = supportedConfigs[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* EGL_NATIVE_VISUAL_ID is an attribute of the EGLConfig that is</span></span><br><span class="line"><span class="comment">     * guaranteed to be accepted by ANativeWindow_setBuffersGeometry().</span></span><br><span class="line"><span class="comment">     * As soon as we picked a EGLConfig, we can safely reconfigure the</span></span><br><span class="line"><span class="comment">     * ANativeWindow buffers to match, using EGL_NATIVE_VISUAL_ID. */</span></span><br><span class="line">    <span class="built_in">eglGetConfigAttrib</span>(display, config, EGL_NATIVE_VISUAL_ID, &amp;format);</span><br><span class="line">    surface = <span class="built_in">eglCreateWindowSurface</span>(display, config, engine-&gt;app-&gt;window, <span class="literal">NULL</span>);</span><br><span class="line">    context = <span class="built_in">eglCreateContext</span>(display, config, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">eglMakeCurrent</span>(display, surface, surface, context) == EGL_FALSE) &#123;</span><br><span class="line">        <span class="built_in">LOGW</span>(<span class="string">&quot;Unable to eglMakeCurrent&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">eglQuerySurface</span>(display, surface, EGL_WIDTH, &amp;w);</span><br><span class="line">    <span class="built_in">eglQuerySurface</span>(display, surface, EGL_HEIGHT, &amp;h);</span><br><span class="line"></span><br><span class="line">    engine-&gt;display = display;</span><br><span class="line">    engine-&gt;context = context;</span><br><span class="line">    engine-&gt;surface = surface;</span><br><span class="line">    engine-&gt;width = w;</span><br><span class="line">    engine-&gt;height = h;</span><br><span class="line">    engine-&gt;state.angle = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check openGL on the system</span></span><br><span class="line">    <span class="keyword">auto</span> opengl_info = &#123;GL_VENDOR, GL_RENDERER, GL_VERSION, GL_EXTENSIONS&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> name : opengl_info) &#123;</span><br><span class="line">        <span class="keyword">auto</span> info = <span class="built_in">glGetString</span>(name);</span><br><span class="line">        <span class="built_in">LOGI</span>(<span class="string">&quot;OpenGL Info: %s&quot;</span>, info);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">LOGI</span>(<span class="string">&quot;Canvas size: %d x %d&quot;</span>, w, h);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize GL state.</span></span><br><span class="line">    <span class="built_in">glHint</span>(GL_PERSPECTIVE_CORRECTION_HINT, GL_FASTEST);</span><br><span class="line">    <span class="built_in">glEnable</span>(GL_CULL_FACE);</span><br><span class="line">    <span class="built_in">glShadeModel</span>(GL_SMOOTH);</span><br><span class="line">    <span class="built_in">glDisable</span>(GL_DEPTH_TEST);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">eglSurfaceAttrib</span>(display, surface, EGL_SWAP_BEHAVIOR, EGL_BUFFER_PRESERVED);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize an EGL context for the current display.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">engine_init_display</span><span class="params">(<span class="keyword">struct</span> engine *engine)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> r = <span class="built_in">init_es_egl</span>(engine);</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">init_raster_skia</span>(engine);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">initEgl</span><span class="params">(<span class="keyword">struct</span> engine *engine)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Just the current frame in the display.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">engine_draw_frame</span><span class="params">(<span class="keyword">struct</span> engine *engine)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (engine-&gt;display == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">// No display.</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Just fill the screen with a color.</span></span><br><span class="line">    <span class="built_in">glClearColor</span>(((<span class="type">float</span>) engine-&gt;state.x) / engine-&gt;width, engine-&gt;state.angle,</span><br><span class="line">                 ((<span class="type">float</span>) engine-&gt;state.y) / engine-&gt;height, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">glClear</span>(GL_COLOR_BUFFER_BIT);</span><br><span class="line">    <span class="built_in">eglSwapBuffers</span>(engine-&gt;display, engine-&gt;surface);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Tear down the EGL context currently associated with the display.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">engine_term_display</span><span class="params">(<span class="keyword">struct</span> engine *engine)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (engine-&gt;display != EGL_NO_DISPLAY) &#123;</span><br><span class="line">        <span class="built_in">eglMakeCurrent</span>(engine-&gt;display, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT);</span><br><span class="line">        <span class="keyword">if</span> (engine-&gt;context != EGL_NO_CONTEXT) &#123;</span><br><span class="line">            <span class="built_in">eglDestroyContext</span>(engine-&gt;display, engine-&gt;context);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (engine-&gt;surface != EGL_NO_SURFACE) &#123;</span><br><span class="line">            <span class="built_in">eglDestroySurface</span>(engine-&gt;display, engine-&gt;surface);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">eglTerminate</span>(engine-&gt;display);</span><br><span class="line">    &#125;</span><br><span class="line">    engine-&gt;animating = <span class="number">0</span>;</span><br><span class="line">    engine-&gt;display = EGL_NO_DISPLAY;</span><br><span class="line">    engine-&gt;context = EGL_NO_CONTEXT;</span><br><span class="line">    engine-&gt;surface = EGL_NO_SURFACE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Process the next input event.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int32_t</span> <span class="title">engine_handle_input</span><span class="params">(<span class="keyword">struct</span> android_app *app, AInputEvent *event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">engine</span> *engine = (<span class="keyword">struct</span> engine *) app-&gt;userData;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">AInputEvent_getType</span>(event) == AINPUT_EVENT_TYPE_MOTION) &#123;</span><br><span class="line">        engine-&gt;animating = <span class="number">1</span>;</span><br><span class="line">        engine-&gt;state.x = <span class="built_in">AMotionEvent_getX</span>(event, <span class="number">0</span>);</span><br><span class="line">        engine-&gt;state.y = <span class="built_in">AMotionEvent_getY</span>(event, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">LOGI</span>(<span class="string">&quot;touch %d,%d&quot;</span>, engine-&gt;state.x, engine-&gt;state.y);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Process the next main command.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">engine_handle_cmd</span><span class="params">(<span class="keyword">struct</span> android_app *app, <span class="type">int32_t</span> cmd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">engine</span> *engine = (<span class="keyword">struct</span> engine *) app-&gt;userData;</span><br><span class="line">    <span class="keyword">switch</span> (cmd) &#123;</span><br><span class="line">        <span class="keyword">case</span> APP_CMD_SAVE_STATE:</span><br><span class="line">            <span class="comment">// The system has asked us to save our current state.  Do so.</span></span><br><span class="line">            engine-&gt;app-&gt;savedState = <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="keyword">struct</span> saved_state));</span><br><span class="line">            *((<span class="keyword">struct</span> saved_state *) engine-&gt;app-&gt;savedState) = engine-&gt;state;</span><br><span class="line">            engine-&gt;app-&gt;savedStateSize = <span class="built_in">sizeof</span>(<span class="keyword">struct</span> saved_state);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> APP_CMD_INIT_WINDOW:</span><br><span class="line">            <span class="comment">// The window is being shown, get it ready.</span></span><br><span class="line">            <span class="keyword">if</span> (engine-&gt;app-&gt;window != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="built_in">engine_init_display</span>(engine);</span><br><span class="line">                <span class="built_in">engine_draw_frame</span>(engine);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> APP_CMD_TERM_WINDOW:</span><br><span class="line">            <span class="comment">// The window is being hidden or closed, clean it up.</span></span><br><span class="line">            <span class="built_in">engine_term_display</span>(engine);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> APP_CMD_GAINED_FOCUS:</span><br><span class="line">            <span class="comment">// When our app gains focus, we start monitoring the accelerometer.</span></span><br><span class="line">            <span class="keyword">if</span> (engine-&gt;accelerometerSensor != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="built_in">ASensorEventQueue_enableSensor</span>(engine-&gt;sensorEventQueue,</span><br><span class="line">                                               engine-&gt;accelerometerSensor);</span><br><span class="line">                <span class="comment">// We&#x27;d like to get 60 events per second (in us).</span></span><br><span class="line">                <span class="built_in">ASensorEventQueue_setEventRate</span>(engine-&gt;sensorEventQueue,</span><br><span class="line">                                               engine-&gt;accelerometerSensor,</span><br><span class="line">                                               (<span class="number">1000L</span> / <span class="number">60</span>) * <span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> APP_CMD_LOST_FOCUS:</span><br><span class="line">            <span class="comment">// When our app loses focus, we stop monitoring the accelerometer.</span></span><br><span class="line">            <span class="comment">// This is to avoid consuming battery while not being used.</span></span><br><span class="line">            <span class="keyword">if</span> (engine-&gt;accelerometerSensor != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="built_in">ASensorEventQueue_disableSensor</span>(engine-&gt;sensorEventQueue,</span><br><span class="line">                                                engine-&gt;accelerometerSensor);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Also stop animating.</span></span><br><span class="line">            engine-&gt;animating = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">engine_draw_frame</span>(engine);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * AcquireASensorManagerInstance(void)</span></span><br><span class="line"><span class="comment"> *    Workaround ASensorManager_getInstance() deprecation false alarm</span></span><br><span class="line"><span class="comment"> *    for Android-N and before, when compiling with NDK-r15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">ASensorManager *<span class="title">AcquireASensorManagerInstance</span><span class="params">(android_app *app)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!app)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">typedef</span> ASensorManager *(*PF_GETINSTANCEFORPACKAGE)(<span class="type">const</span> <span class="type">char</span> *name);</span><br><span class="line">    <span class="type">void</span> *androidHandle = <span class="built_in">dlopen</span>(<span class="string">&quot;libandroid.so&quot;</span>, RTLD_NOW);</span><br><span class="line">    PF_GETINSTANCEFORPACKAGE getInstanceForPackageFunc = (PF_GETINSTANCEFORPACKAGE)</span><br><span class="line">            <span class="built_in">dlsym</span>(androidHandle, <span class="string">&quot;ASensorManager_getInstanceForPackage&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (getInstanceForPackageFunc) &#123;</span><br><span class="line">        JNIEnv *env = <span class="literal">nullptr</span>;</span><br><span class="line">        app-&gt;activity-&gt;vm-&gt;<span class="built_in">AttachCurrentThread</span>(&amp;env, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">        jclass android_content_Context = env-&gt;<span class="built_in">GetObjectClass</span>(app-&gt;activity-&gt;clazz);</span><br><span class="line">        jmethodID midGetPackageName = env-&gt;<span class="built_in">GetMethodID</span>(android_content_Context,</span><br><span class="line">                                                       <span class="string">&quot;getPackageName&quot;</span>,</span><br><span class="line">                                                       <span class="string">&quot;()Ljava/lang/String;&quot;</span>);</span><br><span class="line">        jstring packageName = (jstring) env-&gt;<span class="built_in">CallObjectMethod</span>(app-&gt;activity-&gt;clazz,</span><br><span class="line">                                                              midGetPackageName);</span><br><span class="line"></span><br><span class="line">        <span class="type">const</span> <span class="type">char</span> *nativePackageName = env-&gt;<span class="built_in">GetStringUTFChars</span>(packageName, <span class="number">0</span>);</span><br><span class="line">        ASensorManager *mgr = <span class="built_in">getInstanceForPackageFunc</span>(nativePackageName);</span><br><span class="line">        env-&gt;<span class="built_in">ReleaseStringUTFChars</span>(packageName, nativePackageName);</span><br><span class="line">        app-&gt;activity-&gt;vm-&gt;<span class="built_in">DetachCurrentThread</span>();</span><br><span class="line">        <span class="keyword">if</span> (mgr) &#123;</span><br><span class="line">            <span class="built_in">dlclose</span>(androidHandle);</span><br><span class="line">            <span class="keyword">return</span> mgr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">typedef</span> ASensorManager *(*PF_GETINSTANCE)();</span><br><span class="line">    PF_GETINSTANCE getInstanceFunc = (PF_GETINSTANCE)</span><br><span class="line">            <span class="built_in">dlsym</span>(androidHandle, <span class="string">&quot;ASensorManager_getInstance&quot;</span>);</span><br><span class="line">    <span class="comment">// by all means at this point, ASensorManager_getInstance should be available</span></span><br><span class="line">    <span class="built_in">assert</span>(getInstanceFunc);</span><br><span class="line">    <span class="built_in">dlclose</span>(androidHandle);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">getInstanceFunc</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This is the main entry point of a native application that is using</span></span><br><span class="line"><span class="comment"> * android_native_app_glue.  It runs in its own thread, with its own</span></span><br><span class="line"><span class="comment"> * event loop for receiving input events and doing other things.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">android_main</span><span class="params">(<span class="keyword">struct</span> android_app *state)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">engine</span> engine;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(&amp;engine, <span class="number">0</span>, <span class="built_in">sizeof</span>(engine));</span><br><span class="line">    state-&gt;userData = &amp;engine;</span><br><span class="line">    state-&gt;onAppCmd = engine_handle_cmd;</span><br><span class="line">    state-&gt;onInputEvent = engine_handle_input;</span><br><span class="line">    engine.app = state;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Prepare to monitor accelerometer</span></span><br><span class="line">    engine.sensorManager = <span class="built_in">AcquireASensorManagerInstance</span>(state);</span><br><span class="line">    engine.accelerometerSensor = <span class="built_in">ASensorManager_getDefaultSensor</span>(</span><br><span class="line">            engine.sensorManager,</span><br><span class="line">            ASENSOR_TYPE_ACCELEROMETER);</span><br><span class="line">    engine.sensorEventQueue = <span class="built_in">ASensorManager_createEventQueue</span>(</span><br><span class="line">            engine.sensorManager,</span><br><span class="line">            state-&gt;looper, LOOPER_ID_USER,</span><br><span class="line">            <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (state-&gt;savedState != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">// We are starting with a previous saved state; restore from it.</span></span><br><span class="line">        engine.state = *(<span class="keyword">struct</span> saved_state *) state-&gt;savedState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// loop waiting for stuff to do.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// Read all pending events.</span></span><br><span class="line">        <span class="type">int</span> ident;</span><br><span class="line">        <span class="type">int</span> events;</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">android_poll_source</span> *source;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If not animating, we will block forever waiting for events.</span></span><br><span class="line">        <span class="comment">// If animating, we loop until all events are read, then continue</span></span><br><span class="line">        <span class="comment">// to draw the next frame of animation.</span></span><br><span class="line">        <span class="keyword">while</span> ((ident = <span class="built_in">ALooper_pollAll</span>(engine.animating ? <span class="number">0</span> : <span class="number">-1</span>, <span class="literal">NULL</span>, &amp;events,</span><br><span class="line">                                        (<span class="type">void</span> **) &amp;source)) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Process this event.</span></span><br><span class="line">            <span class="keyword">if</span> (source != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                source-&gt;<span class="built_in">process</span>(state, source);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If a sensor has data, process it now.</span></span><br><span class="line">            <span class="keyword">if</span> (ident == LOOPER_ID_USER) &#123;</span><br><span class="line">                <span class="keyword">if</span> (engine.accelerometerSensor != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                    ASensorEvent event;</span><br><span class="line">                    <span class="keyword">while</span> (<span class="built_in">ASensorEventQueue_getEvents</span>(engine.sensorEventQueue,</span><br><span class="line">                                                       &amp;event, <span class="number">1</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="built_in">LOGI</span>(<span class="string">&quot;accelerometer: x=%f y=%f z=%f&quot;</span>,</span><br><span class="line">                             event.acceleration.x, event.acceleration.y,</span><br><span class="line">                             event.acceleration.z);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check if we are exiting.</span></span><br><span class="line">            <span class="keyword">if</span> (state-&gt;destroyRequested != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">engine_term_display</span>(&amp;engine);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (engine.animating) &#123;</span><br><span class="line">            <span class="comment">// Done with events; draw next animation frame.</span></span><br><span class="line">            engine.state.angle += <span class="number">.01</span>f;</span><br><span class="line">            <span class="keyword">if</span> (engine.state.angle &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                engine.state.angle = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Drawing is throttled to the screen update rate, so there</span></span><br><span class="line">            <span class="comment">// is no need to do timing here.</span></span><br><span class="line">            <span class="built_in">engine_draw_frame</span>(&amp;engine);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//END_INCLUDE(all)</span></span><br></pre></td></tr></table></figure>

<p>cmake中配置main.cpp和android_native_app_glue.c，编译成main.o动态库，供NativeActivity.java调用，Android App启动入口为Java的Activity（NativeActivity），NativeActivity加载main.o动态库，将执行过程交给Native代码android_native_app_glue.c，android_native_app_glue.c中包含了Native部分的启动方法，ANativeActivity_onCreate。</p>
<p> &#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/prebuilts/">prebuilts</a>&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/prebuilts/ndk/">ndk</a>&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/prebuilts/ndk/current/">current</a>&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/prebuilts/ndk/current/sources/">sources</a>&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/prebuilts/ndk/current/sources/android/">android</a>&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/prebuilts/ndk/current/sources/android/native_app_glue/">native_app_glue</a>&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/prebuilts/ndk/current/sources/android/native_app_glue/android_native_app_glue.c">android_native_app_glue.c</a> </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">JNIEXPORT</span><br><span class="line"><span class="type">void</span> <span class="title function_">ANativeActivity_onCreate</span><span class="params">(ANativeActivity* activity, <span class="type">void</span>* savedState,</span></span><br><span class="line"><span class="params">                                                            <span class="type">size_t</span> savedStateSize)</span>&#123;</span><br><span class="line">        LOGV(<span class="string">&quot;Creating: %p\n&quot;</span>, activity);</span><br><span class="line">    activity-&gt;callbacks-&gt;onDestroy = onDestroy;</span><br><span class="line">    activity-&gt;callbacks-&gt;onStart = onStart;</span><br><span class="line">    activity-&gt;callbacks-&gt;onResume = onResume;</span><br><span class="line">    activity-&gt;callbacks-&gt;onSaveInstanceState = onSaveInstanceState;</span><br><span class="line">    activity-&gt;callbacks-&gt;onPause = onPause;</span><br><span class="line">    activity-&gt;callbacks-&gt;onStop = onStop;</span><br><span class="line">    activity-&gt;callbacks-&gt;onConfigurationChanged = onConfigurationChanged;</span><br><span class="line">    activity-&gt;callbacks-&gt;onLowMemory = onLowMemory;</span><br><span class="line">    activity-&gt;callbacks-&gt;onWindowFocusChanged = onWindowFocusChanged;</span><br><span class="line">    activity-&gt;callbacks-&gt;onNativeWindowCreated = onNativeWindowCreated;</span><br><span class="line">    activity-&gt;callbacks-&gt;onNativeWindowDestroyed = onNativeWindowDestroyed;</span><br><span class="line">    activity-&gt;callbacks-&gt;onInputQueueCreated = onInputQueueCreated;</span><br><span class="line">    activity-&gt;callbacks-&gt;onInputQueueDestroyed = onInputQueueDestroyed;</span><br><span class="line">    activity-&gt;instance = android_app_create(activity, savedState, savedStateSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>android_native_app_glue.c中包含Activity的Native原生生命周期方法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">onDestroy</span><span class="params">(ANativeActivity* activity)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">onStart</span><span class="params">(ANativeActivity* activity)</span>; </span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">onResume</span><span class="params">(ANativeActivity* activity)</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>在执行ANativeActivity_onCreate方法后，调用android_app_create方法，进入android_app_entry方法。android_app_entry调用main.cpp中我们写的android_main(android_app)。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">struct</span> android_app* <span class="title function_">android_app_create</span><span class="params">(ANativeActivity* activity,</span></span><br><span class="line"><span class="params">        <span class="type">void</span>* savedState, <span class="type">size_t</span> savedStateSize)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">android_app</span>* <span class="title">android_app</span> =</span> (<span class="keyword">struct</span> android_app*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> android_app));</span><br><span class="line">    <span class="built_in">memset</span>(android_app, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> android_app));</span><br><span class="line">    android_app-&gt;activity = activity;</span><br><span class="line"></span><br><span class="line">    pthread_mutex_init(&amp;android_app-&gt;mutex, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_cond_init(&amp;android_app-&gt;cond, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (savedState != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        android_app-&gt;savedState = <span class="built_in">malloc</span>(savedStateSize);</span><br><span class="line">        android_app-&gt;savedStateSize = savedStateSize;</span><br><span class="line">        <span class="built_in">memcpy</span>(android_app-&gt;savedState, savedState, savedStateSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> msgpipe[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">if</span> (pipe(msgpipe)) &#123;</span><br><span class="line">        LOGE(<span class="string">&quot;could not create pipe: %s&quot;</span>, strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    android_app-&gt;msgread = msgpipe[<span class="number">0</span>];</span><br><span class="line">    android_app-&gt;msgwrite = msgpipe[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">pthread_attr_t</span> attr; </span><br><span class="line">    pthread_attr_init(&amp;attr);</span><br><span class="line">    pthread_attr_setdetachstate(&amp;attr, PTHREAD_CREATE_DETACHED);</span><br><span class="line">    pthread_create(&amp;android_app-&gt;thread, &amp;attr, android_app_entry, android_app);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Wait for thread to start.</span></span><br><span class="line">    pthread_mutex_lock(&amp;android_app-&gt;mutex);</span><br><span class="line">    <span class="keyword">while</span> (!android_app-&gt;running) &#123;</span><br><span class="line">        pthread_cond_wait(&amp;android_app-&gt;cond, &amp;android_app-&gt;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">    pthread_mutex_unlock(&amp;android_app-&gt;mutex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> android_app;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span>* <span class="title function_">android_app_entry</span><span class="params">(<span class="type">void</span>* param)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">android_app</span>* <span class="title">android_app</span> =</span> (<span class="keyword">struct</span> android_app*)param;</span><br><span class="line">    android_app-&gt;config = AConfiguration_new();</span><br><span class="line">    AConfiguration_fromAssetManager(android_app-&gt;config, android_app-&gt;activity-&gt;assetManager);</span><br><span class="line">    print_cur_config(android_app);</span><br><span class="line">    android_app-&gt;cmdPollSource.id = LOOPER_ID_MAIN;</span><br><span class="line">    android_app-&gt;cmdPollSource.app = android_app;</span><br><span class="line">    android_app-&gt;cmdPollSource.process = process_cmd;</span><br><span class="line">    android_app-&gt;inputPollSource.id = LOOPER_ID_INPUT;</span><br><span class="line">    android_app-&gt;inputPollSource.app = android_app;</span><br><span class="line">    android_app-&gt;inputPollSource.process = process_input;</span><br><span class="line">    ALooper* looper = ALooper_prepare(ALOOPER_PREPARE_ALLOW_NON_CALLBACKS);</span><br><span class="line">    ALooper_addFd(looper, android_app-&gt;msgread, LOOPER_ID_MAIN, ALOOPER_EVENT_INPUT, <span class="literal">NULL</span>,</span><br><span class="line">            &amp;android_app-&gt;cmdPollSource);</span><br><span class="line">    android_app-&gt;looper = looper;</span><br><span class="line">    pthread_mutex_lock(&amp;android_app-&gt;mutex);</span><br><span class="line">    android_app-&gt;running = <span class="number">1</span>;</span><br><span class="line">    pthread_cond_broadcast(&amp;android_app-&gt;cond);</span><br><span class="line">    pthread_mutex_unlock(&amp;android_app-&gt;mutex);</span><br><span class="line">    android_main(android_app);</span><br><span class="line">    android_app_destroy(android_app);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="0x03-NDK-Native-调用原理"><a href="#0x03-NDK-Native-调用原理" class="headerlink" title="0x03 NDK Native 调用原理"></a>0x03 NDK Native 调用原理</h3><p>我们来看一下NativeActivity加载NativeCode的过程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NativeActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> <span class="keyword">implements</span> <span class="title class_">SurfaceHolder</span>.Callback2,</span><br><span class="line">        InputQueue.Callback, OnGlobalLayoutListener&#123;</span><br><span class="line">      <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">          <span class="type">String</span> <span class="variable">libname</span> <span class="operator">=</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">          <span class="type">String</span> <span class="variable">funcname</span> <span class="operator">=</span> <span class="string">&quot;ANativeActivity_onCreate&quot;</span>;</span><br><span class="line">          ActivityInfo ai;</span><br><span class="line">          mIMM = getSystemService(InputMethodManager.class);</span><br><span class="line">          getWindow().takeSurface(<span class="built_in">this</span>);</span><br><span class="line">          getWindow().takeInputQueue(<span class="built_in">this</span>);</span><br><span class="line">          getWindow().setFormat(PixelFormat.RGB_565);</span><br><span class="line">          getWindow().setSoftInputMode(</span><br><span class="line">                  WindowManager.LayoutParams.SOFT_INPUT_STATE_UNSPECIFIED</span><br><span class="line">                  | WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);</span><br><span class="line">          mNativeContentView = <span class="keyword">new</span> <span class="title class_">NativeContentView</span>(<span class="built_in">this</span>);</span><br><span class="line">          mNativeContentView.mActivity = <span class="built_in">this</span>;</span><br><span class="line">          setContentView(mNativeContentView);</span><br><span class="line">          mNativeContentView.requestFocus();</span><br><span class="line">          mNativeContentView.getViewTreeObserver().addOnGlobalLayoutListener(<span class="built_in">this</span>);</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              ai = getPackageManager().getActivityInfo(</span><br><span class="line">                      getIntent().getComponent(), PackageManager.GET_META_DATA);</span><br><span class="line">              <span class="keyword">if</span> (ai.metaData != <span class="literal">null</span>) &#123;</span><br><span class="line">                  <span class="type">String</span> <span class="variable">ln</span> <span class="operator">=</span> ai.metaData.getString(META_DATA_LIB_NAME);</span><br><span class="line">                  <span class="keyword">if</span> (ln != <span class="literal">null</span>) libname = ln;</span><br><span class="line">                  ln = ai.metaData.getString(META_DATA_FUNC_NAME);</span><br><span class="line">                  <span class="keyword">if</span> (ln != <span class="literal">null</span>) funcname = ln;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Error getting activity info&quot;</span>, e);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="type">BaseDexClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> (BaseDexClassLoader) getClassLoader();</span><br><span class="line">          <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> classLoader.findLibrary(libname);</span><br><span class="line">          <span class="keyword">if</span> (path == <span class="literal">null</span>) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Unable to find native library &quot;</span> + libname +</span><br><span class="line">                                                 <span class="string">&quot; using classloader: &quot;</span> + classLoader.toString());</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="type">byte</span>[] nativeSavedState = savedInstanceState != <span class="literal">null</span></span><br><span class="line">                  ? savedInstanceState.getByteArray(KEY_NATIVE_SAVED_STATE) : <span class="literal">null</span>;</span><br><span class="line">          mNativeHandle = loadNativeCode(path, funcname, Looper.myQueue(),</span><br><span class="line">                  getAbsolutePath(getFilesDir()), getAbsolutePath(getObbDir()),</span><br><span class="line">                  getAbsolutePath(getExternalFilesDir(<span class="literal">null</span>)),</span><br><span class="line">                  Build.VERSION.SDK_INT, getAssets(), nativeSavedState,</span><br><span class="line">                  classLoader, classLoader.getLdLibraryPath());</span><br><span class="line">          <span class="keyword">if</span> (mNativeHandle == <span class="number">0</span>) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsatisfiedLinkError</span>(</span><br><span class="line">                      <span class="string">&quot;Unable to load native library \&quot;&quot;</span> + path + <span class="string">&quot;\&quot;: &quot;</span> + getDlError());</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>onCreate方法中主要实现了以下功能：</p>
<ol>
<li>托管Surface、InputQueue给Native</li>
<li>设置 NativeContentView</li>
<li>加载so库，获取mNativeHandle</li>
</ol>
<p>在onStart、onResume、onPause、onStop等中分别调用Native方法，在onDestroy总则注销Surface、InputQueue以及unloadNativeCode。</p>
<p>其中libname默认为main，funcname默认为ANativeActivity_onCreate。libname即为加载的Native库的名称：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">application</span> <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span> <span class="attr">android:hasCode</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;android.app.NativeActivity&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">&quot;android.app.lib_name&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:value</span>=<span class="string">&quot;main&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对应<code>android.app.lib_name</code> 的值<code>main</code> ，而funcname对于Native中loadNativeCode_native时的createActivityFunc，用于创建Activity。这2个名字可根据实际情况自定义。</p>
<p>在&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/frameworks/">frameworks</a>&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/frameworks/base/">base</a>&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/frameworks/base/core/">core</a>&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/frameworks/base/core/jni/">jni</a>&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/frameworks/base/core/jni/android_app_NativeActivity.cpp">android_app_NativeActivity.cpp</a> 中我们可以看到Native方法的具体实现：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> jlong</span></span><br><span class="line"><span class="function"><span class="title">loadNativeCode_native</span><span class="params">(JNIEnv* env, jobject clazz, jstring path, jstring funcName,</span></span></span><br><span class="line"><span class="params"><span class="function">        jobject messageQueue, jstring internalDataDir, jstring obbDir,</span></span></span><br><span class="line"><span class="params"><span class="function">        jstring externalDataDir, jint sdkVersion, jobject jAssetMgr,</span></span></span><br><span class="line"><span class="params"><span class="function">        jbyteArray savedState, jobject classLoader, jstring libraryPath)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (kLogTrace) &#123;</span><br><span class="line">        <span class="built_in">ALOGD</span>(<span class="string">&quot;loadNativeCode_native&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ScopedUtfChars <span class="title">pathStr</span><span class="params">(env, path)</span></span>;</span><br><span class="line">    std::unique_ptr&lt;NativeCode&gt; code;</span><br><span class="line">    <span class="type">bool</span> needs_native_bridge = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span>* handle = <span class="built_in">OpenNativeLibrary</span>(env,</span><br><span class="line">                                     sdkVersion,</span><br><span class="line">                                     pathStr.<span class="built_in">c_str</span>(),</span><br><span class="line">                                     classLoader,</span><br><span class="line">                                     libraryPath,</span><br><span class="line">                                     &amp;needs_native_bridge,</span><br><span class="line">                                     &amp;g_error_msg);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (handle == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="built_in">ALOGW</span>(<span class="string">&quot;NativeActivity LoadNativeLibrary(\&quot;%s\&quot;) failed: %s&quot;</span>,</span><br><span class="line">              pathStr.<span class="built_in">c_str</span>(),</span><br><span class="line">              g_error_msg.<span class="built_in">c_str</span>());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span>* funcPtr = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* funcStr = env-&gt;<span class="built_in">GetStringUTFChars</span>(funcName, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (needs_native_bridge) &#123;</span><br><span class="line">        funcPtr = <span class="built_in">NativeBridgeGetTrampoline</span>(handle, funcStr, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        funcPtr = <span class="built_in">dlsym</span>(handle, funcStr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    code.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">NativeCode</span>(handle, (ANativeActivity_createFunc*)funcPtr));</span><br><span class="line">    env-&gt;<span class="built_in">ReleaseStringUTFChars</span>(funcName, funcStr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (code-&gt;createActivityFunc == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        g_error_msg = needs_native_bridge ? <span class="built_in">NativeBridgeGetError</span>() : <span class="built_in">dlerror</span>();</span><br><span class="line">        <span class="built_in">ALOGW</span>(<span class="string">&quot;ANativeActivity_onCreate not found: %s&quot;</span>, g_error_msg.<span class="built_in">c_str</span>());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    code-&gt;messageQueue = <span class="built_in">android_os_MessageQueue_getMessageQueue</span>(env, messageQueue);</span><br><span class="line">    <span class="keyword">if</span> (code-&gt;messageQueue == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        g_error_msg = <span class="string">&quot;Unable to retrieve native MessageQueue&quot;</span>;</span><br><span class="line">        <span class="built_in">ALOGW</span>(<span class="string">&quot;%s&quot;</span>, g_error_msg.<span class="built_in">c_str</span>());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> msgpipe[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">pipe</span>(msgpipe)) &#123;</span><br><span class="line">        g_error_msg = android::base::<span class="built_in">StringPrintf</span>(<span class="string">&quot;could not create pipe: %s&quot;</span>, <span class="built_in">strerror</span>(errno));</span><br><span class="line">        <span class="built_in">ALOGW</span>(<span class="string">&quot;%s&quot;</span>, g_error_msg.<span class="built_in">c_str</span>());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    code-&gt;mainWorkRead = msgpipe[<span class="number">0</span>];</span><br><span class="line">    code-&gt;mainWorkWrite = msgpipe[<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> result = <span class="built_in">fcntl</span>(code-&gt;mainWorkRead, F_SETFL, O_NONBLOCK);</span><br><span class="line">    <span class="built_in">SLOGW_IF</span>(result != <span class="number">0</span>, <span class="string">&quot;Could not make main work read pipe &quot;</span></span><br><span class="line">            <span class="string">&quot;non-blocking: %s&quot;</span>, <span class="built_in">strerror</span>(errno));</span><br><span class="line">    result = <span class="built_in">fcntl</span>(code-&gt;mainWorkWrite, F_SETFL, O_NONBLOCK);</span><br><span class="line">    <span class="built_in">SLOGW_IF</span>(result != <span class="number">0</span>, <span class="string">&quot;Could not make main work write pipe &quot;</span></span><br><span class="line">            <span class="string">&quot;non-blocking: %s&quot;</span>, <span class="built_in">strerror</span>(errno));</span><br><span class="line">    code-&gt;messageQueue-&gt;<span class="built_in">getLooper</span>()-&gt;<span class="built_in">addFd</span>(</span><br><span class="line">            code-&gt;mainWorkRead, <span class="number">0</span>, ALOOPER_EVENT_INPUT, mainWorkCallback, code.<span class="built_in">get</span>());</span><br><span class="line"></span><br><span class="line">    code-&gt;ANativeActivity::callbacks = &amp;code-&gt;callbacks;</span><br><span class="line">    <span class="keyword">if</span> (env-&gt;<span class="built_in">GetJavaVM</span>(&amp;code-&gt;vm) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        g_error_msg = <span class="string">&quot;NativeActivity GetJavaVM failed&quot;</span>;</span><br><span class="line">        <span class="built_in">ALOGW</span>(<span class="string">&quot;%s&quot;</span>, g_error_msg.<span class="built_in">c_str</span>());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    code-&gt;env = env;</span><br><span class="line">    code-&gt;clazz = env-&gt;<span class="built_in">NewGlobalRef</span>(clazz);</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* dirStr = env-&gt;<span class="built_in">GetStringUTFChars</span>(internalDataDir, <span class="literal">NULL</span>);</span><br><span class="line">    code-&gt;internalDataPathObj = dirStr;</span><br><span class="line">    code-&gt;internalDataPath = code-&gt;internalDataPathObj.<span class="built_in">string</span>();</span><br><span class="line">    env-&gt;<span class="built_in">ReleaseStringUTFChars</span>(internalDataDir, dirStr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (externalDataDir != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        dirStr = env-&gt;<span class="built_in">GetStringUTFChars</span>(externalDataDir, <span class="literal">NULL</span>);</span><br><span class="line">        code-&gt;externalDataPathObj = dirStr;</span><br><span class="line">        env-&gt;<span class="built_in">ReleaseStringUTFChars</span>(externalDataDir, dirStr);</span><br><span class="line">    &#125;</span><br><span class="line">    code-&gt;externalDataPath = code-&gt;externalDataPathObj.<span class="built_in">string</span>();</span><br><span class="line"></span><br><span class="line">    code-&gt;sdkVersion = sdkVersion;</span><br><span class="line"></span><br><span class="line">    code-&gt;javaAssetManager = env-&gt;<span class="built_in">NewGlobalRef</span>(jAssetMgr);</span><br><span class="line">    code-&gt;assetManager = <span class="built_in">NdkAssetManagerForJavaObject</span>(env, jAssetMgr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (obbDir != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        dirStr = env-&gt;<span class="built_in">GetStringUTFChars</span>(obbDir, <span class="literal">NULL</span>);</span><br><span class="line">        code-&gt;obbPathObj = dirStr;</span><br><span class="line">        env-&gt;<span class="built_in">ReleaseStringUTFChars</span>(obbDir, dirStr);</span><br><span class="line">    &#125;</span><br><span class="line">    code-&gt;obbPath = code-&gt;obbPathObj.<span class="built_in">string</span>();</span><br><span class="line"></span><br><span class="line">    jbyte* rawSavedState = <span class="literal">NULL</span>;</span><br><span class="line">    jsize rawSavedSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (savedState != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        rawSavedState = env-&gt;<span class="built_in">GetByteArrayElements</span>(savedState, <span class="literal">NULL</span>);</span><br><span class="line">        rawSavedSize = env-&gt;<span class="built_in">GetArrayLength</span>(savedState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    code-&gt;<span class="built_in">createActivityFunc</span>(code.<span class="built_in">get</span>(), rawSavedState, rawSavedSize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rawSavedState != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        env-&gt;<span class="built_in">ReleaseByteArrayElements</span>(savedState, rawSavedState, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (jlong)code.<span class="built_in">release</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> jstring <span class="title">getDlError_native</span><span class="params">(JNIEnv* env, jobject clazz)</span> </span>&#123;</span><br><span class="line">  jstring result = env-&gt;<span class="built_in">NewStringUTF</span>(g_error_msg.<span class="built_in">c_str</span>());</span><br><span class="line">  g_error_msg.<span class="built_in">clear</span>();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">unloadNativeCode_native</span><span class="params">(JNIEnv* env, jobject clazz, jlong handle)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (kLogTrace) &#123;</span><br><span class="line">        <span class="built_in">ALOGD</span>(<span class="string">&quot;unloadNativeCode_native&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (handle != <span class="number">0</span>) &#123;</span><br><span class="line">        NativeCode* code = (NativeCode*)handle;</span><br><span class="line">        <span class="keyword">delete</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">onStart_native</span><span class="params">(JNIEnv* env, jobject clazz, jlong handle)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (kLogTrace) &#123;</span><br><span class="line">        <span class="built_in">ALOGD</span>(<span class="string">&quot;onStart_native&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (handle != <span class="number">0</span>) &#123;</span><br><span class="line">        NativeCode* code = (NativeCode*)handle;</span><br><span class="line">        <span class="keyword">if</span> (code-&gt;callbacks.onStart != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            code-&gt;callbacks.<span class="built_in">onStart</span>(code);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">onResume_native</span><span class="params">(JNIEnv* env, jobject clazz, jlong handle)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (kLogTrace) &#123;</span><br><span class="line">        <span class="built_in">ALOGD</span>(<span class="string">&quot;onResume_native&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (handle != <span class="number">0</span>) &#123;</span><br><span class="line">        NativeCode* code = (NativeCode*)handle;</span><br><span class="line">        <span class="keyword">if</span> (code-&gt;callbacks.onResume != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            code-&gt;callbacks.<span class="built_in">onResume</span>(code);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> jbyteArray</span></span><br><span class="line"><span class="function"><span class="title">onSaveInstanceState_native</span><span class="params">(JNIEnv* env, jobject clazz, jlong handle)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (kLogTrace) &#123;</span><br><span class="line">        <span class="built_in">ALOGD</span>(<span class="string">&quot;onSaveInstanceState_native&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    jbyteArray array = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (handle != <span class="number">0</span>) &#123;</span><br><span class="line">        NativeCode* code = (NativeCode*)handle;</span><br><span class="line">        <span class="keyword">if</span> (code-&gt;callbacks.onSaveInstanceState != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="type">size_t</span> len = <span class="number">0</span>;</span><br><span class="line">            jbyte* state = (jbyte*)code-&gt;callbacks.<span class="built_in">onSaveInstanceState</span>(code, &amp;len);</span><br><span class="line">            <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                array = env-&gt;<span class="built_in">NewByteArray</span>(len);</span><br><span class="line">                <span class="keyword">if</span> (array != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                    env-&gt;<span class="built_in">SetByteArrayRegion</span>(array, <span class="number">0</span>, len, state);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (state != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="built_in">free</span>(state);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">onPause_native</span><span class="params">(JNIEnv* env, jobject clazz, jlong handle)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (kLogTrace) &#123;</span><br><span class="line">        <span class="built_in">ALOGD</span>(<span class="string">&quot;onPause_native&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (handle != <span class="number">0</span>) &#123;</span><br><span class="line">        NativeCode* code = (NativeCode*)handle;</span><br><span class="line">        <span class="keyword">if</span> (code-&gt;callbacks.onPause != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            code-&gt;callbacks.<span class="built_in">onPause</span>(code);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">onStop_native</span><span class="params">(JNIEnv* env, jobject clazz, jlong handle)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (kLogTrace) &#123;</span><br><span class="line">        <span class="built_in">ALOGD</span>(<span class="string">&quot;onStop_native&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (handle != <span class="number">0</span>) &#123;</span><br><span class="line">        NativeCode* code = (NativeCode*)handle;</span><br><span class="line">        <span class="keyword">if</span> (code-&gt;callbacks.onStop != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            code-&gt;callbacks.<span class="built_in">onStop</span>(code);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">onConfigurationChanged_native</span><span class="params">(JNIEnv* env, jobject clazz, jlong handle)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (kLogTrace) &#123;</span><br><span class="line">        <span class="built_in">ALOGD</span>(<span class="string">&quot;onConfigurationChanged_native&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (handle != <span class="number">0</span>) &#123;</span><br><span class="line">        NativeCode* code = (NativeCode*)handle;</span><br><span class="line">        <span class="keyword">if</span> (code-&gt;callbacks.onConfigurationChanged != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            code-&gt;callbacks.<span class="built_in">onConfigurationChanged</span>(code);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">onLowMemory_native</span><span class="params">(JNIEnv* env, jobject clazz, jlong handle)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (kLogTrace) &#123;</span><br><span class="line">        <span class="built_in">ALOGD</span>(<span class="string">&quot;onLowMemory_native&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (handle != <span class="number">0</span>) &#123;</span><br><span class="line">        NativeCode* code = (NativeCode*)handle;</span><br><span class="line">        <span class="keyword">if</span> (code-&gt;callbacks.onLowMemory != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            code-&gt;callbacks.<span class="built_in">onLowMemory</span>(code);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">onWindowFocusChanged_native</span><span class="params">(JNIEnv* env, jobject clazz, jlong handle, jboolean focused)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (kLogTrace) &#123;</span><br><span class="line">        <span class="built_in">ALOGD</span>(<span class="string">&quot;onWindowFocusChanged_native&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (handle != <span class="number">0</span>) &#123;</span><br><span class="line">        NativeCode* code = (NativeCode*)handle;</span><br><span class="line">        <span class="keyword">if</span> (code-&gt;callbacks.onWindowFocusChanged != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            code-&gt;callbacks.<span class="built_in">onWindowFocusChanged</span>(code, focused ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">onSurfaceCreated_native</span><span class="params">(JNIEnv* env, jobject clazz, jlong handle, jobject surface)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (kLogTrace) &#123;</span><br><span class="line">        <span class="built_in">ALOGD</span>(<span class="string">&quot;onSurfaceCreated_native&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (handle != <span class="number">0</span>) &#123;</span><br><span class="line">        NativeCode* code = (NativeCode*)handle;</span><br><span class="line">        code-&gt;<span class="built_in">setSurface</span>(surface);</span><br><span class="line">        <span class="keyword">if</span> (code-&gt;nativeWindow != <span class="literal">NULL</span> &amp;&amp; code-&gt;callbacks.onNativeWindowCreated != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            code-&gt;callbacks.<span class="built_in">onNativeWindowCreated</span>(code,</span><br><span class="line">                    code-&gt;nativeWindow.<span class="built_in">get</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int32_t</span> <span class="title">getWindowProp</span><span class="params">(ANativeWindow* window, <span class="type">int</span> what)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="type">int</span> res = window-&gt;<span class="built_in">query</span>(window, what, &amp;value);</span><br><span class="line">    <span class="keyword">return</span> res &lt; <span class="number">0</span> ? res : value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">onSurfaceChanged_native</span><span class="params">(JNIEnv* env, jobject clazz, jlong handle, jobject surface,</span></span></span><br><span class="line"><span class="params"><span class="function">        jint format, jint width, jint height)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (kLogTrace) &#123;</span><br><span class="line">        <span class="built_in">ALOGD</span>(<span class="string">&quot;onSurfaceChanged_native&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (handle != <span class="number">0</span>) &#123;</span><br><span class="line">        NativeCode* code = (NativeCode*)handle;</span><br><span class="line">        sp&lt;ANativeWindow&gt; oldNativeWindow = code-&gt;nativeWindow;</span><br><span class="line">        code-&gt;<span class="built_in">setSurface</span>(surface);</span><br><span class="line">        <span class="keyword">if</span> (oldNativeWindow != code-&gt;nativeWindow) &#123;</span><br><span class="line">            <span class="keyword">if</span> (oldNativeWindow != <span class="literal">NULL</span> &amp;&amp; code-&gt;callbacks.onNativeWindowDestroyed != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                code-&gt;callbacks.<span class="built_in">onNativeWindowDestroyed</span>(code,</span><br><span class="line">                        oldNativeWindow.<span class="built_in">get</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (code-&gt;nativeWindow != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (code-&gt;callbacks.onNativeWindowCreated != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                    code-&gt;callbacks.<span class="built_in">onNativeWindowCreated</span>(code,</span><br><span class="line">                            code-&gt;nativeWindow.<span class="built_in">get</span>());</span><br><span class="line">                &#125;</span><br><span class="line">                code-&gt;lastWindowWidth = <span class="built_in">getWindowProp</span>(code-&gt;nativeWindow.<span class="built_in">get</span>(),</span><br><span class="line">                        NATIVE_WINDOW_WIDTH);</span><br><span class="line">                code-&gt;lastWindowHeight = <span class="built_in">getWindowProp</span>(code-&gt;nativeWindow.<span class="built_in">get</span>(),</span><br><span class="line">                        NATIVE_WINDOW_HEIGHT);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Maybe it resized?</span></span><br><span class="line">            <span class="type">int32_t</span> newWidth = <span class="built_in">getWindowProp</span>(code-&gt;nativeWindow.<span class="built_in">get</span>(),</span><br><span class="line">                    NATIVE_WINDOW_WIDTH);</span><br><span class="line">            <span class="type">int32_t</span> newHeight = <span class="built_in">getWindowProp</span>(code-&gt;nativeWindow.<span class="built_in">get</span>(),</span><br><span class="line">                    NATIVE_WINDOW_HEIGHT);</span><br><span class="line">            <span class="keyword">if</span> (newWidth != code-&gt;lastWindowWidth</span><br><span class="line">                    || newHeight != code-&gt;lastWindowHeight) &#123;</span><br><span class="line">                <span class="keyword">if</span> (code-&gt;callbacks.onNativeWindowResized != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                    code-&gt;callbacks.<span class="built_in">onNativeWindowResized</span>(code,</span><br><span class="line">                            code-&gt;nativeWindow.<span class="built_in">get</span>());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">onSurfaceRedrawNeeded_native</span><span class="params">(JNIEnv* env, jobject clazz, jlong handle)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (kLogTrace) &#123;</span><br><span class="line">        <span class="built_in">ALOGD</span>(<span class="string">&quot;onSurfaceRedrawNeeded_native&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (handle != <span class="number">0</span>) &#123;</span><br><span class="line">        NativeCode* code = (NativeCode*)handle;</span><br><span class="line">        <span class="keyword">if</span> (code-&gt;nativeWindow != <span class="literal">NULL</span> &amp;&amp; code-&gt;callbacks.onNativeWindowRedrawNeeded != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            code-&gt;callbacks.<span class="built_in">onNativeWindowRedrawNeeded</span>(code, code-&gt;nativeWindow.<span class="built_in">get</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">onSurfaceDestroyed_native</span><span class="params">(JNIEnv* env, jobject clazz, jlong handle, jobject surface)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (kLogTrace) &#123;</span><br><span class="line">        <span class="built_in">ALOGD</span>(<span class="string">&quot;onSurfaceDestroyed_native&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (handle != <span class="number">0</span>) &#123;</span><br><span class="line">        NativeCode* code = (NativeCode*)handle;</span><br><span class="line">        <span class="keyword">if</span> (code-&gt;nativeWindow != <span class="literal">NULL</span> &amp;&amp; code-&gt;callbacks.onNativeWindowDestroyed != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            code-&gt;callbacks.<span class="built_in">onNativeWindowDestroyed</span>(code,</span><br><span class="line">                    code-&gt;nativeWindow.<span class="built_in">get</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        code-&gt;<span class="built_in">setSurface</span>(<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">onInputQueueCreated_native</span><span class="params">(JNIEnv* env, jobject clazz, jlong handle, jlong queuePtr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (kLogTrace) &#123;</span><br><span class="line">        <span class="built_in">ALOGD</span>(<span class="string">&quot;onInputChannelCreated_native&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (handle != <span class="number">0</span>) &#123;</span><br><span class="line">        NativeCode* code = (NativeCode*)handle;</span><br><span class="line">        <span class="keyword">if</span> (code-&gt;callbacks.onInputQueueCreated != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            AInputQueue* queue = <span class="built_in">reinterpret_cast</span>&lt;AInputQueue*&gt;(queuePtr);</span><br><span class="line">            code-&gt;callbacks.<span class="built_in">onInputQueueCreated</span>(code, queue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">onInputQueueDestroyed_native</span><span class="params">(JNIEnv* env, jobject clazz, jlong handle, jlong queuePtr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (kLogTrace) &#123;</span><br><span class="line">        <span class="built_in">ALOGD</span>(<span class="string">&quot;onInputChannelDestroyed_native&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (handle != <span class="number">0</span>) &#123;</span><br><span class="line">        NativeCode* code = (NativeCode*)handle;</span><br><span class="line">        <span class="keyword">if</span> (code-&gt;callbacks.onInputQueueDestroyed != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            AInputQueue* queue = <span class="built_in">reinterpret_cast</span>&lt;AInputQueue*&gt;(queuePtr);</span><br><span class="line">            code-&gt;callbacks.<span class="built_in">onInputQueueDestroyed</span>(code, queue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">onContentRectChanged_native</span><span class="params">(JNIEnv* env, jobject clazz, jlong handle,</span></span></span><br><span class="line"><span class="params"><span class="function">        jint x, jint y, jint w, jint h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (kLogTrace) &#123;</span><br><span class="line">        <span class="built_in">ALOGD</span>(<span class="string">&quot;onContentRectChanged_native&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (handle != <span class="number">0</span>) &#123;</span><br><span class="line">        NativeCode* code = (NativeCode*)handle;</span><br><span class="line">        <span class="keyword">if</span> (code-&gt;callbacks.onContentRectChanged != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            ARect rect;</span><br><span class="line">            rect.left = x;</span><br><span class="line">            rect.top = y;</span><br><span class="line">            rect.right = x+w;</span><br><span class="line">            rect.bottom = y+h;</span><br><span class="line">            code-&gt;callbacks.<span class="built_in">onContentRectChanged</span>(code, &amp;rect);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> JNINativeMethod g_methods[] = &#123;</span><br><span class="line">    &#123; <span class="string">&quot;loadNativeCode&quot;</span>,</span><br><span class="line">        <span class="string">&quot;(Ljava/lang/String;Ljava/lang/String;Landroid/os/MessageQueue;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILandroid/content/res/AssetManager;[BLjava/lang/ClassLoader;Ljava/lang/String;)J&quot;</span>,</span><br><span class="line">        (<span class="type">void</span>*)loadNativeCode_native &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;getDlError&quot;</span>, <span class="string">&quot;()Ljava/lang/String;&quot;</span>, (<span class="type">void</span>*) getDlError_native &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;unloadNativeCode&quot;</span>, <span class="string">&quot;(J)V&quot;</span>, (<span class="type">void</span>*)unloadNativeCode_native &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;onStartNative&quot;</span>, <span class="string">&quot;(J)V&quot;</span>, (<span class="type">void</span>*)onStart_native &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;onResumeNative&quot;</span>, <span class="string">&quot;(J)V&quot;</span>, (<span class="type">void</span>*)onResume_native &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;onSaveInstanceStateNative&quot;</span>, <span class="string">&quot;(J)[B&quot;</span>, (<span class="type">void</span>*)onSaveInstanceState_native &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;onPauseNative&quot;</span>, <span class="string">&quot;(J)V&quot;</span>, (<span class="type">void</span>*)onPause_native &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;onStopNative&quot;</span>, <span class="string">&quot;(J)V&quot;</span>, (<span class="type">void</span>*)onStop_native &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;onConfigurationChangedNative&quot;</span>, <span class="string">&quot;(J)V&quot;</span>, (<span class="type">void</span>*)onConfigurationChanged_native &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;onLowMemoryNative&quot;</span>, <span class="string">&quot;(J)V&quot;</span>, (<span class="type">void</span>*)onLowMemory_native &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;onWindowFocusChangedNative&quot;</span>, <span class="string">&quot;(JZ)V&quot;</span>, (<span class="type">void</span>*)onWindowFocusChanged_native &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;onSurfaceCreatedNative&quot;</span>, <span class="string">&quot;(JLandroid/view/Surface;)V&quot;</span>, (<span class="type">void</span>*)onSurfaceCreated_native &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;onSurfaceChangedNative&quot;</span>, <span class="string">&quot;(JLandroid/view/Surface;III)V&quot;</span>, (<span class="type">void</span>*)onSurfaceChanged_native &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;onSurfaceRedrawNeededNative&quot;</span>, <span class="string">&quot;(JLandroid/view/Surface;)V&quot;</span>, (<span class="type">void</span>*)onSurfaceRedrawNeeded_native &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;onSurfaceDestroyedNative&quot;</span>, <span class="string">&quot;(J)V&quot;</span>, (<span class="type">void</span>*)onSurfaceDestroyed_native &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;onInputQueueCreatedNative&quot;</span>, <span class="string">&quot;(JJ)V&quot;</span>,</span><br><span class="line">        (<span class="type">void</span>*)onInputQueueCreated_native &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;onInputQueueDestroyedNative&quot;</span>, <span class="string">&quot;(JJ)V&quot;</span>,</span><br><span class="line">        (<span class="type">void</span>*)onInputQueueDestroyed_native &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;onContentRectChangedNative&quot;</span>, <span class="string">&quot;(JIIII)V&quot;</span>, (<span class="type">void</span>*)onContentRectChanged_native &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>loadNativeCode_native加载Native库，获取handle，在Activity生命周期中，生命周期方法通过NativeCode* code &#x3D; (NativeCode*)handle; 交由Native代码执行，上文中直接使用 <a href="http://androidxref.com/9.0.0_r3/xref/prebuilts/ndk/current/sources/android/native_app_glue/android_native_app_glue.c">android_native_app_glue.c</a> , 里面已经实现了Native生命周期方法，也可自己写。</p>
<p>在loadNativeCode_native时：</p>
<ol>
<li><p>首先是通过OpenNativeLibrary来获取handle</p>
</li>
<li><p>通过设定的funcname来获取Activity创建方法 createActivityFunc</p>
</li>
<li><p>设置messageQueue</p>
</li>
<li><p>在messageQueue中设置主进程回调</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">code-&gt;messageQueue-&gt;<span class="built_in">getLooper</span>()-&gt;<span class="built_in">addFd</span>(</span><br><span class="line">            code-&gt;mainWorkRead, <span class="number">0</span>, ALOOPER_EVENT_INPUT, mainWorkCallback, code.<span class="built_in">get</span>());</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">mainWorkCallback</span><span class="params">(<span class="type">int</span> fd, <span class="type">int</span> events, <span class="type">void</span>* data)</span> </span>&#123;</span><br><span class="line">    NativeCode* code = (NativeCode*)data;</span><br><span class="line">    <span class="keyword">if</span> ((events &amp; POLLIN) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ActivityWork work;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">read_work</span>(code-&gt;mainWorkRead, &amp;work)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (kLogTrace) &#123;</span><br><span class="line">        <span class="built_in">ALOGD</span>(<span class="string">&quot;mainWorkCallback: cmd=%d&quot;</span>, work.cmd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> (work.cmd) &#123;</span><br><span class="line">        <span class="keyword">case</span> CMD_FINISH: &#123;</span><br><span class="line">            code-&gt;env-&gt;<span class="built_in">CallVoidMethod</span>(code-&gt;clazz, gNativeActivityClassInfo.finish);</span><br><span class="line">            code-&gt;messageQueue-&gt;<span class="built_in">raiseAndClearException</span>(code-&gt;env, <span class="string">&quot;finish&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> CMD_SET_WINDOW_FORMAT: &#123;</span><br><span class="line">            code-&gt;env-&gt;<span class="built_in">CallVoidMethod</span>(code-&gt;clazz,</span><br><span class="line">                    gNativeActivityClassInfo.setWindowFormat, work.arg1);</span><br><span class="line">            code-&gt;messageQueue-&gt;<span class="built_in">raiseAndClearException</span>(code-&gt;env, <span class="string">&quot;setWindowFormat&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> CMD_SET_WINDOW_FLAGS: &#123;</span><br><span class="line">            code-&gt;env-&gt;<span class="built_in">CallVoidMethod</span>(code-&gt;clazz,</span><br><span class="line">                    gNativeActivityClassInfo.setWindowFlags, work.arg1, work.arg2);</span><br><span class="line">            code-&gt;messageQueue-&gt;<span class="built_in">raiseAndClearException</span>(code-&gt;env, <span class="string">&quot;setWindowFlags&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> CMD_SHOW_SOFT_INPUT: &#123;</span><br><span class="line">            code-&gt;env-&gt;<span class="built_in">CallVoidMethod</span>(code-&gt;clazz,</span><br><span class="line">                    gNativeActivityClassInfo.showIme, work.arg1);</span><br><span class="line">            code-&gt;messageQueue-&gt;<span class="built_in">raiseAndClearException</span>(code-&gt;env, <span class="string">&quot;showIme&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> CMD_HIDE_SOFT_INPUT: &#123;</span><br><span class="line">            code-&gt;env-&gt;<span class="built_in">CallVoidMethod</span>(code-&gt;clazz,</span><br><span class="line">                    gNativeActivityClassInfo.hideIme, work.arg1);</span><br><span class="line">            code-&gt;messageQueue-&gt;<span class="built_in">raiseAndClearException</span>(code-&gt;env, <span class="string">&quot;hideIme&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">ALOGW</span>(<span class="string">&quot;Unknown work command: %d&quot;</span>, work.cmd);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>getLooper()-&gt;addFd() 方法见： &#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/system/">system</a>&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/system/core/">core</a>&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/system/core/libutils/">libutils</a>&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/system/core/libutils/Looper.cpp">Looper.cpp</a></p>
<p>数据通信通过管道进行。</p>
</li>
<li><p>设置JavaVM给NativeCode</p>
</li>
<li><p>设置internalDataPath、externalDataPath、javaAssetManager、obbPath</p>
</li>
<li><p>获取rawSavedState，并执行createActivityFunc</p>
</li>
<li><p>释放资源</p>
</li>
</ol>
<p>至此，完成Activity创建。</p>
<p>可简单看一下OpenNativeLibrary代码，OpenNativeLibrary方法也是Android加载JNI库时，实际使用的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.loadLibrary(<span class="string">&quot;native-lib&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/system/">system</a>&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/system/core/">core</a>&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/system/core/libnativeloader/">libnativeloader</a>&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/system/core/libnativeloader/native_loader.cpp">native_loader.cpp</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span>* <span class="title">OpenNativeLibrary</span><span class="params">(JNIEnv* env,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="type">int32_t</span> target_sdk_version,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="type">const</span> <span class="type">char</span>* path,</span></span></span><br><span class="line"><span class="params"><span class="function">                        jobject class_loader,</span></span></span><br><span class="line"><span class="params"><span class="function">                        jstring library_path,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="type">bool</span>* needs_native_bridge,</span></span></span><br><span class="line"><span class="params"><span class="function">                        std::string* error_msg)</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__ANDROID__)</span></span><br><span class="line">  <span class="built_in">UNUSED</span>(target_sdk_version);</span><br><span class="line">  <span class="keyword">if</span> (class_loader == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    *needs_native_bridge = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dlopen</span>(path, RTLD_NOW);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">guard</span><span class="params">(g_namespaces_mutex)</span></span>;</span><br><span class="line">  NativeLoaderNamespace ns;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!g_namespaces-&gt;<span class="built_in">FindNamespaceByClassLoader</span>(env, class_loader, &amp;ns)) &#123;</span><br><span class="line">    <span class="comment">// This is the case where the classloader was not created by ApplicationLoaders</span></span><br><span class="line">    <span class="comment">// In this case we create an isolated not-shared namespace for it.</span></span><br><span class="line">    <span class="keyword">if</span> (!g_namespaces-&gt;<span class="built_in">Create</span>(env,</span><br><span class="line">                              target_sdk_version,</span><br><span class="line">                              class_loader,</span><br><span class="line">                              <span class="literal">false</span> <span class="comment">/* is_shared */</span>,</span><br><span class="line">                              <span class="literal">false</span> <span class="comment">/* is_for_vendor */</span>,</span><br><span class="line">                              library_path,</span><br><span class="line">                              <span class="literal">nullptr</span>,</span><br><span class="line">                              &amp;ns,</span><br><span class="line">                              error_msg)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (ns.<span class="built_in">is_android_namespace</span>()) &#123;</span><br><span class="line">    android_dlextinfo extinfo;</span><br><span class="line">    extinfo.flags = ANDROID_DLEXT_USE_NAMESPACE;</span><br><span class="line">    extinfo.library_namespace = ns.<span class="built_in">get_android_ns</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span>* handle = <span class="built_in">android_dlopen_ext</span>(path, RTLD_NOW, &amp;extinfo);</span><br><span class="line">    <span class="keyword">if</span> (handle == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">      *error_msg = <span class="built_in">dlerror</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    *needs_native_bridge = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> handle;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="type">void</span>* handle = <span class="built_in">NativeBridgeLoadLibraryExt</span>(path, RTLD_NOW, ns.<span class="built_in">get_native_bridge_ns</span>());</span><br><span class="line">    <span class="keyword">if</span> (handle == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">      *error_msg = <span class="built_in">NativeBridgeGetError</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    *needs_native_bridge = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> handle;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">  <span class="built_in">UNUSED</span>(env, target_sdk_version, class_loader);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Do some best effort to emulate library-path support. It will not</span></span><br><span class="line">  <span class="comment">// work for dependencies.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Note: null has a special meaning and must be preserved.</span></span><br><span class="line">  std::string c_library_path;  <span class="comment">// Empty string by default.</span></span><br><span class="line">  <span class="keyword">if</span> (library_path != <span class="literal">nullptr</span> &amp;&amp; path != <span class="literal">nullptr</span> &amp;&amp; path[<span class="number">0</span>] != <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">    <span class="function">ScopedUtfChars <span class="title">library_path_utf_chars</span><span class="params">(env, library_path)</span></span>;</span><br><span class="line">    c_library_path = library_path_utf_chars.<span class="built_in">c_str</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  std::vector&lt;std::string&gt; library_paths = base::<span class="built_in">Split</span>(c_library_path, <span class="string">&quot;:&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">const</span> std::string&amp; lib_path : library_paths) &#123;</span><br><span class="line">    *needs_native_bridge = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* path_arg;</span><br><span class="line">    std::string complete_path;</span><br><span class="line">    <span class="keyword">if</span> (path == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">      <span class="comment">// Preserve null.</span></span><br><span class="line">      path_arg = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      complete_path = lib_path;</span><br><span class="line">      <span class="keyword">if</span> (!complete_path.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        complete_path.<span class="built_in">append</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      complete_path.<span class="built_in">append</span>(path);</span><br><span class="line">      path_arg = complete_path.<span class="built_in">c_str</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span>* handle = <span class="built_in">dlopen</span>(path_arg, RTLD_NOW);</span><br><span class="line">    <span class="keyword">if</span> (handle != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> handle;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">NativeBridgeIsSupported</span>(path_arg)) &#123;</span><br><span class="line">      *needs_native_bridge = <span class="literal">true</span>;</span><br><span class="line">      handle = <span class="built_in">NativeBridgeLoadLibrary</span>(path_arg, RTLD_NOW);</span><br><span class="line">      <span class="keyword">if</span> (handle != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> handle;</span><br><span class="line">      &#125;</span><br><span class="line">      *error_msg = <span class="built_in">NativeBridgeGetError</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      *error_msg = <span class="built_in">dlerror</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段主要是加载Native库的代码。可参考：</p>
<p><a href="https://cloud.tencent.com/developer/article/1034856">https://cloud.tencent.com/developer/article/1034856</a></p>
<p><a href="https://blog.csdn.net/edonlii/article/details/8445239">https://blog.csdn.net/edonlii/article/details/8445239</a></p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>Android在启动AndroidManifest.xml中配置的android.app.NativeActivity后，主要完成了一下工作：</p>
<ol>
<li>通过libname获取NativeCode，并将android.app.NativeActivity的生命周期方法交给NativeCode处理，并托管Surface、InputQueue给Native</li>
<li>在加载NativeCode对应的库时，通过OpenNativeLibrary加载Native库，进行一些列设置后，执行Native库中funcname对于的方法，用来创建原生的Native App。</li>
</ol>
<p>&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/external/">external</a>&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/external/skia/">skia</a>&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/external/skia/tools/">tools</a>&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/external/skia/tools/sk_app/">sk_app</a>&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/external/skia/tools/sk_app/android/">android</a>&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/external/skia/tools/sk_app/android/main_android.cpp">main_android.cpp</a></p>
<p>&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/external/">external</a>&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/external/flatbuffers/">flatbuffers</a>&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/external/flatbuffers/android/">android</a>&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/external/flatbuffers/android/jni/">jni</a>&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/external/flatbuffers/android/jni/main.cpp">main.cpp</a></p>
<p>&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/prebuilts/">prebuilts</a>&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/prebuilts/ndk/">ndk</a>&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/prebuilts/ndk/current/">current</a>&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/prebuilts/ndk/current/sources/">sources</a>&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/prebuilts/ndk/current/sources/android/">android</a>&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/prebuilts/ndk/current/sources/android/native_app_glue/">native_app_glue</a>&#x2F;<a href="http://androidxref.com/9.0.0_r3/xref/prebuilts/ndk/current/sources/android/native_app_glue/android_native_app_glue.c">android_native_app_glue.c</a></p>
<h3 id="0x04-附录：CMake简单实用"><a href="#0x04-附录：CMake简单实用" class="headerlink" title="0x04 附录：CMake简单实用"></a>0x04 附录：CMake简单实用</h3>]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Chromiun Android 编译</title>
    <url>/2021/05/13/Chromiun%20Android%20%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git</span><br><span class="line">export PATH=$PATH:/home/zauther/Libraries/depot_tools</span><br><span class="line">fetch --nohooks android</span><br><span class="line"></span><br><span class="line">gclient sync</span><br><span class="line">build/install-build-deps-android.sh</span><br><span class="line">gclient runhooks</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gn args out/Default</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;</span> </span><br><span class="line">target_os = &quot;android&quot;</span><br><span class="line">target_cpu = &quot;arm64&quot;</span><br><span class="line">treat_warnings_as_errors=false</span><br><span class="line"></span><br><span class="line">autoninja -C out/Default chrome_public_apk</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">build/android/gradle/generate_gradle.py --output-directory out/Default --project-dir out/Chrome-Android</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git checkout <span class="number">92.0</span><span class="number">.4480</span><span class="number">.2</span></span><br><span class="line">gclient sync --with_branch_heads</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h4 id="网络问题"><a href="#网络问题" class="headerlink" title="网络问题"></a>网络问题</h4><ol>
<li>CIPD selfupdate failed. Trying to bootstrap the CIPD client from scratch</li>
<li>OpenSSL SSL_connect: SSL_ERROR_SYSCALL in connection to 127.0.0.1:1087</li>
</ol>
<p>解决办法：<br>git使用代理，并且是sock5代理，http会出现第二个问题</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export socks_proxy=scoks5://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line">export http_proxy=http://127.0.0.1:1087   </span><br><span class="line">export https_proxy=http://127.0.0.1:1087</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git config --global http.proxy &#x27;socks5://127.0.0.1:1080&#x27;</span><br><span class="line">git config --global https.proxy &#x27;socks5://127.0.0.1:1080&#x27;</span><br></pre></td></tr></table></figure>

<p>NameError: name ‘unicode’ is not defined<br>–plugin_out: protoc-gen-plugin: Plugin failed with status code 1.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ln -f /usr/bin/python2 /usr/bin/python</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Chromiun</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter Engine 编译</title>
    <url>/2020/02/06/Flutter-Engine-%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<h3 id="一、编译Flutter-Engine"><a href="#一、编译Flutter-Engine" class="headerlink" title="一、编译Flutter Engine"></a>一、编译Flutter Engine</h3><ol>
<li><p>创建工作目录 engine</p>
</li>
<li><p>添加 <a href="http://commondatastorage.googleapis.com/chrome-infra-docs/flat/depot_tools/docs/html/depot_tools_tutorial.html#_setting_up">depot_tools</a> 到环境变量，并在engine目录下创建.gclient文件</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">solutions = [</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;managed&quot;: False,</span><br><span class="line">    &quot;name&quot;: &quot;src/flutter&quot;,</span><br><span class="line">    &quot;url&quot;: &quot;git@github.com:&lt;your_name_here&gt;/engine.git&quot;,</span><br><span class="line">    &quot;custom_deps&quot;: &#123;&#125;,</span><br><span class="line">    &quot;deps_file&quot;: &quot;DEPS&quot;,</span><br><span class="line">    &quot;safesync_url&quot;: &quot;&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>在engine目录执行 <code>gclient sync</code> 命令同步源码和编译工具链</p>
</li>
<li><p>进入 <code>engine/src</code> 目录下，如果是linux平台执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ./build/install-build-deps-android.sh</span><br><span class="line">sudo ./build/install-build-deps.sh</span><br><span class="line"></span><br><span class="line">sudo ./flutter/build/install-build-deps-linux-desktop.sh</span><br></pre></td></tr></table></figure>

<p>如果是mac平台，安装jdk 1.8 和ant：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install ant</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>engine/src</code> 目录下，生成编译配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./flutter/tools/gn --android --unoptimized</span><br></pre></td></tr></table></figure>

<p>生成目录 <code>engine/src/out/android_debug_unopt</code></p>
</li>
<li><p>在<code>engine/src</code> 目录下，执行编译命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ninja -C out/android_debug_unopt</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="二、如何在mac下编译linux平台的产物？"><a href="#二、如何在mac下编译linux平台的产物？" class="headerlink" title="二、如何在mac下编译linux平台的产物？"></a>二、如何在mac下编译linux平台的产物？</h3><span id="more"></span>

<ol>
<li><p>创建docker镜像，由于需要科学上网，需要自行设置代理</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> DEPOT_TOOLS_PATH /home/admin/depot_tools</span><br><span class="line"><span class="keyword">ENV</span> BUILDROOT_PATH /home/admin/buildroot</span><br><span class="line"><span class="keyword">ENV</span> PATH $PATH:$DEPOT_TOOLS_PATH</span><br><span class="line"></span><br><span class="line"><span class="comment"># Notes:</span></span><br><span class="line"><span class="comment"># - libx11-dev is used by Flutter for desktop linux (see also install-build-deps-linux-desktop.sh)</span></span><br><span class="line"> <span class="comment"># - chrome is used by Flutter for web.</span></span><br><span class="line"> <span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">export</span> http_proxy=http://*.*.*.*:*** &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">     <span class="built_in">export</span> https_proxy=http://*.*.*.*:*** &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">     <span class="built_in">export</span> socks_proxy=socks://*.*.*.*:*** &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">     apt-get update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">     apt-get install -y sudo wget zip unzip git lsb-release openssh-client curl apt-transport-https libx11-dev software-properties-common build-essential libfreetype6-dev lib32stdc++6 libstdc++6 libpulse0 libglu1-mesa python pkg-config &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">     git <span class="built_in">clone</span> https://chromium.googlesource.com/chromium/tools/depot_tools.git <span class="variable">$DEPOT_TOOLS_PATH</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">     git config --global http.proxy http://*.*.*.*:*** &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">     git config --global https.proxy http://*.*.*.*:*** &amp;&amp; \ </span></span><br><span class="line">     git clone https://github.com/flutter/buildroot.git $BUILDROOT_PATH &amp;&amp; \</span><br><span class="line">     cd $BUILDROOT_PATH &amp;&amp; \</span><br><span class="line">     ./build/install-build-deps.sh --no-prompt &amp;&amp; \</span><br><span class="line">     ./build/install-build-deps-android.sh --no-prompt &amp;&amp; \</span><br><span class="line">     apt-get clean</span><br><span class="line"> <span class="keyword">RUN</span><span class="language-bash"> git config --global --<span class="built_in">unset</span> http.proxy &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">     git config --global --<span class="built_in">unset</span> https.proxy &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">     <span class="built_in">unset</span> http_proxy &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">     <span class="built_in">unset</span> https_proxy &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">     <span class="built_in">unset</span> socks_proxy &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">     <span class="built_in">chmod</span> -R 777 <span class="variable">$DEPOT_TOOLS_PATH</span> &amp;&amp;</span></span><br></pre></td></tr></table></figure>

<p>创建image</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build  --rm -f &quot;Dockerfile&quot; -t flutter-engine-bulder:latest &quot;.&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>拉去镜像，如果是本地构建的镜像，则已经存在，如果上传到hub上，则拉去</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images | grep flutter-engine-bulder &amp;&gt;/dev/null</span><br><span class="line">if [ $? -ne 0 ]; then</span><br><span class="line">    echo &quot;flutter-engine-bulder does not exist,we will docker pull it&quot;</span><br><span class="line">    docker pull flutter-engine-bulder:latest</span><br><span class="line">else</span><br><span class="line">    echo &quot;flutter-engine-bulder already exists&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过docker 执行gclient sync，将宿主的源码目录engine映射到容器内&#x2F;home&#x2F;admin&#x2F;engine，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --rm --privileged=true  -v engine:/home/admin/engine -w /home/admin/engine/ flutter-engine-bulder:latest gclient sync</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --rm --privileged=true  -v engine:/home/admin/engine -w /home/admin/engine/src flutter-engine-bulder:latest ./flutter/tools/gn --android --unoptimized</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行编译</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --rm --privileged=true  -v engine:/home/admin/engine -w /home/admin/engine/src flutter-engine-bulder:latest ninja -C out/android_debug_unopt</span><br></pre></td></tr></table></figure></li>
</ol>
<p>docker编译如果很慢，可以自行根据电脑性能设置docker参数：</p>
<ol>
<li>增大docker可使用的cpu核心数</li>
<li>增加docker可使用的内存</li>
<li>增加docker可使用的交换空间，如果交换空间太小，会出现clang错误</li>
</ol>
<p>在运行容器时，使用4核cpu编译：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --rm --privileged=true --cpus=4  -v engine:/home/admin/engine -w /home/admin/engine/src flutter-engine-bulder:latest ninja -C out/android_debug_unopt</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/flutter/flutter/wiki/Setting-up-the-Engine-development-environment">https://github.com/flutter/flutter/wiki/Setting-up-the-Engine-development-environment</a></p>
<p><a href="https://github.com/flutter/flutter/wiki/Compiling-the-engine">https://github.com/flutter/flutter/wiki/Compiling-the-engine</a></p>
<p><a href="https://github.com/flutter/engine/blob/master/ci/docker/build/Dockerfile">https://github.com/flutter/engine/blob/master/ci/docker/build/Dockerfile</a></p>
<p><a href="https://github.com/flutter/engine/blob/master/.cirrus.yml">https://github.com/flutter/engine/blob/master/.cirrus.yml</a></p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter Android 初始化流程</title>
    <url>/2022/05/10/Flutter-Android-%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h4 id="Flutter-UI容器"><a href="#Flutter-UI容器" class="headerlink" title="Flutter UI容器"></a>Flutter UI容器</h4><h5 id="承载Flutter的Android容器"><a href="#承载Flutter的Android容器" class="headerlink" title="承载Flutter的Android容器"></a>承载Flutter的Android容器</h5><p>Flutter容器包含有FlutterActivity和FlutterFragmentActivity。他们分别实现了<code>Provider</code>, <code>PluginRegistry</code>, <code>ViewFactory</code>，二者的方法主要通过<code>FlutterActivityDelegate</code> 代理出去</p>
<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="278px" preserveAspectRatio="none" style="width:888px;height:278px;background:#FFFFFF;" version="1.1" viewBox="0 0 888 278" width="888px" zoomAndPan="magnify"><defs/><g><!--MD5=[e72aae6de22b09cdc9529a59d7fca5eb]
class FlutterActivityDelegate--><g id="elem_FlutterActivityDelegate"><rect codeLine="1" fill="#F1F1F1" height="48" id="FlutterActivityDelegate" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="186" x="252" y="223"/><ellipse cx="267" cy="239" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M269.9688,244.6406 Q269.3906,244.9375 268.75,245.0781 Q268.1094,245.2344 267.4063,245.2344 Q264.9063,245.2344 263.5781,243.5938 Q262.2656,241.9375 262.2656,238.8125 Q262.2656,235.6875 263.5781,234.0313 Q264.9063,232.375 267.4063,232.375 Q268.1094,232.375 268.75,232.5313 Q269.4063,232.6875 269.9688,232.9844 L269.9688,235.7031 Q269.3438,235.125 268.75,234.8594 Q268.1563,234.5781 267.5313,234.5781 Q266.1875,234.5781 265.5,235.6563 Q264.8125,236.7188 264.8125,238.8125 Q264.8125,240.9063 265.5,241.9844 Q266.1875,243.0469 267.5313,243.0469 Q268.1563,243.0469 268.75,242.7813 Q269.3438,242.5 269.9688,241.9219 L269.9688,244.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="154" x="281" y="243.8467">FlutterActivityDelegate</text><line style="stroke:#181818;stroke-width:0.5;" x1="253" x2="437" y1="255" y2="255"/><line style="stroke:#181818;stroke-width:0.5;" x1="253" x2="437" y1="263" y2="263"/></g><!--MD5=[17641098b0a070581bab2e5cbfdafafe]
class FlutterActivityEvents--><g id="elem_FlutterActivityEvents"><rect fill="#F1F1F1" height="48" id="FlutterActivityEvents" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="170" x="7" y="115"/><ellipse cx="22" cy="131" fill="#B4A7E5" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M17.9219,126.7656 L17.9219,124.6094 L25.3125,124.6094 L25.3125,126.7656 L22.8438,126.7656 L22.8438,134.8438 L25.3125,134.8438 L25.3125,137 L17.9219,137 L17.9219,134.8438 L20.3906,134.8438 L20.3906,126.7656 L17.9219,126.7656 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="138" x="36" y="135.8467">FlutterActivityEvents</text><line style="stroke:#181818;stroke-width:0.5;" x1="8" x2="176" y1="147" y2="147"/><line style="stroke:#181818;stroke-width:0.5;" x1="8" x2="176" y1="155" y2="155"/></g><!--MD5=[3521822871a02163bc1090dd8c65b7f5]
class Provider--><g id="elem_Provider"><rect fill="#F1F1F1" height="48" id="Provider" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="88" x="184" y="7"/><ellipse cx="199" cy="23" fill="#B4A7E5" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M194.9219,18.7656 L194.9219,16.6094 L202.3125,16.6094 L202.3125,18.7656 L199.8438,18.7656 L199.8438,26.8438 L202.3125,26.8438 L202.3125,29 L194.9219,29 L194.9219,26.8438 L197.3906,26.8438 L197.3906,18.7656 L194.9219,18.7656 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="56" x="213" y="27.8467">Provider</text><line style="stroke:#181818;stroke-width:0.5;" x1="185" x2="271" y1="39" y2="39"/><line style="stroke:#181818;stroke-width:0.5;" x1="185" x2="271" y1="47" y2="47"/></g><!--MD5=[0bee35ff36c2bfe1d068cc18effabcca]
class PluginRegistry--><g id="elem_PluginRegistry"><rect fill="#F1F1F1" height="48" id="PluginRegistry" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="130" x="571" y="7"/><ellipse cx="586" cy="23" fill="#B4A7E5" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M581.9219,18.7656 L581.9219,16.6094 L589.3125,16.6094 L589.3125,18.7656 L586.8438,18.7656 L586.8438,26.8438 L589.3125,26.8438 L589.3125,29 L581.9219,29 L581.9219,26.8438 L584.3906,26.8438 L584.3906,18.7656 L581.9219,18.7656 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="98" x="600" y="27.8467">PluginRegistry</text><line style="stroke:#181818;stroke-width:0.5;" x1="572" x2="700" y1="39" y2="39"/><line style="stroke:#181818;stroke-width:0.5;" x1="572" x2="700" y1="47" y2="47"/></g><!--MD5=[f0a36ff588851750be7714682b8e0a08]
class FlutterActivity--><g id="elem_FlutterActivity"><rect codeLine="3" fill="#F1F1F1" height="48" id="FlutterActivity" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="123" x="283.5" y="115"/><ellipse cx="298.5" cy="131" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M301.4688,136.6406 Q300.8906,136.9375 300.25,137.0781 Q299.6094,137.2344 298.9063,137.2344 Q296.4063,137.2344 295.0781,135.5938 Q293.7656,133.9375 293.7656,130.8125 Q293.7656,127.6875 295.0781,126.0313 Q296.4063,124.375 298.9063,124.375 Q299.6094,124.375 300.25,124.5313 Q300.9063,124.6875 301.4688,124.9844 L301.4688,127.7031 Q300.8438,127.125 300.25,126.8594 Q299.6563,126.5781 299.0313,126.5781 Q297.6875,126.5781 297,127.6563 Q296.3125,128.7188 296.3125,130.8125 Q296.3125,132.9063 297,133.9844 Q297.6875,135.0469 299.0313,135.0469 Q299.6563,135.0469 300.25,134.7813 Q300.8438,134.5 301.4688,133.9219 L301.4688,136.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="91" x="312.5" y="135.8467">FlutterActivity</text><line style="stroke:#181818;stroke-width:0.5;" x1="284.5" x2="405.5" y1="147" y2="147"/><line style="stroke:#181818;stroke-width:0.5;" x1="284.5" x2="405.5" y1="155" y2="155"/></g><!--MD5=[c881b25adf3665c6568c9693d41a70f3]
class Activity--><g id="elem_Activity"><rect fill="#F1F1F1" height="48" id="Activity" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="79" x="307.5" y="7"/><ellipse cx="322.5" cy="23" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M325.4688,28.6406 Q324.8906,28.9375 324.25,29.0781 Q323.6094,29.2344 322.9063,29.2344 Q320.4063,29.2344 319.0781,27.5938 Q317.7656,25.9375 317.7656,22.8125 Q317.7656,19.6875 319.0781,18.0313 Q320.4063,16.375 322.9063,16.375 Q323.6094,16.375 324.25,16.5313 Q324.9063,16.6875 325.4688,16.9844 L325.4688,19.7031 Q324.8438,19.125 324.25,18.8594 Q323.6563,18.5781 323.0313,18.5781 Q321.6875,18.5781 321,19.6563 Q320.3125,20.7188 320.3125,22.8125 Q320.3125,24.9063 321,25.9844 Q321.6875,27.0469 323.0313,27.0469 Q323.6563,27.0469 324.25,26.7813 Q324.8438,26.5 325.4688,25.9219 L325.4688,28.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="47" x="336.5" y="27.8467">Activity</text><line style="stroke:#181818;stroke-width:0.5;" x1="308.5" x2="385.5" y1="39" y2="39"/><line style="stroke:#181818;stroke-width:0.5;" x1="308.5" x2="385.5" y1="47" y2="47"/></g><!--MD5=[6dd3dec888cfc650825cf24d563a6604]
class ViewFactory--><g id="elem_ViewFactory"><rect fill="#F1F1F1" height="48" id="ViewFactory" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="114" x="422" y="7"/><ellipse cx="437" cy="23" fill="#B4A7E5" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M432.9219,18.7656 L432.9219,16.6094 L440.3125,16.6094 L440.3125,18.7656 L437.8438,18.7656 L437.8438,26.8438 L440.3125,26.8438 L440.3125,29 L432.9219,29 L432.9219,26.8438 L435.3906,26.8438 L435.3906,18.7656 L432.9219,18.7656 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="82" x="451" y="27.8467">ViewFactory</text><line style="stroke:#181818;stroke-width:0.5;" x1="423" x2="535" y1="39" y2="39"/><line style="stroke:#181818;stroke-width:0.5;" x1="423" x2="535" y1="47" y2="47"/></g><!--MD5=[95ba53836d8309edeaf5cdc27f597766]
class FlutterFragmentActivity--><g id="elem_FlutterFragmentActivity"><rect codeLine="5" fill="#F1F1F1" height="48" id="FlutterFragmentActivity" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="189" x="441.5" y="115"/><ellipse cx="456.5" cy="131" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M459.4688,136.6406 Q458.8906,136.9375 458.25,137.0781 Q457.6094,137.2344 456.9063,137.2344 Q454.4063,137.2344 453.0781,135.5938 Q451.7656,133.9375 451.7656,130.8125 Q451.7656,127.6875 453.0781,126.0313 Q454.4063,124.375 456.9063,124.375 Q457.6094,124.375 458.25,124.5313 Q458.9063,124.6875 459.4688,124.9844 L459.4688,127.7031 Q458.8438,127.125 458.25,126.8594 Q457.6563,126.5781 457.0313,126.5781 Q455.6875,126.5781 455,127.6563 Q454.3125,128.7188 454.3125,130.8125 Q454.3125,132.9063 455,133.9844 Q455.6875,135.0469 457.0313,135.0469 Q457.6563,135.0469 458.25,134.7813 Q458.8438,134.5 459.4688,133.9219 L459.4688,136.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="157" x="470.5" y="135.8467">FlutterFragmentActivity</text><line style="stroke:#181818;stroke-width:0.5;" x1="442.5" x2="629.5" y1="147" y2="147"/><line style="stroke:#181818;stroke-width:0.5;" x1="442.5" x2="629.5" y1="155" y2="155"/></g><!--MD5=[c1be6ddf4ea56b75972dac491aee9766]
class FragmentActivity--><g id="elem_FragmentActivity"><rect fill="#F1F1F1" height="48" id="FragmentActivity" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="145" x="736.5" y="7"/><ellipse cx="751.5" cy="23" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M754.4688,28.6406 Q753.8906,28.9375 753.25,29.0781 Q752.6094,29.2344 751.9063,29.2344 Q749.4063,29.2344 748.0781,27.5938 Q746.7656,25.9375 746.7656,22.8125 Q746.7656,19.6875 748.0781,18.0313 Q749.4063,16.375 751.9063,16.375 Q752.6094,16.375 753.25,16.5313 Q753.9063,16.6875 754.4688,16.9844 L754.4688,19.7031 Q753.8438,19.125 753.25,18.8594 Q752.6563,18.5781 752.0313,18.5781 Q750.6875,18.5781 750,19.6563 Q749.3125,20.7188 749.3125,22.8125 Q749.3125,24.9063 750,25.9844 Q750.6875,27.0469 752.0313,27.0469 Q752.6563,27.0469 753.25,26.7813 Q753.8438,26.5 754.4688,25.9219 L754.4688,28.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="113" x="765.5" y="27.8467">FragmentActivity</text><line style="stroke:#181818;stroke-width:0.5;" x1="737.5" x2="880.5" y1="39" y2="39"/><line style="stroke:#181818;stroke-width:0.5;" x1="737.5" x2="880.5" y1="47" y2="47"/></g><!--MD5=[6d4d55b415ec57c63ba4ca1e9a2d1454]
reverse link FlutterActivityEvents to FlutterActivityDelegate--><g id="link_FlutterActivityEvents_FlutterActivityDelegate"><path d="M165.6,170.83 C205.25,187.45 253.36,207.6 289.77,222.86 " fill="none" id="FlutterActivityEvents-backto-FlutterActivityDelegate" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="162.64,177.19,146.9,163,168.05,164.27,162.64,177.19" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[d8bdc4c8f5a96ab1d8388734b1795cfd]
reverse link Provider to FlutterActivityDelegate--><g id="link_Provider_FlutterActivityDelegate"><path d="M235.06,74.94 C240.71,101.56 250.35,135.76 266,163 C279.18,185.94 299.99,207.45 316.94,222.82 " fill="none" id="Provider-backto-FlutterActivityDelegate" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="228.14,76.04,231.28,55.08,241.9,73.42,228.14,76.04" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[2a74c99e06d90302b256aa11a4b2bb19]
reverse link PluginRegistry to FlutterActivityDelegate--><g id="link_PluginRegistry_FlutterActivityDelegate"><path d="M653.61,74.27 C662.18,102.18 667.02,138.06 648,163 C622.44,196.5 517.37,219.79 438.07,233 " fill="none" id="PluginRegistry-backto-FlutterActivityDelegate" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="646.94,76.41,646.82,55.22,660.13,71.71,646.94,76.41" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[5e61f2a041a633b8c2079a852f7c44fe]
reverse link Activity to FlutterActivity--><g id="link_Activity_FlutterActivity"><path d="M346.19,75.02 C345.93,88.58 345.66,103.04 345.44,114.68 " fill="none" id="Activity-backto-FlutterActivity" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="339.19,74.86,346.57,55,353.19,75.13,339.19,74.86" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[7757f424729984e3242432d4ebefb3a0]
reverse link Provider to FlutterActivity--><g id="link_Provider_FlutterActivity"><path d="M268.37,68.57 C285.24,83.86 304.35,101.17 319.26,114.68 " fill="none" id="Provider-backto-FlutterActivity" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="263.51,73.62,253.39,55,272.91,63.24,263.51,73.62" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[54c94e77e73502f23afb08d6de1be88a]
reverse link PluginRegistry to FlutterActivity--><g id="link_PluginRegistry_FlutterActivity"><path d="M553.87,61.92 C507.07,78.96 449.4,99.97 406.52,115.59 " fill="none" id="PluginRegistry-backto-FlutterActivity" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="551.67,55.27,572.86,55,556.46,68.42,551.67,55.27" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[02840d13fe8e09ddd7a33fca926f00af]
reverse link ViewFactory to FlutterActivity--><g id="link_ViewFactory_FlutterActivity"><path d="M433.95,67.64 C414.34,83.15 391.91,100.89 374.48,114.68 " fill="none" id="ViewFactory-backto-FlutterActivity" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="429.9,61.92,449.92,55,438.58,72.9,429.9,61.92" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[96f9ec98428bc9abb5cd714519aacf0a]
reverse link FragmentActivity to FlutterFragmentActivity--><g id="link_FragmentActivity_FlutterFragmentActivity"><path d="M731.04,62.27 C687.98,78.99 635.33,99.43 595.59,114.86 " fill="none" id="FragmentActivity-backto-FlutterFragmentActivity" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="728.59,55.71,749.76,55,733.65,68.76,728.59,55.71" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[5454928cf2c2f9c0033a141dc9ff403b]
reverse link Provider to FlutterFragmentActivity--><g id="link_Provider_FlutterFragmentActivity"><path d="M291.44,55.4 C360.26,79.68 420.65,99.96 465.82,114.94 " fill="none" id="Provider-backto-FlutterFragmentActivity" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="288.82,61.9,272.31,48.62,293.5,48.7,288.82,61.9" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[4e4ed14277b66b157851f2d6c9c8e1e2]
reverse link PluginRegistry to FlutterFragmentActivity--><g id="link_PluginRegistry_FlutterFragmentActivity"><path d="M600.38,69.75 C586.24,84.74 570.42,101.51 558,114.68 " fill="none" id="PluginRegistry-backto-FlutterFragmentActivity" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="595.49,64.74,614.3,55,605.67,74.35,595.49,64.74" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[3c53dad8fd8b1afd02392a60716f39ed]
reverse link ViewFactory to FlutterFragmentActivity--><g id="link_ViewFactory_FlutterFragmentActivity"><path d="M501.1,73.09 C508.68,87.2 516.9,102.48 523.46,114.68 " fill="none" id="ViewFactory-backto-FlutterFragmentActivity" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="494.68,75.93,491.37,55,507.01,69.3,494.68,75.93" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[bdfed072028aaf26f53ff1a8514797ca]
link FlutterActivity to FlutterActivityDelegate--><g id="link_FlutterActivity_FlutterActivityDelegate"><path codeLine="7" d="M345,163 C345,179 345,200.45 345,217.53 " fill="none" id="FlutterActivity-to-FlutterActivityDelegate" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="345,222.68,349,213.68,345,217.68,341,213.68,345,222.68" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[ecf2073e99c3d2dba415b1cf3afe2fab]
link FlutterFragmentActivity to FlutterActivityDelegate--><g id="link_FlutterFragmentActivity_FlutterActivityDelegate"><path codeLine="8" d="M494.56,163 C464.13,179.89 422.78,202.84 391.27,220.32 " fill="none" id="FlutterFragmentActivity-to-FlutterActivityDelegate" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="386.69,222.86,396.5021,222.0104,391.0668,220.4427,392.6345,215.0074,386.69,222.86" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[a7506a3f2f147ae3a7b7f9b0b5b8113a]
@startuml
class FlutterActivityDelegate implements FlutterActivityEvents, Provider, PluginRegistry

class FlutterActivity extends Activity implements Provider, PluginRegistry, ViewFactory 

class FlutterFragmentActivity extends FragmentActivity implements Provider, PluginRegistry, ViewFactory

FlutterActivity - -> FlutterActivityDelegate
FlutterFragmentActivity - -> FlutterActivityDelegate
@enduml

PlantUML version 1.2022.4(Sat Apr 09 13:29:17 UTC 2022)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: null
--></g></svg>

<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlutterActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> <span class="keyword">implements</span> <span class="title class_">Provider</span>, PluginRegistry, ViewFactory&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">FlutterActivityDelegate</span> <span class="variable">delegate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FlutterActivityDelegate</span>(<span class="built_in">this</span>, <span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> FlutterActivityEvents eventDelegate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Provider viewProvider;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PluginRegistry pluginRegistry;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FlutterActivity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.eventDelegate = <span class="built_in">this</span>.delegate;</span><br><span class="line">        <span class="built_in">this</span>.viewProvider = <span class="built_in">this</span>.delegate;</span><br><span class="line">        <span class="built_in">this</span>.pluginRegistry = <span class="built_in">this</span>.delegate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlutterFragmentActivity</span> <span class="keyword">extends</span> <span class="title class_">FragmentActivity</span> <span class="keyword">implements</span> <span class="title class_">Provider</span>, PluginRegistry, ViewFactory &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">FlutterActivityDelegate</span> <span class="variable">delegate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FlutterActivityDelegate</span>(<span class="built_in">this</span>, <span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> FlutterActivityEvents eventDelegate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Provider viewProvider;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PluginRegistry pluginRegistry;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FlutterFragmentActivity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.eventDelegate = <span class="built_in">this</span>.delegate;</span><br><span class="line">        <span class="built_in">this</span>.viewProvider = <span class="built_in">this</span>.delegate;</span><br><span class="line">        <span class="built_in">this</span>.pluginRegistry = <span class="built_in">this</span>.delegate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中 <code>Provider</code> 负责提供FlutterView</p>
<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="85px" preserveAspectRatio="none" style="width:222px;height:85px;background:#FFFFFF;" version="1.1" viewBox="0 0 222 85" width="222px" zoomAndPan="magnify"><defs/><g><!--MD5=[3521822871a02163bc1090dd8c65b7f5]
class Provider--><g id="elem_Provider"><rect codeLine="1" fill="#F1F1F1" height="64.2969" id="Provider" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="201" x="7" y="7"/><ellipse cx="75.25" cy="23" fill="#B4A7E5" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M71.1719,18.7656 L71.1719,16.6094 L78.5625,16.6094 L78.5625,18.7656 L76.0938,18.7656 L76.0938,26.8438 L78.5625,26.8438 L78.5625,29 L71.1719,29 L71.1719,26.8438 L73.6406,26.8438 L73.6406,18.7656 L71.1719,18.7656 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="56" x="95.75" y="27.8467">Provider</text><line style="stroke:#181818;stroke-width:0.5;" x1="8" x2="207" y1="39" y2="39"/><line style="stroke:#181818;stroke-width:0.5;" x1="8" x2="207" y1="47" y2="47"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="189" x="13" y="63.9951">FlutterView getFlutterView()</text></g><!--MD5=[016cced17aa1656ac4b1220b7f63625f]
@startuml
interface Provider{
FlutterView getFlutterView()
}
@enduml

PlantUML version 1.2022.4(Sat Apr 09 13:29:17 UTC 2022)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: null
--></g></svg>

<p><code>PluginRegistry</code>负责插件管理</p>
<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="117px" preserveAspectRatio="none" style="width:368px;height:117px;background:#FFFFFF;" version="1.1" viewBox="0 0 368 117" width="368px" zoomAndPan="magnify"><defs/><g><!--MD5=[0bee35ff36c2bfe1d068cc18effabcca]
class PluginRegistry--><g id="elem_PluginRegistry"><rect codeLine="1" fill="#F1F1F1" height="96.8906" id="PluginRegistry" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="347" x="7" y="7"/><ellipse cx="127.25" cy="23" fill="#B4A7E5" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M123.1719,18.7656 L123.1719,16.6094 L130.5625,16.6094 L130.5625,18.7656 L128.0938,18.7656 L128.0938,26.8438 L130.5625,26.8438 L130.5625,29 L123.1719,29 L123.1719,26.8438 L125.6406,26.8438 L125.6406,18.7656 L123.1719,18.7656 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="98" x="147.75" y="27.8467">PluginRegistry</text><line style="stroke:#181818;stroke-width:0.5;" x1="8" x2="353" y1="39" y2="39"/><line style="stroke:#181818;stroke-width:0.5;" x1="8" x2="353" y1="47" y2="47"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="335" x="13" y="63.9951">PluginRegistry.Registrar registrarFor(String var1);</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="215" x="13" y="80.292">boolean hasPlugin(String var1);</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="301" x="13" y="96.5889">&lt;T&gt; T valuePublishedByPlugin(String var1);</text></g><!--MD5=[0f2025c2beecc190146d3894637fbcd5]
@startuml
interface PluginRegistry {
    PluginRegistry.Registrar registrarFor(String var1);
    boolean hasPlugin(String var1);
    <T> T valuePublishedByPlugin(String var1);
}
@enduml

PlantUML version 1.2022.4(Sat Apr 09 13:29:17 UTC 2022)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: null
--></g></svg>

<p><code>ViewFactory</code> 负责管理FlutterView和FlutterNative</p>
<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="117px" preserveAspectRatio="none" style="width:335px;height:117px;background:#FFFFFF;" version="1.1" viewBox="0 0 335 117" width="335px" zoomAndPan="magnify"><defs/><g><!--MD5=[6dd3dec888cfc650825cf24d563a6604]
class ViewFactory--><g id="elem_ViewFactory"><rect codeLine="1" fill="#F1F1F1" height="96.8906" id="ViewFactory" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="314" x="7" y="7"/><ellipse cx="118.75" cy="23" fill="#B4A7E5" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M114.6719,18.7656 L114.6719,16.6094 L122.0625,16.6094 L122.0625,18.7656 L119.5938,18.7656 L119.5938,26.8438 L122.0625,26.8438 L122.0625,29 L114.6719,29 L114.6719,26.8438 L117.1406,26.8438 L117.1406,18.7656 L114.6719,18.7656 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="82" x="139.25" y="27.8467">ViewFactory</text><line style="stroke:#181818;stroke-width:0.5;" x1="8" x2="320" y1="39" y2="39"/><line style="stroke:#181818;stroke-width:0.5;" x1="8" x2="320" y1="47" y2="47"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="302" x="13" y="63.9951">FlutterView createFlutterView(Context var1);</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="299" x="13" y="80.292">FlutterNativeView createFlutterNativeView();</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="232" x="13" y="96.5889">boolean retainFlutterNativeView();</text></g><!--MD5=[a5ccf00d8a809148ec13a598c48706b3]
@startuml
interface ViewFactory {
    FlutterView createFlutterView(Context var1);
    FlutterNativeView createFlutterNativeView();
    boolean retainFlutterNativeView();
}
@enduml

PlantUML version 1.2022.4(Sat Apr 09 13:29:17 UTC 2022)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: null
--></g></svg>

<h5 id="Flutter容器代理类-FlutterActivityDelegate"><a href="#Flutter容器代理类-FlutterActivityDelegate" class="headerlink" title="Flutter容器代理类 FlutterActivityDelegate"></a>Flutter容器代理类 FlutterActivityDelegate</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">FlutterActivityDelegate</span> <span class="keyword">implements</span> <span class="title class_">FlutterActivityEvents</span>, Provider, PluginRegistry &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="comment">// 设置全屏</span></span><br><span class="line">        <span class="keyword">if</span> (VERSION.SDK_INT &gt;= <span class="number">21</span>) &#123;</span><br><span class="line">            <span class="type">Window</span> <span class="variable">window</span> <span class="operator">=</span> <span class="built_in">this</span>.activity.getWindow();</span><br><span class="line">            window.addFlags(-<span class="number">2147483648</span>);</span><br><span class="line">            window.setStatusBarColor(<span class="number">1073741824</span>);</span><br><span class="line">            window.getDecorView().setSystemUiVisibility(<span class="number">1280</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取activity入参</span></span><br><span class="line">        String[] args = getArgsFromIntent(<span class="built_in">this</span>.activity.getIntent());</span><br><span class="line">        <span class="comment">// 确认Flutter Engine初始化完成，详细见后面</span></span><br><span class="line">        FlutterMain.ensureInitializationComplete(<span class="built_in">this</span>.activity.getApplicationContext(), args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建FlutterView</span></span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 这里实际上调用的是FlutterActivity或FlutterFragmentActivity中的createFlutterView，默认返回null</span></span><br><span class="line">        <span class="built_in">this</span>.flutterView = <span class="built_in">this</span>.viewFactory.createFlutterView(<span class="built_in">this</span>.activity); </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.flutterView == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">FlutterNativeView</span> <span class="variable">nativeView</span> <span class="operator">=</span> <span class="built_in">this</span>.viewFactory.createFlutterNativeView();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 新建FlutterView</span></span><br><span class="line">            <span class="built_in">this</span>.flutterView = <span class="keyword">new</span> <span class="title class_">FlutterView</span>(<span class="built_in">this</span>.activity, (AttributeSet)<span class="literal">null</span>, nativeView);</span><br><span class="line">            <span class="built_in">this</span>.flutterView.setLayoutParams(matchParent);</span><br><span class="line">            <span class="comment">// activity 的ContentView设置为flutterView</span></span><br><span class="line">            <span class="built_in">this</span>.activity.setContentView(<span class="built_in">this</span>.flutterView);</span><br><span class="line">            <span class="comment">// 创建并添加launchView</span></span><br><span class="line">            <span class="built_in">this</span>.launchView = <span class="built_in">this</span>.createLaunchView();</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.launchView != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.addLaunchView();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 运行Flutter appBundle，也就是加载Flutter代码</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.loadIntent(<span class="built_in">this</span>.activity.getIntent())) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">appBundlePath</span> <span class="operator">=</span> FlutterMain.findAppBundlePath();</span><br><span class="line">            <span class="keyword">if</span> (appBundlePath != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.runBundle(appBundlePath);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="FlutterView"><a href="#FlutterView" class="headerlink" title="FlutterView"></a>FlutterView</h5><p>FlutterView 是Flutter在Native上实际的绘制视图。</p>
<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="170px" preserveAspectRatio="none" style="width:493px;height:170px;background:#FFFFFF;" version="1.1" viewBox="0 0 493 170" width="493px" zoomAndPan="magnify"><defs/><g><!--MD5=[9e181a8feef4d879ff68ae341dac7e29]
class FlutterView--><g id="elem_FlutterView"><rect codeLine="1" fill="#F1F1F1" height="48" id="FlutterView" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="108" x="180" y="115"/><ellipse cx="195" cy="131" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M197.9688,136.6406 Q197.3906,136.9375 196.75,137.0781 Q196.1094,137.2344 195.4063,137.2344 Q192.9063,137.2344 191.5781,135.5938 Q190.2656,133.9375 190.2656,130.8125 Q190.2656,127.6875 191.5781,126.0313 Q192.9063,124.375 195.4063,124.375 Q196.1094,124.375 196.75,124.5313 Q197.4063,124.6875 197.9688,124.9844 L197.9688,127.7031 Q197.3438,127.125 196.75,126.8594 Q196.1563,126.5781 195.5313,126.5781 Q194.1875,126.5781 193.5,127.6563 Q192.8125,128.7188 192.8125,130.8125 Q192.8125,132.9063 193.5,133.9844 Q194.1875,135.0469 195.5313,135.0469 Q196.1563,135.0469 196.75,134.7813 Q197.3438,134.5 197.9688,133.9219 L197.9688,136.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="76" x="209" y="135.8467">FlutterView</text><line style="stroke:#181818;stroke-width:0.5;" x1="181" x2="287" y1="147" y2="147"/><line style="stroke:#181818;stroke-width:0.5;" x1="181" x2="287" y1="155" y2="155"/></g><!--MD5=[b8977a71577b55e49f7305cc373814dc]
class SurfaceView--><g id="elem_SurfaceView"><rect fill="#F1F1F1" height="48" id="SurfaceView" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="116" x="7" y="7"/><ellipse cx="22" cy="23" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M24.9688,28.6406 Q24.3906,28.9375 23.75,29.0781 Q23.1094,29.2344 22.4063,29.2344 Q19.9063,29.2344 18.5781,27.5938 Q17.2656,25.9375 17.2656,22.8125 Q17.2656,19.6875 18.5781,18.0313 Q19.9063,16.375 22.4063,16.375 Q23.1094,16.375 23.75,16.5313 Q24.4063,16.6875 24.9688,16.9844 L24.9688,19.7031 Q24.3438,19.125 23.75,18.8594 Q23.1563,18.5781 22.5313,18.5781 Q21.1875,18.5781 20.5,19.6563 Q19.8125,20.7188 19.8125,22.8125 Q19.8125,24.9063 20.5,25.9844 Q21.1875,27.0469 22.5313,27.0469 Q23.1563,27.0469 23.75,26.7813 Q24.3438,26.5 24.9688,25.9219 L24.9688,28.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="84" x="36" y="27.8467">SurfaceView</text><line style="stroke:#181818;stroke-width:0.5;" x1="8" x2="122" y1="39" y2="39"/><line style="stroke:#181818;stroke-width:0.5;" x1="8" x2="122" y1="47" y2="47"/></g><!--MD5=[3a7197b3f0da127a0a141acdd0964869]
class BinaryMessenger--><g id="elem_BinaryMessenger"><rect fill="#F1F1F1" height="48" id="BinaryMessenger" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="152" x="158" y="7"/><ellipse cx="173" cy="23" fill="#B4A7E5" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M168.9219,18.7656 L168.9219,16.6094 L176.3125,16.6094 L176.3125,18.7656 L173.8438,18.7656 L173.8438,26.8438 L176.3125,26.8438 L176.3125,29 L168.9219,29 L168.9219,26.8438 L171.3906,26.8438 L171.3906,18.7656 L168.9219,18.7656 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="120" x="187" y="27.8467">BinaryMessenger</text><line style="stroke:#181818;stroke-width:0.5;" x1="159" x2="309" y1="39" y2="39"/><line style="stroke:#181818;stroke-width:0.5;" x1="159" x2="309" y1="47" y2="47"/></g><!--MD5=[a9ae3d8e8cc3c991390b8b1661d0bc32]
class TextureRegistry--><g id="elem_TextureRegistry"><rect fill="#F1F1F1" height="48" id="TextureRegistry" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="141" x="345.5" y="7"/><ellipse cx="360.5" cy="23" fill="#B4A7E5" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M356.4219,18.7656 L356.4219,16.6094 L363.8125,16.6094 L363.8125,18.7656 L361.3438,18.7656 L361.3438,26.8438 L363.8125,26.8438 L363.8125,29 L356.4219,29 L356.4219,26.8438 L358.8906,26.8438 L358.8906,18.7656 L356.4219,18.7656 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="109" x="374.5" y="27.8467">TextureRegistry</text><line style="stroke:#181818;stroke-width:0.5;" x1="346.5" x2="485.5" y1="39" y2="39"/><line style="stroke:#181818;stroke-width:0.5;" x1="346.5" x2="485.5" y1="47" y2="47"/></g><!--MD5=[50158a96695c75ded856f65154440c37]
reverse link SurfaceView to FlutterView--><g id="link_SurfaceView_FlutterView"><path d="M118.91,65.81 C144.42,81.81 174.22,100.51 197.11,114.86 " fill="none" id="SurfaceView-backto-FlutterView" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="114.89,71.56,101.67,55,122.33,59.7,114.89,71.56" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[c73a9ee65b4aa0ee47b390d463b97e16]
reverse link BinaryMessenger to FlutterView--><g id="link_BinaryMessenger_FlutterView"><path d="M234,75.02 C234,88.58 234,103.04 234,114.68 " fill="none" id="BinaryMessenger-backto-FlutterView" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="227,75,234,55,241,75,227,75" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[858cef43d89f070b3a95c1705d9fa863]
reverse link TextureRegistry to FlutterView--><g id="link_TextureRegistry_FlutterView"><path d="M359.13,65.12 C331.4,81.27 298.73,100.3 273.73,114.86 " fill="none" id="TextureRegistry-backto-FlutterView" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="355.7,59.02,376.51,55,362.75,71.11,355.7,59.02" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[9d438f640e58a11007dce4603888a18b]
@startuml
class FlutterView extends SurfaceView implements BinaryMessenger, TextureRegistry
@enduml

PlantUML version 1.2022.4(Sat Apr 09 13:29:17 UTC 2022)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: null
--></g></svg>

<p><code>BinaryMessenger</code> 是Flutter与Native同学的通道，后面会详细讲到<br><code>TextureRegistry</code> 用于管理SurfaceTexture</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlutterView</span> <span class="keyword">extends</span> <span class="title class_">SurfaceView</span> <span class="keyword">implements</span> <span class="title class_">BinaryMessenger</span>, TextureRegistry &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FlutterView</span><span class="params">(Context context, AttributeSet attrs, FlutterNativeView nativeView)</span> &#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 创建FlutterNativeView</span></span><br><span class="line">        <span class="keyword">if</span> (nativeView == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.mNativeView = <span class="keyword">new</span> <span class="title class_">FlutterNativeView</span>(activity.getApplicationContext());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.mNativeView = nativeView;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置dartExecutor</span></span><br><span class="line">        <span class="built_in">this</span>.dartExecutor = <span class="built_in">this</span>.mNativeView.getDartExecutor();</span><br><span class="line">        <span class="comment">// 设置flutterRenderer</span></span><br><span class="line">        <span class="built_in">this</span>.flutterRenderer = <span class="keyword">new</span> <span class="title class_">FlutterRenderer</span>(<span class="built_in">this</span>.mNativeView.getFlutterJNI());</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 设置渲染和视图大小信息</span></span><br><span class="line">        <span class="built_in">this</span>.mIsSoftwareRenderingEnabled = FlutterJNI.nativeGetIsSoftwareRenderingEnabled();</span><br><span class="line">        <span class="built_in">this</span>.mMetrics = <span class="keyword">new</span> <span class="title class_">FlutterView</span>.ViewportMetrics();</span><br><span class="line">        <span class="built_in">this</span>.mMetrics.devicePixelRatio = context.getResources().getDisplayMetrics().density;</span><br><span class="line">        <span class="built_in">this</span>.setFocusable(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.setFocusableInTouchMode(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// attachViewAndActivity</span></span><br><span class="line">        <span class="built_in">this</span>.mNativeView.attachViewAndActivity(<span class="built_in">this</span>, activity);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置SurfaceCallback</span></span><br><span class="line">        <span class="built_in">this</span>.mSurfaceCallback = <span class="keyword">new</span> <span class="title class_">Callback</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">surfaceCreated</span><span class="params">(SurfaceHolder holder)</span> &#123;</span><br><span class="line">                FlutterView.<span class="built_in">this</span>.assertAttached();</span><br><span class="line">                FlutterView.<span class="built_in">this</span>.mNativeView.getFlutterJNI().onSurfaceCreated(holder.getSurface());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">surfaceChanged</span><span class="params">(SurfaceHolder holder, <span class="type">int</span> format, <span class="type">int</span> width, <span class="type">int</span> height)</span> &#123;</span><br><span class="line">                FlutterView.<span class="built_in">this</span>.assertAttached();</span><br><span class="line">                FlutterView.<span class="built_in">this</span>.mNativeView.getFlutterJNI().onSurfaceChanged(width, height);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">surfaceDestroyed</span><span class="params">(SurfaceHolder holder)</span> &#123;</span><br><span class="line">                FlutterView.<span class="built_in">this</span>.assertAttached();</span><br><span class="line">                FlutterView.<span class="built_in">this</span>.mNativeView.getFlutterJNI().onSurfaceDestroyed();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">this</span>.getHolder().addCallback(<span class="built_in">this</span>.mSurfaceCallback);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置内置Channel</span></span><br><span class="line">        <span class="built_in">this</span>.mActivityLifecycleListeners = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="built_in">this</span>.mFirstFrameListeners = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="built_in">this</span>.navigationChannel = <span class="keyword">new</span> <span class="title class_">NavigationChannel</span>(<span class="built_in">this</span>.dartExecutor);</span><br><span class="line">        <span class="built_in">this</span>.keyEventChannel = <span class="keyword">new</span> <span class="title class_">KeyEventChannel</span>(<span class="built_in">this</span>.dartExecutor);</span><br><span class="line">        <span class="built_in">this</span>.lifecycleChannel = <span class="keyword">new</span> <span class="title class_">LifecycleChannel</span>(<span class="built_in">this</span>.dartExecutor);</span><br><span class="line">        <span class="built_in">this</span>.localizationChannel = <span class="keyword">new</span> <span class="title class_">LocalizationChannel</span>(<span class="built_in">this</span>.dartExecutor);</span><br><span class="line">        <span class="built_in">this</span>.platformChannel = <span class="keyword">new</span> <span class="title class_">PlatformChannel</span>(<span class="built_in">this</span>.dartExecutor);</span><br><span class="line">        <span class="built_in">this</span>.systemChannel = <span class="keyword">new</span> <span class="title class_">SystemChannel</span>(<span class="built_in">this</span>.dartExecutor);</span><br><span class="line">        <span class="built_in">this</span>.settingsChannel = <span class="keyword">new</span> <span class="title class_">SettingsChannel</span>(<span class="built_in">this</span>.dartExecutor);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">PlatformPlugin</span> <span class="variable">platformPlugin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PlatformPlugin</span>(activity, <span class="built_in">this</span>.platformChannel);</span><br><span class="line">        <span class="built_in">this</span>.addActivityLifecycleListener(<span class="keyword">new</span> <span class="title class_">ActivityLifecycleListener</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onPostResume</span><span class="params">()</span> &#123;</span><br><span class="line">                platformPlugin.updateSystemUiOverlays();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">this</span>.mImm = (InputMethodManager)<span class="built_in">this</span>.getContext().getSystemService(<span class="string">&quot;input_method&quot;</span>);</span><br><span class="line">        <span class="type">PlatformViewsController</span> <span class="variable">platformViewsController</span> <span class="operator">=</span> <span class="built_in">this</span>.mNativeView.getPluginRegistry().getPlatformViewsController();</span><br><span class="line">        <span class="built_in">this</span>.mTextInputPlugin = <span class="keyword">new</span> <span class="title class_">TextInputPlugin</span>(<span class="built_in">this</span>, <span class="built_in">this</span>.dartExecutor, platformViewsController);</span><br><span class="line">        <span class="built_in">this</span>.androidKeyProcessor = <span class="keyword">new</span> <span class="title class_">AndroidKeyProcessor</span>(<span class="built_in">this</span>.keyEventChannel, <span class="built_in">this</span>.mTextInputPlugin);</span><br><span class="line">        <span class="built_in">this</span>.androidTouchProcessor = <span class="keyword">new</span> <span class="title class_">AndroidTouchProcessor</span>(<span class="built_in">this</span>.flutterRenderer);</span><br><span class="line">        <span class="built_in">this</span>.mNativeView.getPluginRegistry().getPlatformViewsController().attachTextInputPlugin(<span class="built_in">this</span>.mTextInputPlugin);</span><br><span class="line">        <span class="built_in">this</span>.sendLocalesToDart(<span class="built_in">this</span>.getResources().getConfiguration());</span><br><span class="line">        <span class="built_in">this</span>.sendUserPlatformSettingsToDart();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>FlutterActivityDelegate</code> 中我们知道，加载dart执行的是<code>FlutterView</code>的<code>runFromBundle</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runFromBundle</span><span class="params">(FlutterRunArguments args)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.assertAttached();</span><br><span class="line">    <span class="built_in">this</span>.preRun();</span><br><span class="line">    <span class="built_in">this</span>.mNativeView.runFromBundle(args);</span><br><span class="line">    <span class="built_in">this</span>.postRun();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实际上调用的是<code>mNativeView.runFromBundle(args)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlutterNativeView</span> <span class="keyword">implements</span> <span class="title class_">BinaryMessenger</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runFromBundle</span><span class="params">(FlutterRunArguments args)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (args.entrypoint == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>(<span class="string">&quot;An entrypoint must be specified&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.assertAttached();</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.applicationIsRunning) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>(<span class="string">&quot;This Flutter engine instance is already running an application&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.mFlutterJNI.runBundleAndSnapshotFromLibrary(args.bundlePath, args.entrypoint, args.libraryPath, <span class="built_in">this</span>.mContext.getResources().getAssets());</span><br><span class="line">                <span class="built_in">this</span>.applicationIsRunning = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，最后调用的是mFlutterJNI。</p>
<h5 id="FlutterNativeView与FlutterJNI"><a href="#FlutterNativeView与FlutterJNI" class="headerlink" title="FlutterNativeView与FlutterJNI"></a>FlutterNativeView与FlutterJNI</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlutterNativeView</span> <span class="keyword">implements</span> <span class="title class_">BinaryMessenger</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">FlutterNativeView</span><span class="params">(<span class="meta">@NonNull</span> Context context, <span class="type">boolean</span> isBackgroundView)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mContext = context;</span><br><span class="line">        <span class="comment">// 创建FlutterPluginRegistry，插件注册器</span></span><br><span class="line">        <span class="built_in">this</span>.mPluginRegistry = <span class="keyword">new</span> <span class="title class_">FlutterPluginRegistry</span>(<span class="built_in">this</span>, context);</span><br><span class="line">        <span class="comment">// 创建FlutterJNI</span></span><br><span class="line">        <span class="built_in">this</span>.mFlutterJNI = <span class="keyword">new</span> <span class="title class_">FlutterJNI</span>();</span><br><span class="line">        <span class="comment">// 将</span></span><br><span class="line">        <span class="built_in">this</span>.mFlutterJNI.setRenderSurface(<span class="keyword">new</span> <span class="title class_">FlutterNativeView</span>.RenderSurfaceImpl());</span><br><span class="line">        <span class="comment">// 创建DartExecutor</span></span><br><span class="line">        <span class="built_in">this</span>.dartExecutor = <span class="keyword">new</span> <span class="title class_">DartExecutor</span>(<span class="built_in">this</span>.mFlutterJNI, context.getAssets());</span><br><span class="line">        <span class="comment">// addEngineLifecycleListener</span></span><br><span class="line">        <span class="built_in">this</span>.mFlutterJNI.addEngineLifecycleListener(<span class="keyword">new</span> <span class="title class_">FlutterNativeView</span>.EngineLifecycleListenerImpl());</span><br><span class="line">        <span class="built_in">this</span>.attach(<span class="built_in">this</span>, isBackgroundView);</span><br><span class="line">        <span class="built_in">this</span>.assertAttached();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 加载Flutter Bundle</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runFromBundle</span><span class="params">(FlutterRunArguments args)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (args.entrypoint == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>(<span class="string">&quot;An entrypoint must be specified&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.assertAttached();</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.applicationIsRunning) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>(<span class="string">&quot;This Flutter engine instance is already running an application&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.mFlutterJNI.runBundleAndSnapshotFromLibrary(args.bundlePath, args.entrypoint, args.libraryPath, <span class="built_in">this</span>.mContext.getResources().getAssets());</span><br><span class="line">                <span class="built_in">this</span>.applicationIsRunning = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="283px" preserveAspectRatio="none" style="width:882px;height:283px;background:#FFFFFF;" version="1.1" viewBox="0 0 882 283" width="882px" zoomAndPan="magnify"><defs/><g><ellipse cx="50" cy="41.5" fill="#222222" rx="10" ry="10" style="stroke:none;stroke-width:1.0;"/><rect fill="#F1F1F1" height="33.9688" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:0.5;" width="104" x="7" y="117"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="84" x="17" y="138.1387">FlutterActivity</text><rect fill="#F1F1F1" height="33.9688" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:0.5;" width="161" x="139.5" y="117"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="141" x="149.5" y="138.1387">FlutterActivityDelegate</text><g id="elem_GMN120"><path d="M80.5,6 L80.5,76.5313 A0,0 0 0 0 80.5,76.5313 L216,76.5313 L220,116.66 L224,76.5313 L359.5,76.5313 A0,0 0 0 0 359.5,76.5313 L359.5,16 L349.5,6 L80.5,6 A0,0 0 0 0 80.5,6 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M349.5,6 L349.5,16 L359.5,16 L349.5,6 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="195" x="90.5" y="23.0669">FlutterActivity 是主要承载页面，</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="249" x="86.5" y="38.1997">具体的实现由FlutterActivityDelegate代理</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="258" x="86.5" y="53.3325">FlutterActivityDelegate 创建FlutterView，</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="127" x="86.5" y="68.4653">并加载Flutter bundle</text></g><rect fill="#F1F1F1" height="33.9688" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:0.5;" width="89" x="336.5" y="117"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="69" x="346.5" y="138.1387">FlutterView</text><g id="elem_GMN125"><path d="M165.5,191 L165.5,276.6641 A0,0 0 0 0 165.5,276.6641 L510.5,276.6641 A0,0 0 0 0 510.5,276.6641 L510.5,201 L500.5,191 L360.43,191 L373.9,151.18 L352.43,191 L165.5,191 A0,0 0 0 0 165.5,191 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M500.5,191 L500.5,201 L510.5,201 L500.5,191 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="204" x="171.5" y="208.0669">FlutterView 继承于SurfaceView，</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="148" x="171.5" y="223.1997">为实际渲染的native view</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="239" x="171.5" y="238.3325">FlutterView初始化时会设置UI相关的信息</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="324" x="171.5" y="253.4653">以及内置的Channel，FlutterView与FlutterNativeView</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="52" x="171.5" y="268.5981">相互绑定</text></g><rect fill="#F1F1F1" height="33.9688" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:0.5;" width="128" x="454" y="117"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="108" x="464" y="138.1387">FlutterNativeView</text><g id="elem_GMN130"><path d="M380,14 L380,69.3984 A0,0 0 0 0 380,69.3984 L520.35,69.3984 L519.62,116.74 L528.35,69.3984 L674,69.3984 A0,0 0 0 0 674,69.3984 L674,24 L664,14 L380,14 A0,0 0 0 0 380,14 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M664,14 L664,24 L674,24 L664,14 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="273" x="386" y="31.0669">FlutterNativeView继承于BinaryMessenger，</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="254" x="386" y="46.1997">并持有FlutterJNI，而FlutterJNI是Android与</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="149" x="386" y="61.3325">FlutterEngine交互的桥梁</text></g><rect fill="#F1F1F1" height="33.9688" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:0.5;" width="76" x="645" y="117"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="56" x="655" y="138.1387">FlutterJNI</text><g id="elem_GMN136"><path d="M530.5,221.5 L530.5,246.6328 A0,0 0 0 0 530.5,246.6328 L835.5,246.6328 A0,0 0 0 0 835.5,246.6328 L835.5,231.5 L825.5,221.5 L687,221.5 L683,151.18 L679,221.5 L530.5,221.5 A0,0 0 0 0 530.5,221.5 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M825.5,221.5 L825.5,231.5 L835.5,231.5 L825.5,221.5 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="284" x="536.5" y="238.5669">大部分是jni的native方法，与Flutter Engine交互</text></g><ellipse cx="866" cy="234" fill="none" rx="10" ry="10" style="stroke:#222222;stroke-width:1.0;"/><ellipse cx="866.5" cy="234.5" fill="#222222" rx="6" ry="6" style="stroke:none;stroke-width:1.0;"/><!--MD5=[7f4335e1b6316eb72c8506d40a34e0c6]
link start to FlutterActivity--><g id="link_start_FlutterActivity"><path d="M50.9,51.51 C52.28,65.4 54.97,92.45 56.87,111.57 " fill="none" id="start-to-FlutterActivity" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="57.38,116.74,60.4859,107.3937,56.8938,111.7637,52.5238,108.1716,57.38,116.74" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[bdfed072028aaf26f53ff1a8514797ca]
link FlutterActivity to FlutterActivityDelegate--><g id="link_FlutterActivity_FlutterActivityDelegate"><path d="M111.2,134 C118.8,134 126.39,134 133.99,134 " fill="none" id="FlutterActivity-to-FlutterActivityDelegate" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="139.25,134,130.25,130,134.25,134,130.25,138,139.25,134" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[b4654c53f6a254be0eefc10f6e335199]
link FlutterActivityDelegate to FlutterView--><g id="link_FlutterActivityDelegate_FlutterView"><path d="M300.5,134 C310.77,134 321.04,134 331.31,134 " fill="none" id="FlutterActivityDelegate-to-FlutterView" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="336.35,134,327.35,130,331.35,134,327.35,138,336.35,134" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[3ef452a3bc4f7952a4b243a7afe0b223]
link FlutterView to FlutterNativeView--><g id="link_FlutterView_FlutterNativeView"><path d="M425.69,145.21 C433.3,146.19 440.92,146.71 448.54,146.75 " fill="none" id="FlutterView-to-FlutterNativeView" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="453.81,146.7,444.776,142.7773,448.8102,146.7429,444.8446,150.777,453.81,146.7" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[0f6a12f270cfc1587537e14268d245b0]
link FlutterNativeView to FlutterView--><g id="link_FlutterNativeView_FlutterView"><path d="M453.81,121.3 C446.19,121.12 438.58,121.42 430.96,122.18 " fill="none" id="FlutterNativeView-to-FlutterView" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="425.69,122.79,435.0879,125.7361,430.6573,122.219,434.1744,117.7884,425.69,122.79" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[aea36ecdc750e134d8d4d13f3f0ef1f3]
link FlutterNativeView to FlutterJNI--><g id="link_FlutterNativeView_FlutterJNI"><path d="M582.13,134 C601.22,134 620.31,134 639.4,134 " fill="none" id="FlutterNativeView-to-FlutterJNI" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="644.78,134,635.78,130,639.78,134,635.78,138,644.78,134" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[0610f192158a662c333784acf518a884]
link FlutterJNI to end--><g id="link_FlutterJNI_end"><path d="M721.21,139.55 C757.25,145.66 810.84,159.62 846,191 C854.26,198.37 859.41,209.89 862.41,219.01 " fill="none" id="FlutterJNI-to-end" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="863.94,224.04,865.1451,214.2651,862.4836,219.2568,857.492,216.5953,863.94,224.04" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[35a1c22b6583565d98070e025d742655]
@startuml
(*)  - -> FlutterActivity

"FlutterActivity" -> "FlutterActivityDelegate"
note top
 FlutterActivity 是主要承载页面，
具体的实现由FlutterActivityDelegate代理
FlutterActivityDelegate 创建FlutterView，
并加载Flutter bundle
end note

FlutterActivityDelegate -> FlutterView
note bottom
FlutterView 继承于SurfaceView，
为实际渲染的native view
FlutterView初始化时会设置UI相关的信息
以及内置的Channel，FlutterView与FlutterNativeView
相互绑定
end note

FlutterView -> FlutterNativeView
note top
FlutterNativeView继承于BinaryMessenger，
并持有FlutterJNI，而FlutterJNI是Android与
FlutterEngine交互的桥梁
end note
FlutterNativeView -> FlutterView
FlutterNativeView -> FlutterJNI
note bottom
大部分是jni的native方法，与Flutter Engine交互
end note

- ->(*)
@enduml

PlantUML version 1.2022.4(Sat Apr 09 13:29:17 UTC 2022)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: null
--></g></svg>

<h4 id="Flutter-Engine"><a href="#Flutter-Engine" class="headerlink" title="Flutter Engine"></a>Flutter Engine</h4><h5 id="Flutter-初始化"><a href="#Flutter-初始化" class="headerlink" title="Flutter 初始化"></a>Flutter 初始化</h5><p>在使用Flutter前需要初始化Flutter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FlutterMain.startInitialization(applicationContext);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlutterMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">startInitialization</span><span class="params">(<span class="meta">@NonNull</span> Context applicationContext)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isRunningInRobolectricTest) &#123;</span><br><span class="line">            startInitialization(applicationContext, <span class="keyword">new</span> <span class="title class_">FlutterMain</span>.Settings());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">startInitialization</span><span class="params">(<span class="meta">@NonNull</span> Context applicationContext, <span class="meta">@NonNull</span> FlutterMain.Settings settings)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isRunningInRobolectricTest) &#123;</span><br><span class="line">            <span class="comment">// 初始化必须在主线程</span></span><br><span class="line">            <span class="keyword">if</span> (Looper.myLooper() != Looper.getMainLooper()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;startInitialization must be called on the main thread&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sSettings == <span class="literal">null</span>) &#123;</span><br><span class="line">                sSettings = settings;</span><br><span class="line">                <span class="type">long</span> <span class="variable">initStartTimestampMillis</span> <span class="operator">=</span> SystemClock.uptimeMillis();</span><br><span class="line">                <span class="comment">// 初始化配置，主要是读取metadata中自定义的libapp.so、flutter_assets、vm_snapshot_data和isolate_snapshot_data对于的路径</span></span><br><span class="line">                <span class="comment">// 一般可以不是自行设置</span></span><br><span class="line">                initConfig(applicationContext);</span><br><span class="line">                <span class="comment">// 初始化Flutter资源，从flutter_assets读取并加载资源</span></span><br><span class="line">                <span class="comment">// 包含vm_snapshot_data，isolate_snapshot_data、kernel_blob.bin</span></span><br><span class="line">                initResources(applicationContext);</span><br><span class="line">                <span class="comment">// 记载flutter.so</span></span><br><span class="line">                System.loadLibrary(<span class="string">&quot;flutter&quot;</span>);</span><br><span class="line">                <span class="comment">// 初始化Vsync工具</span></span><br><span class="line">                VsyncWaiter.getInstance((WindowManager)applicationContext.getSystemService(<span class="string">&quot;window&quot;</span>)).init();</span><br><span class="line">                <span class="comment">// 记录初始化耗时</span></span><br><span class="line">                <span class="type">long</span> <span class="variable">initTimeMillis</span> <span class="operator">=</span> SystemClock.uptimeMillis() - initStartTimestampMillis;</span><br><span class="line">                FlutterJNI.nativeRecordStartTimestamp(initTimeMillis);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>android assets目录下flutter_assets</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">assets</span><br><span class="line">└── flutter_assets</span><br><span class="line">    ├── AssetManifest.json</span><br><span class="line">    ├── FontManifest.json</span><br><span class="line">    ├── LICENSE</span><br><span class="line">    ├── fonts</span><br><span class="line">    │   └── MaterialIcons-Regular.ttf</span><br><span class="line">    ├── isolate_snapshot_data</span><br><span class="line">    ├── kernel_blob.bin</span><br><span class="line">    ├── packages</span><br><span class="line">    │   └── cupertino_icons</span><br><span class="line">    │       └── assets</span><br><span class="line">    │           └── CupertinoIcons.ttf</span><br><span class="line">    └── vm_snapshot_data</span><br></pre></td></tr></table></figure>

<p>在<code>FlutterActivityDelegate</code>中，<code>onCreate</code>时，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">FlutterActivityDelegate</span>&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">         FlutterMain.ensureInitializationComplete(<span class="built_in">this</span>.activity.getApplicationContext(), args);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlutterMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ensureInitializationComplete</span><span class="params">(<span class="meta">@NonNull</span> Context applicationContext, <span class="meta">@Nullable</span> String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isRunningInRobolectricTest) &#123;</span><br><span class="line">            <span class="comment">// 确认在主线程，且sSettings不为空，sSettings在startInitialization中设置</span></span><br><span class="line">            <span class="keyword">if</span> (Looper.myLooper() != Looper.getMainLooper()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;ensureInitializationComplete must be called on the main thread&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sSettings == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;ensureInitializationComplete must be called after startInitialization&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!sInitialized) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 等待资源加载完成，在startInitialization中设置</span></span><br><span class="line">                    <span class="keyword">if</span> (sResourceExtractor != <span class="literal">null</span>) &#123;</span><br><span class="line">                        sResourceExtractor.waitForCompletion();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 设置flutter参数</span></span><br><span class="line">                    <span class="comment">// icu-symbol-prefix, icu-native-lib-path,snapshot-asset-path,</span></span><br><span class="line">                    <span class="comment">// vm-snapshot-data,isolate-snapshot-data,cache-dir-path,log-tag</span></span><br><span class="line">                    List&lt;String&gt; shellArgs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">                    shellArgs.add(<span class="string">&quot;--icu-symbol-prefix=_binary_icudtl_dat&quot;</span>);</span><br><span class="line">                    <span class="type">ApplicationInfo</span> <span class="variable">applicationInfo</span> <span class="operator">=</span> getApplicationInfo(applicationContext);</span><br><span class="line">                    shellArgs.add(<span class="string">&quot;--icu-native-lib-path=&quot;</span> + applicationInfo.nativeLibraryDir + File.separator + <span class="string">&quot;libflutter.so&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (args != <span class="literal">null</span>) &#123;</span><br><span class="line">                        Collections.addAll(shellArgs, args);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="type">String</span> <span class="variable">kernelPath</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">appStoragePath</span> <span class="operator">=</span> PathUtils.getDataDirectory(applicationContext) + File.separator + sFlutterAssetsDir;</span><br><span class="line">                    kernelPath = appStoragePath + File.separator + <span class="string">&quot;kernel_blob.bin&quot;</span>;</span><br><span class="line">                    shellArgs.add(<span class="string">&quot;--snapshot-asset-path=&quot;</span> + appStoragePath);</span><br><span class="line">                    shellArgs.add(<span class="string">&quot;--vm-snapshot-data=&quot;</span> + sVmSnapshotData);</span><br><span class="line">                    shellArgs.add(<span class="string">&quot;--isolate-snapshot-data=&quot;</span> + sIsolateSnapshotData);</span><br><span class="line">                    shellArgs.add(<span class="string">&quot;--cache-dir-path=&quot;</span> + PathUtils.getCacheDirectory(applicationContext));</span><br><span class="line">                    <span class="keyword">if</span> (sSettings.getLogTag() != <span class="literal">null</span>) &#123;</span><br><span class="line">                        shellArgs.add(<span class="string">&quot;--log-tag=&quot;</span> + sSettings.getLogTag());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    appStoragePath = PathUtils.getFilesDir(applicationContext);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">engineCachesPath</span> <span class="operator">=</span> PathUtils.getCacheDirectory(applicationContext);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// FlutterJNI 初始化Flutter Engine</span></span><br><span class="line">                    FlutterJNI.nativeInit(applicationContext, (String[])shellArgs.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]), kernelPath, appStoragePath, engineCachesPath);</span><br><span class="line">                    sInitialized = <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception var7) &#123;</span><br><span class="line">                    Log.e(<span class="string">&quot;FlutterMain&quot;</span>, <span class="string">&quot;Flutter initialization failed.&quot;</span>, var7);</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(var7);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，所有与Flutter Engine相关的操作都是用过FlutterJNI来交互的</p>
<h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>Flutter Engine初始化主要是加载<code>flutter.so</code>，设置<code>flutter_assets</code>，并通过FlutterJNI设置到Flutter Engine中。</p>
<p>关于FlutterJNI相关的内容，再后面关于Flutter Engine定制中会详细介绍到。</p>
]]></content>
  </entry>
  <entry>
    <title>Flutter 基本使用</title>
    <url>/2020/02/06/Flutter-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="一、-Flutter-混合开发"><a href="#一、-Flutter-混合开发" class="headerlink" title="一、 Flutter 混合开发"></a>一、 Flutter 混合开发</h3><p>Flutter 环境配置</p>
<h4 id="1-Flutter-整体架构"><a href="#1-Flutter-整体架构" class="headerlink" title="1. Flutter 整体架构"></a>1. Flutter 整体架构</h4><p><img src="https://raw.githubusercontent.com/zauther/figurebed/blog/images/flutter.svg" alt="flutter"></p>
<span id="more"></span>


<h4 id="2-Flutter-开发环境配置"><a href="#2-Flutter-开发环境配置" class="headerlink" title="2. Flutter 开发环境配置"></a>2. Flutter 开发环境配置</h4><p>Flutter环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> ~/development</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">unzip ~/Downloads/flutter_macos_v1.9.1+hotfix.4-stable.zip</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:`pwd`/flutter/bin&quot;</span></span></span><br></pre></td></tr></table></figure>

<p>Android SDK</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">export</span> ANDROID_HOME=/Users/*/Library/Android/sdk</span></span><br></pre></td></tr></table></figure>

<p>Xcode 安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer</span></span><br></pre></td></tr></table></figure>

<h4 id="3-Flutter-常用命令"><a href="#3-Flutter-常用命令" class="headerlink" title="3. Flutter 常用命令"></a>3. Flutter 常用命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># flutter 环境诊断</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">flutter doctor</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># flutter 版本切换</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">flutter version v1.5.4-hotfix.2</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># flutter 创建工程模板</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">flutter create --org com.exemple --template=[plugin,app,package，module] projectname</span></span><br></pre></td></tr></table></figure>

<h4 id="4-Flutter接入及原理"><a href="#4-Flutter接入及原理" class="headerlink" title="4. Flutter接入及原理"></a>4. Flutter接入及原理</h4><p>Flutter开发方式，目前有4种，分别是：纯的Dart库开发、Flutter应用开发、Flutter插件开发以及Flutter Module接入。下面，分别对这4种开发形式做一个介绍。</p>
<h5 id="4-1-纯的Dart库开发"><a href="#4-1-纯的Dart库开发" class="headerlink" title="4.1 纯的Dart库开发"></a>4.1 纯的Dart库开发</h5><p>纯的Dart库开发，无客户端相关Native代码，通过命令行生成工程模板：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">flutter create --org com.exemple --template=package somepackage</span></span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/zauther/figurebed/blog/images/20200209195127.png" alt="image-20191024191219392" style="zoom:50%;" />





<h5 id="4-2-Flutter应用开发"><a href="#4-2-Flutter应用开发" class="headerlink" title="4.2 Flutter应用开发"></a>4.2 Flutter应用开发</h5><p>Flutter应用开发，可直接运行，适合开发新的APP。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">flutter create --org com.exemple --template=app someapp</span></span><br></pre></td></tr></table></figure>

<p>从目录结构可以看出，此工程中有3个目录：android、ios、lib，android目录下是与Android平台相关的代码及配置，ios目录下是与iOS平台相关的代码及配置，lib目录下为flutter平台相关的代码。</p>
<p>pubspec.yaml为flutter工程相关的配置，包含依赖的插件、资源等。.flutter-plugins 文件为flutter插件路径映射文件。</p>
<p>我们以Android开发者的角度，简单看一下，Flutter是如何被引入到Android项目中的。</p>
<p>在Android工程中 <code>settings.gralde</code> 文件中，我们可以看到，主要做了以下几件事情：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">include <span class="string">&#x27;:app&#x27;</span> </span><br><span class="line"><span class="keyword">def</span> flutterProjectRoot = rootProject.projectDir.parentFile.toPath()</span><br><span class="line"><span class="keyword">def</span> plugins = <span class="keyword">new</span> Properties()</span><br><span class="line"><span class="keyword">def</span> pluginsFile = <span class="keyword">new</span> File(flutterProjectRoot.toFile(), <span class="string">&#x27;.flutter-plugins&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> (pluginsFile.exists()) &#123;</span><br><span class="line">    pluginsFile.withReader(<span class="string">&#x27;UTF-8&#x27;</span>) &#123; reader -&gt; plugins.load(reader) &#125;</span><br><span class="line">&#125;</span><br><span class="line">plugins.each &#123; name, path -&gt;</span><br><span class="line">    <span class="keyword">def</span> pluginDirectory = flutterProjectRoot.resolve(path).resolve(<span class="string">&#x27;android&#x27;</span>).toFile()</span><br><span class="line">    include <span class="string">&quot;:$name&quot;</span></span><br><span class="line">    project(<span class="string">&quot;:$name&quot;</span>).projectDir = pluginDirectory</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>寻找<code>.flutter-plugins</code> 文件并读取配置</li>
<li>将<code>.flutter-plugins</code>配置中的库引入工程中</li>
</ol>
<p><code>.flutter-plugins</code> 中的内容：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">flutter_boost=/Users/zauther/.pub-cache/hosted/pub.flutter-io.cn/flutter_boost-0.1.54/</span><br><span class="line">xservice_kit=/Users/zauther/.pub-cache/hosted/pub.flutter-io.cn/xservice_kit-0.0.29/</span><br></pre></td></tr></table></figure>

<p>在app对应的 <code>build.gradle</code> 文件中，前面的配置代码：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> localProperties = <span class="keyword">new</span> Properties()</span><br><span class="line"><span class="keyword">def</span> localPropertiesFile = rootProject.file(<span class="string">&#x27;local.properties&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> (localPropertiesFile.exists()) &#123;</span><br><span class="line">    localPropertiesFile.withReader(<span class="string">&#x27;UTF-8&#x27;</span>) &#123; reader -&gt;</span><br><span class="line">        localProperties.load(reader)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> flutterRoot = localProperties.getProperty(<span class="string">&#x27;flutter.sdk&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> (flutterRoot == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> GradleException(<span class="string">&quot;Flutter SDK not found. Define location with flutter.sdk in the local.properties file.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> flutterVersionCode = localProperties.getProperty(<span class="string">&#x27;flutter.versionCode&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> (flutterVersionCode == <span class="literal">null</span>) &#123;</span><br><span class="line">    flutterVersionCode = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> flutterVersionName = localProperties.getProperty(<span class="string">&#x27;flutter.versionName&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> (flutterVersionName == <span class="literal">null</span>) &#123;</span><br><span class="line">    flutterVersionName = <span class="string">&#x27;1.0&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.android.application&#x27;</span></span><br><span class="line">apply <span class="attr">from:</span> <span class="string">&quot;$flutterRoot/packages/flutter_tools/gradle/flutter.gradle&quot;</span></span><br><span class="line">......</span><br><span class="line">flutter &#123;</span><br><span class="line">    source <span class="string">&#x27;../..&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>可以看出主要做了一下几件事：</p>
<ol>
<li>读取 <code>local.properties</code> 配置</li>
<li>从配置中读取flutter.sdk、flutter.versionCode、flutter.versionName</li>
<li>通过flutter.sdk路径找到 <code>flutter.gradle</code> ，此文件即为flutter编译流程文件，后面单独介绍</li>
<li>设置flutter对应的lib所在目录，lib中包含flutter代码入口 <code>main.dart</code></li>
</ol>
<h5 id="4-3-Flutter-插件开发"><a href="#4-3-Flutter-插件开发" class="headerlink" title="4.3 Flutter 插件开发"></a>4.3 Flutter 插件开发</h5><p>Flutter插件类似于Java开发过程中的库，可在目前项目上直接引入已有功能。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">flutter create --org com.exemple --template=plugin someplugin</span></span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/zauther/figurebed/blog/images/20200209195909.png" alt="image-20191019005837181" style="zoom:50%;" />

<p>目录结构同Flutter应用，其中example模块为一个独立的flutter 工程，可用于测试插件。通过这个例子，以Android开发者视角，来看一下插件是插件如何编写以及被引入的。</p>
<p>Flutter与Native的通讯分为2种：一是Flutter主动调用Native，并获取Native的返回结果；二是Native主动调用Flutter，并获取Flutter返回结果。</p>
<h6 id="Flutter调用Native"><a href="#Flutter调用Native" class="headerlink" title="Flutter调用Native"></a>Flutter调用Native</h6><p>在flutter插件的android目录下，新建类Testflutterplugin2Plugin，实现MethodCallHandler接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Testflutterplugin2Plugin */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Testflutterplugin2Plugin</span> <span class="keyword">implements</span> <span class="title class_">MethodCallHandler</span> &#123;</span><br><span class="line">  <span class="comment">/** Plugin registration. */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">registerWith</span><span class="params">(Registrar registrar)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">MethodChannel</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MethodChannel</span>(registrar.messenger(), <span class="string">&quot;testflutterplugin2&quot;</span>);</span><br><span class="line">    channel.setMethodCallHandler(<span class="keyword">new</span> <span class="title class_">Testflutterplugin2Plugin</span>());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMethodCall</span><span class="params">(MethodCall call, Result result)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (call.method.equals(<span class="string">&quot;getPlatformVersion&quot;</span>)) &#123;</span><br><span class="line">      result.success(<span class="string">&quot;Android &quot;</span> + android.os.Build.VERSION.RELEASE);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(call.method.equals(<span class="string">&quot;FUNC&quot;</span>))&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        result.success(<span class="string">&quot;do something&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        <span class="comment">// catch error</span></span><br><span class="line">        result.error(<span class="string">&quot;ERROR&quot;</span>,<span class="string">&quot;do something error&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      result.notImplemented();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法registerWith中，通过Registrar创建MethodChannel，并将Testflutterplugin2Plugin加入到MethodChannel中。</p>
<p>在onMethodCall方法中，参数MethodCall包含有Flutter调用的方法名以及传入参数，Result对象用于返回Native的处理结果给Flutter。</p>
<p>在Flutter代码中： </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Testflutterplugin2</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> MethodChannel _channel =</span><br><span class="line">      <span class="keyword">const</span> MethodChannel(<span class="string">&#x27;testflutterplugin2&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">static</span> Future&lt;<span class="built_in">String</span>&gt; <span class="keyword">get</span> platformVersion <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">String</span> version = <span class="keyword">await</span> _channel.invokeMethod(<span class="string">&#x27;getPlatformVersion&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> version;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h6 id="Native调用Flutter"><a href="#Native调用Flutter" class="headerlink" title="Native调用Flutter"></a>Native调用Flutter</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Testflutterplugin2EventChannel</span> <span class="keyword">implements</span> <span class="title class_">EventChannel</span>.StreamHandler &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">registerWith</span><span class="params">(PluginRegistry.Registrar registrar)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">EventChannel</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EventChannel</span>(registrar.messenger(), <span class="string">&quot;testflutterplugin2.eventchannel&quot;</span>);</span><br><span class="line">        channel.setStreamHandler(<span class="keyword">new</span> <span class="title class_">Testflutterplugin2EventChannel</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onListen</span><span class="params">(Object arguments, EventChannel.EventSink eventSink)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            eventSink.success(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            eventSink.error(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;Testflutterplugin2EventChannel error&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCancel</span><span class="params">(Object arguments)</span> &#123;</span><br><span class="line">			</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Testflutterplugin2EventChannel</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> EventChannel _eventChannel =</span><br><span class="line">      <span class="keyword">const</span> EventChannel(<span class="string">&#x27;testflutterplugin2.eventchannel&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> test() &#123;</span><br><span class="line">    _eventChannel.receiveBroadcastStream(<span class="string">&#x27;arguments&#x27;</span>).listen((result) &#123;&#125;,</span><br><span class="line">        onError: (e) &#123;&#125;, onDone: () &#123;&#125;, cancelOnError: <span class="keyword">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> test1() &#123;</span><br><span class="line">    _eventChannel.receiveBroadcastStream().listen((result) &#123;&#125;,</span><br><span class="line">        onError: (e) &#123;&#125;, onDone: () &#123;&#125;, cancelOnError: <span class="keyword">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="Android平台下的插件引入"><a href="#Android平台下的插件引入" class="headerlink" title="Android平台下的插件引入"></a>Android平台下的插件引入</h5><p>Android目录中的代码为Android与Flutter桥接的部分：</p>
<p>在<code>settings.gradle</code>中 <code>rootProject.name = &#39;testflutterplugin2&#39;</code> 只是声明了Android模块，<code>build.gralde</code> 中为Android相关的配置项。</p>
<h5 id="插件代码"><a href="#插件代码" class="headerlink" title="插件代码"></a>插件代码</h5><p>插件实现了<code>MethodCallHandler</code> 接口，实现了<code>onMethodCall</code> 方法。</p>
<p><code>registerWith</code> 方法中：通过传入的Registrar对象，新建MethodChannel，并指定其名<code>testflutterplugin2</code>。</p>
<p>设置MethodChannel的处理方法Testflutterplugin2Plugin。这段代码主要作用用于注册处理方法Testflutterplugin2Plugin到Registrar。而MethodChannel只是对这个注册过程的一个封装。</p>
<p>查看MethodChannel核心代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMethodCallHandler</span><span class="params">(<span class="meta">@Nullable</span> MethodChannel.MethodCallHandler handler)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.messenger.setMessageHandler(<span class="built_in">this</span>.name, handler == <span class="literal">null</span> ? <span class="literal">null</span> : <span class="keyword">new</span> <span class="title class_">MethodChannel</span>.IncomingMethodCallHandler(handler));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在实现MethodCallHandler接口的类中，对于onMethodCall方法：</p>
<p>MethodCall对象中包含了来自于Flutter的调用方法名和参数信息。其中，arguments为Map对象或JSONObject</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> String method;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Object arguments;</span><br></pre></td></tr></table></figure>

<p>Result接口中包含Native端的返回给Flutter测的结果信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(ByteBuffer message, <span class="keyword">final</span> BinaryReply reply)</span> &#123;</span><br><span class="line">  <span class="type">MethodCall</span> <span class="variable">call</span> <span class="operator">=</span> MethodChannel.<span class="built_in">this</span>.codec.decodeMethodCall(message);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.handler.onMethodCall(call, <span class="keyword">new</span> <span class="title class_">MethodChannel</span>.Result() &#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">success</span><span class="params">(Object result)</span> &#123;</span><br><span class="line">        reply.reply(MethodChannel.<span class="built_in">this</span>.codec.encodeSuccessEnvelope(result));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">error</span><span class="params">(String errorCode, String errorMessage, Object errorDetails)</span> &#123;</span><br><span class="line">        reply.reply(MethodChannel.<span class="built_in">this</span>.codec.encodeErrorEnvelope(errorCode, errorMessage, errorDetails));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notImplemented</span><span class="params">()</span> &#123;</span><br><span class="line">        reply.reply((ByteBuffer)<span class="literal">null</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (RuntimeException var5) &#123;</span><br><span class="line">    Log.e(<span class="string">&quot;MethodChannel#&quot;</span> + MethodChannel.<span class="built_in">this</span>.name, <span class="string">&quot;Failed to handle method call&quot;</span>, var5);</span><br><span class="line">    reply.reply(MethodChannel.<span class="built_in">this</span>.codec.encodeErrorEnvelope(<span class="string">&quot;error&quot;</span>, var5.getMessage(), (Object)<span class="literal">null</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在IncomingResultHandler中，Result的匿名内部类中，通过BinaryReply将Native端的处理结果经StandardMethodCodec类，编码后传递给Flutter侧。</p>
<h5 id="插件的引入"><a href="#插件的引入" class="headerlink" title="插件的引入"></a>插件的引入</h5><p>在example模块中，在<code>MainActivity.java</code> 的<code>onCreate</code> 中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">FlutterActivity</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    GeneratedPluginRegistrant.registerWith(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Generated file. Do not edit.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">GeneratedPluginRegistrant</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">registerWith</span><span class="params">(PluginRegistry registry)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (alreadyRegisteredWith(registry)) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Testflutterplugin2Plugin.registerWith(registry.registrarFor(<span class="string">&quot;cn.cwiki.flutter.test.testflutterplugin2.Testflutterplugin2Plugin&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">alreadyRegisteredWith</span><span class="params">(PluginRegistry registry)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> GeneratedPluginRegistrant.class.getCanonicalName();</span><br><span class="line">    <span class="keyword">if</span> (registry.hasPlugin(key)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    registry.registrarFor(key);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:name</span>=<span class="string">&quot;io.flutter.app.FlutterApplication&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:label</span>=<span class="string">&quot;testflutterplugin2_example&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:icon</span>=<span class="string">&quot;@mipmap/ic_launcher&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlutterApplication</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Activity</span> <span class="variable">mCurrentActivity</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FlutterApplication</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CallSuper</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate();</span><br><span class="line">        FlutterMain.startInitialization(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Activity <span class="title function_">getCurrentActivity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.mCurrentActivity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCurrentActivity</span><span class="params">(Activity mCurrentActivity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mCurrentActivity = mCurrentActivity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>FlutterApplication中核心作用是<code> FlutterMain.startInitialization(this);</code> 初始化Flutter框架</p>
<h3 id="新建Flutter-Module"><a href="#新建Flutter-Module" class="headerlink" title="新建Flutter Module"></a>新建Flutter Module</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">flutter create --org com.exemple --template=plugin somemodule</span></span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/zauther/figurebed/blog/images/20200209200427.png" alt="image-20191020105011609" style="zoom:50%;" />

<p>settings.gradle</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">include <span class="string">&#x27;:app&#x27;</span></span><br><span class="line"></span><br><span class="line">rootProject.name = <span class="string">&#x27;android_generated&#x27;</span></span><br><span class="line">setBinding(<span class="keyword">new</span> Binding([<span class="attr">gradle:</span> <span class="variable language_">this</span>]))</span><br><span class="line">evaluate(<span class="keyword">new</span> File(<span class="string">&#x27;include_flutter.groovy&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>include_flutter.groovy</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> scriptFile = getClass().protectionDomain.codeSource.location.toURI()</span><br><span class="line"><span class="keyword">def</span> flutterProjectRoot = <span class="keyword">new</span> File(scriptFile).parentFile.parentFile</span><br><span class="line">gradle.include <span class="string">&#x27;:flutter&#x27;</span></span><br><span class="line">gradle.project(<span class="string">&#x27;:flutter&#x27;</span>).projectDir = <span class="keyword">new</span> File(flutterProjectRoot, <span class="string">&#x27;.android/Flutter&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> plugins = <span class="keyword">new</span> Properties()</span><br><span class="line"><span class="keyword">def</span> pluginsFile = <span class="keyword">new</span> File(flutterProjectRoot, <span class="string">&#x27;.flutter-plugins&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> (pluginsFile.exists()) &#123;</span><br><span class="line">    pluginsFile.withReader(<span class="string">&#x27;UTF-8&#x27;</span>) &#123; reader -&gt; plugins.load(reader) &#125;</span><br><span class="line">&#125;</span><br><span class="line">plugins.each &#123; name, path -&gt;</span><br><span class="line">    <span class="keyword">def</span> pluginDirectory = flutterProjectRoot.toPath().resolve(path).resolve(<span class="string">&#x27;android&#x27;</span>).toFile()</span><br><span class="line">    gradle.include <span class="string">&quot;:$name&quot;</span></span><br><span class="line">    gradle.project(<span class="string">&quot;:$name&quot;</span>).projectDir = pluginDirectory</span><br><span class="line">&#125;</span><br><span class="line">gradle.getGradle().projectsLoaded &#123; g -&gt;</span><br><span class="line">    g.rootProject.beforeEvaluate &#123; p -&gt;</span><br><span class="line">        _mainModuleName = binding.variables[<span class="string">&#x27;mainModuleName&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> (_mainModuleName != <span class="literal">null</span> &amp;&amp; !_mainModuleName.empty) &#123;</span><br><span class="line">            p.ext.mainModuleName = _mainModuleName</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    g.rootProject.afterEvaluate &#123; p -&gt;</span><br><span class="line">        p.subprojects &#123; sp -&gt;</span><br><span class="line">            <span class="keyword">if</span> (sp.name != <span class="string">&#x27;flutter&#x27;</span>) &#123;</span><br><span class="line">                sp.evaluationDependsOn(<span class="string">&#x27;:flutter&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Android-Flutter-编译任务"><a href="#Android-Flutter-编译任务" class="headerlink" title="Android Flutter 编译任务"></a>Android Flutter 编译任务</h3><h5 id="Android-端Flutter编译过程"><a href="#Android-端Flutter编译过程" class="headerlink" title="Android 端Flutter编译过程"></a>Android 端Flutter编译过程</h5><ol>
<li><p>设置变异类型</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">project.android.buildTypes &#123;</span><br><span class="line">  profile &#123;</span><br><span class="line">   <span class="comment">// ... </span></span><br><span class="line">  &#125;</span><br><span class="line">  dynamicProfile &#123;</span><br><span class="line">    <span class="comment">// ... </span></span><br><span class="line">  &#125;</span><br><span class="line">  dynamicRelease &#123;</span><br><span class="line">    <span class="comment">// ... </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置Flutter Engine，如果本地有配置，则会使用本地的</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (project.hasProperty(<span class="string">&#x27;localEngineOut&#x27;</span>)) &#123;</span><br><span class="line">	<span class="comment">// 设置配置的Engine</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="comment">// 设置Flutter SDK中的Engine</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加FlutterTask，并设置Flutter插件的依赖</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">project.extensions.create(<span class="string">&quot;flutter&quot;</span>, FlutterExtension)</span><br><span class="line">project.afterEvaluate <span class="variable language_">this</span>.&amp;addFlutterTask</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">plugins.each &#123; name, _ -&gt;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h6 id="FlutterTask"><a href="#FlutterTask" class="headerlink" title="FlutterTask"></a>FlutterTask</h6><ol>
<li><p>设置编译参数</p>
<p>flutter 代码路径：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">String target = project.flutter.target</span><br><span class="line"><span class="keyword">if</span> (target == <span class="literal">null</span>) &#123;</span><br><span class="line">  target = <span class="string">&#x27;lib/main.dart&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (project.hasProperty(<span class="string">&#x27;target&#x27;</span>)) &#123;</span><br><span class="line">  target = project.property(<span class="string">&#x27;target&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译目标平台：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">String targetPlatformValue = <span class="literal">null</span></span><br><span class="line"><span class="keyword">if</span> (project.hasProperty(<span class="string">&#x27;target-platform&#x27;</span>)) &#123;</span><br><span class="line">  targetPlatformValue = project.property(<span class="string">&#x27;target-platform&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>等等。</p>
</li>
<li><p>添加Flutter依赖以及FlutterTask</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (project.android.hasProperty(<span class="string">&quot;applicationVariants&quot;</span>)) &#123;</span><br><span class="line">  project.android.applicationVariants.all addFlutterDeps</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  project.android.libraryVariants.all addFlutterDeps</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>包含：vm_snapshot_data、vm_snapshot_instr、isolate_snapshot_data、isolate_snapshot_instr等，以及Flutter源代码等。Flutter 的编译过程是由源代码编译的，插件等提供的也是源代码依赖。</p>
</li>
<li><p>FlutterTask</p>
<p>Flutter 执行的便于指令：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> buildBundle() &#123;</span><br><span class="line">  <span class="keyword">if</span> (!sourceDir.isDirectory()) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> GradleException(<span class="string">&quot;Invalid Flutter source directory: $&#123;sourceDir&#125;&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  intermediateDir.mkdirs()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (buildMode == <span class="string">&quot;profile&quot;</span> || buildMode == <span class="string">&quot;release&quot;</span>) &#123;</span><br><span class="line">    project.exec &#123;</span><br><span class="line">      executable flutterExecutable.absolutePath</span><br><span class="line">      workingDir sourceDir</span><br><span class="line">      <span class="keyword">if</span> (localEngine != <span class="literal">null</span>) &#123;</span><br><span class="line">        args <span class="string">&quot;--local-engine&quot;</span>, localEngine</span><br><span class="line">        args <span class="string">&quot;--local-engine-src-path&quot;</span>, localEngineSrcPath</span><br><span class="line">      &#125;</span><br><span class="line">      args <span class="string">&quot;build&quot;</span>, <span class="string">&quot;aot&quot;</span></span><br><span class="line">      args <span class="string">&quot;--suppress-analytics&quot;</span></span><br><span class="line">      args <span class="string">&quot;--quiet&quot;</span></span><br><span class="line">      args <span class="string">&quot;--target&quot;</span>, targetPath</span><br><span class="line">      args <span class="string">&quot;--target-platform&quot;</span>, <span class="string">&quot;android-arm&quot;</span></span><br><span class="line">      args <span class="string">&quot;--output-dir&quot;</span>, <span class="string">&quot;$&#123;intermediateDir&#125;&quot;</span></span><br><span class="line">      <span class="keyword">if</span> (trackWidgetCreation) &#123;</span><br><span class="line">        args <span class="string">&quot;--track-widget-creation&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (extraFrontEndOptions != <span class="literal">null</span>) &#123;</span><br><span class="line">        args <span class="string">&quot;--extra-front-end-options&quot;</span>, <span class="string">&quot;$&#123;extraFrontEndOptions&#125;&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (extraGenSnapshotOptions != <span class="literal">null</span>) &#123;</span><br><span class="line">        args <span class="string">&quot;--extra-gen-snapshot-options&quot;</span>, <span class="string">&quot;$&#123;extraGenSnapshotOptions&#125;&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (buildSharedLibrary) &#123;</span><br><span class="line">        args <span class="string">&quot;--build-shared-library&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (targetPlatform != <span class="literal">null</span>) &#123;</span><br><span class="line">        args <span class="string">&quot;--target-platform&quot;</span>, <span class="string">&quot;$&#123;targetPlatform&#125;&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">      args <span class="string">&quot;--$&#123;buildMode&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  project.exec &#123;</span><br><span class="line">    executable flutterExecutable.absolutePath</span><br><span class="line">    workingDir sourceDir</span><br><span class="line">    <span class="keyword">if</span> (localEngine != <span class="literal">null</span>) &#123;</span><br><span class="line">      args <span class="string">&quot;--local-engine&quot;</span>, localEngine</span><br><span class="line">      args <span class="string">&quot;--local-engine-src-path&quot;</span>, localEngineSrcPath</span><br><span class="line">    &#125;</span><br><span class="line">    args <span class="string">&quot;build&quot;</span>, <span class="string">&quot;bundle&quot;</span></span><br><span class="line">    args <span class="string">&quot;--suppress-analytics&quot;</span></span><br><span class="line">    args <span class="string">&quot;--target&quot;</span>, targetPath</span><br><span class="line">    <span class="keyword">if</span> (verbose) &#123;</span><br><span class="line">      args <span class="string">&quot;--verbose&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fileSystemRoots != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (root <span class="keyword">in</span> fileSystemRoots) &#123;</span><br><span class="line">        args <span class="string">&quot;--filesystem-root&quot;</span>, root</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fileSystemScheme != <span class="literal">null</span>) &#123;</span><br><span class="line">      args <span class="string">&quot;--filesystem-scheme&quot;</span>, fileSystemScheme</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (trackWidgetCreation) &#123;</span><br><span class="line">      args <span class="string">&quot;--track-widget-creation&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (compilationTraceFilePath != <span class="literal">null</span>) &#123;</span><br><span class="line">      args <span class="string">&quot;--compilation-trace-file&quot;</span>, compilationTraceFilePath</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (createPatch) &#123;</span><br><span class="line">      args <span class="string">&quot;--patch&quot;</span></span><br><span class="line">      args <span class="string">&quot;--build-number&quot;</span>, project.android.defaultConfig.versionCode</span><br><span class="line">      <span class="keyword">if</span> (buildNumber != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">assert</span> buildNumber == project.android.defaultConfig.versionCode</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (baselineDir != <span class="literal">null</span>) &#123;</span><br><span class="line">      args <span class="string">&quot;--baseline-dir&quot;</span>, baselineDir</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (extraFrontEndOptions != <span class="literal">null</span>) &#123;</span><br><span class="line">      args <span class="string">&quot;--extra-front-end-options&quot;</span>, <span class="string">&quot;$&#123;extraFrontEndOptions&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (extraGenSnapshotOptions != <span class="literal">null</span>) &#123;</span><br><span class="line">      args <span class="string">&quot;--extra-gen-snapshot-options&quot;</span>, <span class="string">&quot;$&#123;extraGenSnapshotOptions&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (targetPlatform != <span class="literal">null</span>) &#123;</span><br><span class="line">      args <span class="string">&quot;--target-platform&quot;</span>, <span class="string">&quot;$&#123;targetPlatform&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (buildMode == <span class="string">&quot;release&quot;</span> || buildMode == <span class="string">&quot;profile&quot;</span>) &#123;</span><br><span class="line">      args <span class="string">&quot;--precompiled&quot;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      args <span class="string">&quot;--depfile&quot;</span>, <span class="string">&quot;$&#123;intermediateDir&#125;/snapshot_blob.bin.d&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    args <span class="string">&quot;--asset-dir&quot;</span>, <span class="string">&quot;$&#123;intermediateDir&#125;/flutter_assets&quot;</span></span><br><span class="line">    <span class="keyword">if</span> (buildMode == <span class="string">&quot;debug&quot;</span>) &#123;</span><br><span class="line">      args <span class="string">&quot;--debug&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (buildMode == <span class="string">&quot;profile&quot;</span> || buildMode == <span class="string">&quot;dynamicProfile&quot;</span>) &#123;</span><br><span class="line">      args <span class="string">&quot;--profile&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (buildMode == <span class="string">&quot;release&quot;</span> || buildMode == <span class="string">&quot;dynamicRelease&quot;</span>) &#123;</span><br><span class="line">      args <span class="string">&quot;--release&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (buildMode == <span class="string">&quot;dynamicProfile&quot;</span> || buildMode == <span class="string">&quot;dynamicRelease&quot;</span>) &#123;</span><br><span class="line">      args <span class="string">&quot;--dynamic&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>flutterExecutable为flutter命令</p>
<p>当 buildType 为 debug 时：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">flutter build bundle --depfile <span class="variable">$&#123;intermediateDir&#125;</span>/snapshot_blob.bin.d --debug</span></span><br></pre></td></tr></table></figure>

<p>当 buildType 为 release 时:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">flutter build aot</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">flutter build bundle --precompiled --release</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="Flutter-编译模型区别"><a href="#Flutter-编译模型区别" class="headerlink" title="Flutter 编译模型区别"></a>Flutter 编译模型区别</h5><p><a href="https://juejin.im/post/5d68fb1af265da03d063b69e">https://juejin.im/post/5d68fb1af265da03d063b69e</a></p>
<h3 id="二、-调试工具Dart-DevTools"><a href="#二、-调试工具Dart-DevTools" class="headerlink" title="二、 调试工具Dart DevTools"></a>二、 调试工具Dart DevTools</h3><ol>
<li>启动devtools</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pub global run devtools</span></span><br><span class="line">Serving DevTools at http://127.0.0.1:9100</span><br></pre></td></tr></table></figure>

<ol start="2">
<li> 在flutter lib同目录执行attach命令，等待App连接</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">flutter attach</span></span><br><span class="line">Waiting for a connection from Flutter on MI 8...</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>重新启动app，等待</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">flutter attach</span></span><br><span class="line">Waiting for a connection from Flutter on MI 8...</span><br><span class="line">Done.</span><br><span class="line">Syncing files to device MI 8...</span><br><span class="line"> 3,832ms (!)</span><br><span class="line"></span><br><span class="line">🔥  To hot reload changes while running, press &quot;r&quot;. To hot restart (and rebuild state), press &quot;R&quot;.</span><br><span class="line">An Observatory debugger and profiler on MI 8 is available at: http://127.0.0.1:53469/Fv75Oo4wMEE=/</span><br><span class="line">For a more detailed help message, press &quot;h&quot;. To detach, press &quot;d&quot;; to quit, press &quot;q&quot;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>打开chrome，<a href="http://127.0.0.1:9100/">http://127.0.0.1:9100</a> ，输入<code>flutter attach</code> 命令中的url <code>http://127.0.0.1:53469/Fv75Oo4wMEE=/</code></li>
</ol>
<img src="https://raw.githubusercontent.com/zauther/figurebed/blog/images/20200209200549.png" alt="image-20191024193054066" style="zoom:33%;" />

<ol start="5">
<li>通过Dart DevTools调试</li>
</ol>
<p><img src="https://raw.githubusercontent.com/zauther/figurebed/blog/images/20200209200719.png" alt="image-20191024193127816"></p>
<p>工具项：</p>
<ul>
<li>Flutter Inspector： 布局调试工具</li>
<li>Timeline ： </li>
<li>Memory ： 内存使用情况</li>
<li>Performance ：</li>
<li>Debugger： 断点调试工具</li>
<li>Logging ： Log输出</li>
<li>Hot Reload</li>
<li>Hot Restart</li>
</ul>
<h6 id="Flutter-Inspector：Flutter-布局调试工具"><a href="#Flutter-Inspector：Flutter-布局调试工具" class="headerlink" title="Flutter Inspector：Flutter 布局调试工具"></a>Flutter Inspector：Flutter 布局调试工具</h6><p>Performance Overlay ：</p>
<img src="/Users/zauther/Library/Application Support/typora-user-images/image-20191024200900434.png" alt="image-20191024200900434" style="zoom:33%;" />

<p>Paint Baselines：</p>
<img src="/Users/zauther/Library/Application Support/typora-user-images/image-20191024201205498.png" alt="image-20191024201205498" style="zoom:33%;" />

<p>Debug Paint：</p>
<img src="/Users/zauther/Library/Application Support/typora-user-images/image-20191024193810095.png" alt="image-20191024193810095" style="zoom: 33%;" />



<p>当项目为Flutter工程时，可以直接通过Android Studio进行调试，当以Module的形式引入时，目前无法直接通过Android Studio进行调试，可采用Dart DevTools在Chrome中调试。</p>
<p>![image-20191024201010180](&#x2F;Users&#x2F;zauther&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20191024201010180.png)</p>
<h3 id="三、Flutter-接入实践"><a href="#三、Flutter-接入实践" class="headerlink" title="三、Flutter 接入实践"></a>三、Flutter 接入实践</h3><h3 id="接入现有ReactNative工程"><a href="#接入现有ReactNative工程" class="headerlink" title="接入现有ReactNative工程"></a>接入现有ReactNative工程</h3><h4 id="1-在Android测"><a href="#1-在Android测" class="headerlink" title="1. 在Android测"></a>1. 在Android测</h4><ol>
<li>引入Flutter Module</li>
</ol>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">setBinding(<span class="keyword">new</span> Binding([<span class="attr">gradle:</span> <span class="variable language_">this</span>]))</span><br><span class="line">evaluate(<span class="keyword">new</span> File(rootProject.projectDir, <span class="string">&#x27;./fluttermodule/android/include_flutter.groovy&#x27;</span>))</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在include_flutter.groovy指定自己的Flutter模块，因为.android目录是自己生成的，内容会被覆盖，可自定义模块</li>
</ol>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">gradle.include <span class="string">&#x27;:flutter&#x27;</span></span><br><span class="line">gradle.project(<span class="string">&#x27;:flutter&#x27;</span>).projectDir = <span class="keyword">new</span> File(flutterProjectRoot, <span class="string">&#x27;android/Flutter&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>定义FlutterActivity，并在AndroidManifest.xml中注册，此处集成FlutterBoost的BoostFlutterActivity，也可以使用Flutter原生的FlutterActivity。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlutterPageActivity</span> <span class="keyword">extends</span> <span class="title class_">BoostFlutterActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> HashMap params;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle saveInstanceBundle)</span> &#123;</span><br><span class="line">       <span class="comment">// onCreate</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onRegisterPlugins</span><span class="params">(PluginRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">// register flutter plugins</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getContainerName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">url</span> <span class="operator">=</span>= <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : url;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map <span class="title function_">getContainerParams</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// params of the page</span></span><br><span class="line">        <span class="type">return</span> <span class="variable">params</span> <span class="operator">=</span>= <span class="literal">null</span> ? <span class="keyword">new</span> <span class="title class_">HashMap</span>() : params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">FlutterActivity</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    GeneratedPluginRegistrant.registerWith(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>FlutterActivity，用于承接Flutter界面</p>
<ol start="4">
<li>在Application中初始化Flutter框架</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FlutterMain.startInitialization(context);</span><br></pre></td></tr></table></figure>



<p>如果使用FlutterBoost，在初始化Flutter框架后，初始化FlutterBoost插件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FlutterBoostPlugin.init(platform);</span><br></pre></td></tr></table></figure>

<h4 id="2-在ReactNative测"><a href="#2-在ReactNative测" class="headerlink" title="2. 在ReactNative测"></a>2. 在ReactNative测</h4><ol>
<li>自定义方法</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">FlutterSupport</span>.<span class="property">openFlutterPage</span> = <span class="keyword">function</span> (<span class="params">url, params</span>)&#123;</span><br><span class="line">    <span class="title class_">NativeModules</span>.<span class="property">RNFlutterSupport</span>.<span class="title function_">openFlutterPage</span>(url, params)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>新建ReactNativeModules，并注册到ReactNativeHost中</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RNFlutterSupportModule</span> <span class="keyword">extends</span> <span class="title class_">ReactContextBaseJavaModule</span>&#123;</span><br><span class="line">    <span class="meta">@ReactMethod</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">openFlutterPage</span><span class="params">(String url, ReadableMap params)</span> &#123;</span><br><span class="line">      <span class="comment">// RN侧调用，RNToFlutterManager根据url来判断跳转到哪个Flutter页面</span></span><br><span class="line">        RNToFlutterManager.openFlutterPage(reactContext, url, params == <span class="literal">null</span> ? <span class="keyword">new</span> <span class="title class_">HashMap</span>() : params.toHashMap(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  	<span class="comment">// RN侧调用Flutter方法</span></span><br><span class="line">    <span class="meta">@ReactMethod</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invokeCallback</span><span class="params">(String callbackId, ReadableMap data)</span> &#123;</span><br><span class="line">        <span class="type">ReactFlutterEventEmitterCallbackEvent</span> <span class="variable">callbackEvent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReactFlutterEventEmitterCallbackEvent</span>();</span><br><span class="line">        callbackEvent.callBackId = callbackId;</span><br><span class="line">        callbackEvent.data = data;</span><br><span class="line">        mEmitter.onReactCallbackEvent(callbackEvent);</span><br><span class="line">    &#125;</span><br><span class="line">  	<span class="comment">// 用于Flutter侧调用RN的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodCallReactNative</span><span class="params">(String method, Object arguments, <span class="keyword">final</span> Callback callback)</span> &#123;</span><br><span class="line">        mEmitter.sendEvent(reactContext, method, arguments, callback == <span class="literal">null</span> ? <span class="literal">null</span> : <span class="keyword">new</span> <span class="title class_">ReactFlutterEventEmitterCallbackHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handler</span><span class="params">(ReadableMap data)</span> &#123;</span><br><span class="line">                callback.invoke(data.toHashMap());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;RNFlutterSupport&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RNFlutterSupportPackage</span> <span class="keyword">implements</span> <span class="title class_">ReactPackage</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> RNFlutterSupportModule mRNFlutterSupportModule;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;NativeModule&gt; <span class="title function_">createNativeModules</span><span class="params">(ReactApplicationContext reactContext)</span> &#123;</span><br><span class="line">        mRNFlutterSupportModule = <span class="keyword">new</span> <span class="title class_">RNFlutterSupportModule</span>(reactContext);</span><br><span class="line">        <span class="keyword">return</span> Arrays.&lt;NativeModule&gt;asList(mRNFlutterSupportModule);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Deprecated from RN 0.47</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Class&lt;? <span class="keyword">extends</span> <span class="title class_">JavaScriptModule</span>&gt;&gt; createJSModules() &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;ViewManager&gt; <span class="title function_">createViewManagers</span><span class="params">(ReactApplicationContext reactContext)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">openFlutterPage</span><span class="params">(Context context, String url, <span class="keyword">final</span> HashMap params, <span class="type">int</span> requestCode)</span> &#123;</span><br><span class="line">  <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(context, FlutterPageActivity.class);</span><br><span class="line">  intent.putExtra(<span class="string">&quot;url&quot;</span>, url);</span><br><span class="line">  intent.putExtra(<span class="string">&quot;params&quot;</span>, params);</span><br><span class="line">  <span class="keyword">if</span> (params != <span class="literal">null</span> &amp;&amp; params.containsKey(<span class="string">&quot;flags&quot;</span>)) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">flags</span> <span class="operator">=</span> (String) params.get(<span class="string">&quot;flags&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (android.os.Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP &amp;&amp; <span class="string">&quot;CLEAR_TASK&quot;</span>.equals(flags)) &#123;</span><br><span class="line">      intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">  &#125;</span><br><span class="line">  context.startActivity(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="FlutterBoost-使用"><a href="#FlutterBoost-使用" class="headerlink" title="FlutterBoost 使用"></a>FlutterBoost 使用</h3><p>在pubspec.yaml添加插件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">flutter_boost:</span> <span class="string">^0.0.415</span></span><br></pre></td></tr></table></figure>

<p>在Application中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FlutterBoostPlugin.init(<span class="keyword">new</span> <span class="title class_">IFlutterPlatform</span>() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Application <span class="title function_">getApplication</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Activity <span class="title function_">getMainActivity</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isDebug</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startActivity</span><span class="params">(Context context, String url, <span class="type">int</span> requestCode)</span> &#123;</span><br><span class="line">    <span class="comment">// flutter 跳转原生</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Map <span class="title function_">getSettings</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在Flutter main.dart中注册页面并初始化FlutterBoost：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyAPPState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyApp</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    FlutterBoost.singleton.registerPageBuilders(&#123;</span><br><span class="line">      <span class="string">&#x27;teemo.home&#x27;</span>: (pageName, params, _) =&gt; HomePageWidget(params),</span><br><span class="line">      <span class="string">&#x27;teemo.settings&#x27;</span>: (pageName, params, _) =&gt; SettingPageWidget(params),</span><br><span class="line">      <span class="string">&#x27;teemo.changeenv&#x27;</span>: (pageName, params, _) =&gt; ChangeEnvPageWidget(params),</span><br><span class="line">      <span class="string">&#x27;teemo.cabinet.errorreport&#x27;</span>: (pageName, params, _) =&gt;</span><br><span class="line">          ErrorReportPage(params),</span><br><span class="line">      <span class="string">&#x27;teemo.order.orderdetail&#x27;</span>: (pageName, params, _) =&gt;</span><br><span class="line">          OrderDetailPage(params),</span><br><span class="line">    &#125;);</span><br><span class="line">    FlutterBoost.handleOnStartPage();</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Teemo&#x27;</span>,</span><br><span class="line">      builder: FlutterBoost.init(),</span><br><span class="line">      home: <span class="keyword">new</span> Container(),</span><br><span class="line">      localizationsDelegates: [</span><br><span class="line">        RefreshLocalizations.delegate,</span><br><span class="line">        GlobalMaterialLocalizations.delegate,</span><br><span class="line">        GlobalWidgetsLocalizations.delegate,</span><br><span class="line">        <span class="keyword">const</span> FallbackCupertinoLocalisationsDelegate(),</span><br><span class="line">      ],</span><br><span class="line">      supportedLocales: [</span><br><span class="line">        <span class="keyword">const</span> Locale(<span class="string">&#x27;zh&#x27;</span>, <span class="string">&#x27;CH&#x27;</span>),</span><br><span class="line">        <span class="keyword">const</span> Locale(<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;US&#x27;</span>),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Flutter 中跳转页面：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">FlutterBoost.singleton.openPage(<span class="string">&#x27;teemo.settings&#x27;</span>,</span><br><span class="line">                        &#123;<span class="string">&#x27;canChangeRole&#x27;</span>: canChangeRole ? <span class="string">&quot;1&quot;</span> : <span class="string">&quot;0&quot;</span>&#125;,</span><br><span class="line">                        animated: <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>

<p>FlutterBoost flutter测常用方法：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">FlutterBoost.singleton.openPage(<span class="built_in">String</span> url, <span class="built_in">Map</span> params,</span><br><span class="line">      &#123;<span class="built_in">bool</span> animated, PageResultHandler resultHandler&#125;);</span><br><span class="line">FlutterBoost.singleton.closePage(<span class="built_in">String</span> url, <span class="built_in">String</span> pageId, <span class="built_in">Map</span> params,</span><br><span class="line">      &#123;<span class="built_in">bool</span> animated&#125;);</span><br><span class="line">FlutterBoost.singleton.closeCurPage(<span class="built_in">Map</span> params);</span><br><span class="line">FlutterBoost.handleOnStartPage();</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
        <tag>ReactNative</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle 用法</title>
    <url>/2021/11/21/Gradle%20%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p>主要包含：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">settings.gradle</span><br><span class="line">build.gradle</span><br><span class="line">app/build.gradle</span><br></pre></td></tr></table></figure>

<p>以及gradle wrapper下的gradle jar包和配置文件</p>
<span id="more"></span>

<h4 id="Gradle-文件执行顺序"><a href="#Gradle-文件执行顺序" class="headerlink" title="Gradle 文件执行顺序"></a>Gradle 文件执行顺序</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//settings.gradle</span></span><br><span class="line">println(<span class="string">&quot;setting 开始配置&quot;</span>)</span><br><span class="line">include <span class="string">&#x27;:app&#x27;</span></span><br><span class="line">rootProject.name=<span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">println(<span class="string">&quot;setting 配置完成&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//project build.gradle</span></span><br><span class="line">println(<span class="string">&quot;根build.gradle 开始配置&quot;</span>)</span><br><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">println(<span class="string">&quot;根build.gradle 配置完成&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//app build.gradle</span></span><br><span class="line">println(<span class="string">&quot;app build.gradle 开始配置&quot;</span>)</span><br><span class="line"></span><br><span class="line">project.afterEvaluate &#123;</span><br><span class="line">    println <span class="string">&quot;所有模块都已配置完成&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">&#125;</span><br><span class="line">println(<span class="string">&quot;app build.gradle 配置完成&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>三个文件中：<br>settings.gradle 先执行<br>build.gradle 第二执行<br>app&#x2F;build.gradle 第三执行，如果注册了 project.afterEvaluate ，则后执行<br>在不同文件中注册project.afterEvaluate，对于不同的project</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">setting 开始配置</span><br><span class="line">setting 配置完成</span><br><span class="line"></span><br><span class="line">&gt; Configure <span class="attr">project :</span></span><br><span class="line">根build.gradle 开始配置</span><br><span class="line">根build.gradle 配置完成</span><br><span class="line">build.gradle 所有模块都已配置完成</span><br><span class="line"></span><br><span class="line">&gt; Configure <span class="attr">project :</span>app</span><br><span class="line">app build.gradle 开始配置</span><br><span class="line">app build.gradle 配置完成</span><br><span class="line">app build.gradle 所有模块都已配置完成</span><br></pre></td></tr></table></figure>

<p>在settings.gradle中添加</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">gradle.addBuildListener(<span class="keyword">new</span> BuildListener() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">void</span> beforeSettings(Settings settings) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.beforeSettings(settings)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">void</span> settingsEvaluated(Settings settings) &#123;</span><br><span class="line">        println(<span class="string">&quot;settingsEvaluated------------&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">void</span> projectsLoaded(Gradle gradle) &#123;</span><br><span class="line">        println(<span class="string">&quot;projectsLoaded------------&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">void</span> projectsEvaluated(Gradle gradle) &#123;</span><br><span class="line">        println(<span class="string">&quot;projectsEvaluated------------&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">void</span> buildFinished(BuildResult result) &#123;</span><br><span class="line">        println(<span class="string">&quot;buildFinished------------&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">setting 开始配置</span><br><span class="line">setting 配置完成</span><br><span class="line">settingsEvaluated------------</span><br><span class="line">projectsLoaded------------</span><br><span class="line"></span><br><span class="line">&gt; Configure <span class="attr">project :</span></span><br><span class="line">根build.gradle 开始配置</span><br><span class="line">根build.gradle 配置完成</span><br><span class="line">build.gradle 所有模块都已配置完成</span><br><span class="line"></span><br><span class="line">&gt; Configure <span class="attr">project :</span>app</span><br><span class="line">app build.gradle 开始配置</span><br><span class="line">app build.gradle 配置完成</span><br><span class="line">app build.gradle 所有模块都已配置完成</span><br><span class="line">projectsEvaluated------------</span><br><span class="line">buildFinished------------</span><br></pre></td></tr></table></figure>

<p>如果是在build.gradle中添加则输出</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">setting 开始配置</span><br><span class="line">setting 配置完成</span><br><span class="line"></span><br><span class="line">&gt; Configure <span class="attr">project :</span></span><br><span class="line">根build.gradle 开始配置</span><br><span class="line">根build.gradle 配置完成</span><br><span class="line">build.gradle 所有模块都已配置完成</span><br><span class="line"></span><br><span class="line">&gt; Configure <span class="attr">project :</span>app</span><br><span class="line">app build.gradle 开始配置</span><br><span class="line">app build.gradle 配置完成</span><br><span class="line">app build.gradle 所有模块都已配置完成</span><br><span class="line">projectsEvaluated------------</span><br><span class="line">buildFinished------------</span><br></pre></td></tr></table></figure>

<p>可以看到settingsEvaluated、projectsLoaded相关的没有打印，因为这个时候settingsEvaluated和projectsLoaded已经执行过了。<br>​</p>
<h4 id="Gradle-Task"><a href="#Gradle-Task" class="headerlink" title="Gradle Task"></a>Gradle Task</h4><p>在build.gradle文件中：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">task hello() &#123;</span><br><span class="line">    println <span class="string">&quot;hello world&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//将给定的闭包 添加到此task操作链表的开头</span></span><br><span class="line">    doFirst &#123;</span><br><span class="line">        println <span class="string">&quot;hello task doFirst&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">&quot;hello task doLast&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>settings.gradle是项目配置文件，无法添加task。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">setting 开始配置</span><br><span class="line">setting 配置完成</span><br><span class="line"></span><br><span class="line">&gt; Configure <span class="attr">project :</span></span><br><span class="line">根build.gradle 开始配置</span><br><span class="line">根build.gradle 配置完成</span><br><span class="line">hello world</span><br><span class="line">build.gradle 所有模块都已配置完成</span><br><span class="line"></span><br><span class="line">&gt; Configure <span class="attr">project :</span>app</span><br><span class="line">app build.gradle 开始配置</span><br><span class="line">app build.gradle 配置完成</span><br><span class="line">app build.gradle 所有模块都已配置完成</span><br><span class="line"></span><br><span class="line">&gt; <span class="attr">Task :</span>hello</span><br><span class="line">hello task doFirst</span><br><span class="line">hello task doLast</span><br></pre></td></tr></table></figure>

<p>可以看到，会先执行配置，然后才会执行task。<br>其中ext是内置变量</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">ext.a=<span class="string">&quot;1222&quot;</span></span><br><span class="line"></span><br><span class="line">task hello() &#123;</span><br><span class="line">    println <span class="string">&quot;hello world&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//将给定的闭包 添加到此task操作链表的开头</span></span><br><span class="line">    doFirst &#123;</span><br><span class="line">        println <span class="string">&quot;hello task doFirst:$a&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">&quot;hello task doLast&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">&gt; <span class="attr">Task :</span>hello</span><br><span class="line">hello task <span class="attr">doFirst:</span><span class="number">1222</span></span><br><span class="line">hello task doLast</span><br></pre></td></tr></table></figure>

<h4 id="Build监听"><a href="#Build监听" class="headerlink" title="Build监听"></a>Build监听</h4><p>在settings.gradle中配置</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">gradle.addBuildListener(<span class="keyword">new</span> BuildListener() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">void</span> beforeSettings(Settings settings) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.beforeSettings(settings)</span><br><span class="line">        println(<span class="string">&quot;beforeSettings------------&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">void</span> settingsEvaluated(Settings settings) &#123;</span><br><span class="line">        println(<span class="string">&quot;settingsEvaluated------------&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">void</span> projectsLoaded(Gradle gradle) &#123;</span><br><span class="line">        println(<span class="string">&quot;projectsLoaded------------&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">void</span> projectsEvaluated(Gradle gradle) &#123;</span><br><span class="line">        println(<span class="string">&quot;projectsEvaluated------------&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">void</span> buildFinished(BuildResult result) &#123;</span><br><span class="line">        println(<span class="string">&quot;buildFinished------------&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">setting 开始配置</span><br><span class="line">setting 配置完成</span><br><span class="line">settingsEvaluated------------</span><br><span class="line">projectsLoaded------------</span><br><span class="line"></span><br><span class="line">&gt; Configure <span class="attr">project :</span></span><br><span class="line">根build.gradle 开始配置</span><br><span class="line">根build.gradle 配置完成</span><br><span class="line">hello world</span><br><span class="line">build.gradle 所有模块都已配置完成</span><br><span class="line"></span><br><span class="line">&gt; Configure <span class="attr">project :</span>app</span><br><span class="line">app build.gradle 开始配置</span><br><span class="line">app build.gradle 配置完成</span><br><span class="line">app build.gradle 所有模块都已配置完成</span><br><span class="line">projectsEvaluated------------</span><br><span class="line">buildFinished------------</span><br></pre></td></tr></table></figure>

<p>当执行assemble时</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">setting 开始配置</span><br><span class="line">setting 配置完成</span><br><span class="line">settingsEvaluated------------</span><br><span class="line">projectsLoaded------------</span><br><span class="line"></span><br><span class="line">&gt; Configure <span class="attr">project :</span></span><br><span class="line">根build.gradle 开始配置</span><br><span class="line">根build.gradle 配置完成</span><br><span class="line">hello world</span><br><span class="line">build.gradle 所有模块都已配置完成</span><br><span class="line"></span><br><span class="line">&gt; Configure <span class="attr">project :</span>app</span><br><span class="line">app build.gradle 开始配置</span><br><span class="line">app build.gradle 配置完成</span><br><span class="line">app build.gradle 所有模块都已配置完成</span><br><span class="line">projectsEvaluated------------</span><br><span class="line"></span><br><span class="line">&gt; <span class="attr">Task :</span><span class="attr">app:</span>preBuild UP-TO-DATE</span><br><span class="line">&gt; <span class="attr">Task :</span><span class="attr">app:</span>preDebugBuild UP-TO-DATE</span><br><span class="line">...</span><br><span class="line">buildFinished------------</span><br></pre></td></tr></table></figure>

<p>可以看到，先执行Evaluated settings，然后是Loaded projects，每个项目的配置设置完后，projectsEvaluated。之后执行各种Task。执行完最后完成buildFinished。<br>​</p>
<h4 id="Task执行监听"><a href="#Task执行监听" class="headerlink" title="Task执行监听"></a>Task执行监听</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">gradle.addListener(<span class="keyword">new</span> TaskExecutionListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">void</span> beforeExecute(Task task) &#123;</span><br><span class="line">        println <span class="string">&quot;打印beforeExecute $&#123;task&#125; ==&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">void</span> afterExecute(Task task, TaskState taskState) &#123;</span><br><span class="line">        println <span class="string">&quot;打印afterExecute $&#123;task.getPath()&#125; ---  $&#123;taskState&#125; ==&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">setting 开始配置</span><br><span class="line">setting 配置完成</span><br><span class="line"></span><br><span class="line">&gt; Configure <span class="attr">project :</span></span><br><span class="line">根build.gradle 开始配置</span><br><span class="line">根build.gradle 配置完成</span><br><span class="line">hello world</span><br><span class="line">build.gradle 所有模块都已配置完成</span><br><span class="line"></span><br><span class="line">&gt; Configure <span class="attr">project :</span>app</span><br><span class="line">app build.gradle 开始配置</span><br><span class="line">app build.gradle 配置完成</span><br><span class="line">app build.gradle 所有模块都已配置完成</span><br><span class="line"></span><br><span class="line">&gt; <span class="attr">Task :</span><span class="attr">app:</span>preBuild UP-TO-DATE</span><br><span class="line">打印beforeExecute task <span class="string">&#x27;:app:preBuild&#x27;</span> ==</span><br><span class="line">打印<span class="attr">afterExecute :</span><span class="attr">app:</span>preBuild ---  org.gradle.api.internal.tasks.TaskStateInternal@<span class="number">6</span>bbf2d19 ==</span><br><span class="line"></span><br><span class="line">&gt; <span class="attr">Task :</span><span class="attr">app:</span>preDebugBuild UP-TO-DATE</span><br><span class="line">打印beforeExecute task <span class="string">&#x27;:app:preDebugBuild&#x27;</span> ==</span><br><span class="line">打印<span class="attr">afterExecute :</span><span class="attr">app:</span>preDebugBuild ---  org.gradle.api.internal.tasks.TaskStateInternal@<span class="number">62</span>fecb05 ==</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>会在task执行前后打印日志<br>​</p>
<h4 id="Gradle-插件"><a href="#Gradle-插件" class="headerlink" title="Gradle 插件"></a>Gradle 插件</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">println(<span class="string">&quot;before apply plugin&quot;</span>)</span><br><span class="line">apply <span class="attr">plugin:</span> MyPlugin</span><br><span class="line">println(<span class="string">&quot;after apply plugin&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPlugin</span> <span class="keyword">implements</span> <span class="title class_">Plugin</span>&lt;Project&gt;&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">void</span> apply(Project project) &#123;</span><br><span class="line">        println <span class="string">&quot;apply MyPlugin: $&#123;project.name&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">setting 开始配置</span><br><span class="line">setting 配置完成</span><br><span class="line"></span><br><span class="line">&gt; Configure <span class="attr">project :</span></span><br><span class="line">根build.gradle 开始配置</span><br><span class="line">根build.gradle 配置完成</span><br><span class="line">hello world</span><br><span class="line">build.gradle 所有模块都已配置完成</span><br><span class="line"></span><br><span class="line">&gt; Configure <span class="attr">project :</span>app</span><br><span class="line">app build.gradle 开始配置</span><br><span class="line">app build.gradle 配置完成</span><br><span class="line">before apply plugin</span><br><span class="line">apply <span class="attr">MyPlugin:</span> app</span><br><span class="line">after apply plugin</span><br><span class="line">app build.gradle 所有模块都已配置完成</span><br></pre></td></tr></table></figure>

<p>可以看到插件走的是配置。在配置时，会执行插件的apply。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">println(<span class="string">&quot;before apply plugin&quot;</span>)</span><br><span class="line">apply <span class="attr">plugin:</span> MyPlugin</span><br><span class="line">println(<span class="string">&quot;after apply plugin&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPlugin</span> <span class="keyword">implements</span> <span class="title class_">Plugin</span>&lt;Project&gt;&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">void</span> apply(Project project) &#123;</span><br><span class="line">        println <span class="string">&quot;apply MyPlugin: $&#123;project.name&#125;&quot;</span></span><br><span class="line">        project.extensions.add(<span class="string">&quot;testKey&quot;</span>,<span class="string">&quot;helloWork&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">println(<span class="string">&quot;$testKey&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>通过 <code>apply plugin: MyPlugin</code> 后，将<code>testKey</code> 设置到<code>project.extensions</code> 中，后面直接使用。<br>​</p>
<h4 id="Gradle-Project"><a href="#Gradle-Project" class="headerlink" title="Gradle Project"></a>Gradle Project</h4><p>gradle project常用属性：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">project.afterEvaluate&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">project.plugins.hasPlugin(<span class="string">&quot;com.android.library&quot;</span>)</span><br><span class="line"></span><br><span class="line">project.configurations</span><br><span class="line"></span><br><span class="line">project.gradle.addListener()</span><br></pre></td></tr></table></figure>

<p>通过project中的字段来设置一些东西。<br>​</p>
<h4 id="Gradle-依赖"><a href="#Gradle-依赖" class="headerlink" title="Gradle 依赖"></a>Gradle 依赖</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">project.gradle.addListener(<span class="keyword">new</span> DependencyResolutionListener()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">void</span> beforeResolve(ResolvableDependencies resolvableDependencies) &#123;</span><br><span class="line">        <span class="comment">// 此处可以改变或替换依赖</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">void</span> afterResolve(ResolvableDependencies resolvableDependencies) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="Gradle-插件添加任务"><a href="#Gradle-插件添加任务" class="headerlink" title="Gradle 插件添加任务"></a>Gradle 插件添加任务</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyTaskPlugin</span> <span class="keyword">implements</span> <span class="title class_">Plugin</span>&lt;Project&gt;&#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">    <span class="type">void</span> apply(Project project) &#123;</span><br><span class="line">        project.task(...)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyProjectTask</span> <span class="keyword">extends</span> <span class="title class_">DefaultTask</span>&#123;</span><br><span class="line">    <span class="meta">@Input</span></span><br><span class="line">    String xxx</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Input</span></span><br><span class="line">    String yyy</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TaskAction</span></span><br><span class="line">    <span class="type">void</span> doPackage() &#123;</span><br><span class="line">        <span class="comment">// 执行任务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="打印task耗时Demo"><a href="#打印task耗时Demo" class="headerlink" title="打印task耗时Demo"></a>打印task耗时Demo</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> MyPlugin</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPlugin</span> <span class="keyword">implements</span> <span class="title class_">Plugin</span>&lt;Project&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> Project mProject;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">void</span> apply(Project project) &#123;</span><br><span class="line">        mProject = project;</span><br><span class="line">        <span class="comment">//注册监听，以统计任务的耗时</span></span><br><span class="line">        project.gradle.addListener(<span class="keyword">new</span> BuildTimeListener())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BuildTimeListener</span> <span class="keyword">implements</span> <span class="title class_">TaskExecutionListener</span>, BuildListener &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用来记录 task 的执行时长信息</span></span><br><span class="line">    Map&lt;String, TaskTimeInfo&gt; taskTimeMap = <span class="keyword">new</span> HashMap&lt;&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">void</span> buildStarted(Gradle gradle) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">void</span> settingsEvaluated(Settings settings) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">void</span> projectsLoaded(Gradle gradle) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">void</span> projectsEvaluated(Gradle gradle) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">void</span> buildFinished(BuildResult buildResult) &#123;</span><br><span class="line">        println <span class="string">&quot;-----------------GouAPM----------------------&quot;</span></span><br><span class="line">        println <span class="string">&quot;---------------------------------------&quot;</span></span><br><span class="line">        println <span class="string">&quot;build finished, now println all task execution time:&quot;</span></span><br><span class="line">        taskTimeMap.each&#123; k, v -&gt; println <span class="string">&quot;$&#123;k&#125;:[$&#123;v.total&#125;ms]&quot;</span> &#125;</span><br><span class="line">        println <span class="string">&quot;---------------------------------------&quot;</span></span><br><span class="line">        println <span class="string">&quot;---------------------------------------&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">void</span> beforeExecute(Task task) &#123;</span><br><span class="line">        <span class="comment">//task开始执行之前搜集task的信息</span></span><br><span class="line">        TaskTimeInfo timeInfo = <span class="keyword">new</span> TaskTimeInfo()</span><br><span class="line">        timeInfo.start = System.currentTimeMillis()</span><br><span class="line">        timeInfo.path = task.getPath()</span><br><span class="line">        taskTimeMap.put(task.getPath(), timeInfo)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">void</span> afterExecute(Task task, TaskState taskState) &#123;</span><br><span class="line">        <span class="comment">//task执行完之后，记录结束时的时间</span></span><br><span class="line">        TaskTimeInfo timeInfo = taskTimeMap.get(task.getPath())</span><br><span class="line">        timeInfo.end = System.currentTimeMillis()</span><br><span class="line">        <span class="comment">//计算该 task 的执行时长</span></span><br><span class="line">        timeInfo.total = timeInfo.end - timeInfo.start</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">TaskTimeInfo</span> &#123;</span><br><span class="line">        <span class="comment">//task执行总时长</span></span><br><span class="line">        <span class="type">long</span> total</span><br><span class="line">        String path</span><br><span class="line">        <span class="type">long</span> start</span><br><span class="line">        <span class="type">long</span> end</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 引擎对比</title>
    <url>/2021/10/19/JS%20%E5%BC%95%E6%93%8E%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th><strong>​</strong></th>
<th>JavaScriptCore</th>
<th>V8</th>
<th>Hermes</th>
<th>QuickJS</th>
</tr>
</thead>
<tbody><tr>
<td><strong>性能</strong></td>
<td>Android：性能拉胯</td>
<td>很好，开启JIT更好</td>
<td>Android：性能较好</td>
<td>与Hermes相近，在轻量级JSVM中较好，与Lua性能差不多</td>
</tr>
<tr>
<td><strong>包体积</strong></td>
<td>iOS：占用为0</td>
<td>Android： 7M，较大</td>
<td></td>
<td>体积非常小</td>
</tr>
<tr>
<td><strong>内存占用</strong></td>
<td></td>
<td>开启JIT后，内存占用变大</td>
<td>较多</td>
<td>很少，比Hermes好非常多</td>
</tr>
<tr>
<td><strong>JavaScript支持持度</strong></td>
<td>很好</td>
<td>很好</td>
<td>主要支持的是 ES6 语法，不支持 with eval() 等</td>
<td>JS 语法支持到 ES2020，Test262，很好</td>
</tr>
<tr>
<td><strong>调试能力</strong></td>
<td>iOS：支持较好；Android：支持不好</td>
<td>支持</td>
<td>支持Chrome 的调试协议</td>
<td>支持不好</td>
</tr>
<tr>
<td><strong>JIT</strong></td>
<td>iOS：只能在Safari 浏览器和WKWebView中使用；Android：JIT性能不好</td>
<td>iOS：在ios不让用；Android：支持较好，性能提升较大</td>
<td>不支持，支持直接生成&#x2F;加载字节码，只会增量加载</td>
<td>支持生成字节码</td>
</tr>
<tr>
<td><strong>snapshots</strong></td>
<td></td>
<td>支持</td>
<td></td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>Java注解</title>
    <url>/2016/03/27/Java%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h4 id="java注解"><a href="#java注解" class="headerlink" title="java注解"></a>java注解</h4><p>annotation并不直接影响代码，不会改变程序的变异方式，java编译器对于包含注解和不包含注解的代码会生成相同的虚拟机指令</p>
<h4 id="注解使用范围"><a href="#注解使用范围" class="headerlink" title="注解使用范围"></a>注解使用范围</h4><ul>
<li>类</li>
<li>成员方法</li>
<li>成员变量</li>
</ul>
<h4 id="注解使用方法"><a href="#注解使用方法" class="headerlink" title="注解使用方法"></a>注解使用方法</h4><h5 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h5><ul>
<li>注解定义0（基本定义）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时的注解MyAnnotation可使用在任何地方（此时没有限定使用范围 ）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MyAnnotation</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<ul>
<li>注解定义1（带值的注解）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation&#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时的注解MyAnnotation带有参数，注解是需要带上参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MyAnnotation(value=&quot;VALUE&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果将通过default 指定默认值，则在使用注解时，可省去value的值，此时使用默认值”DEFAULT”，如下:<br>​</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation&#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;DEFAULT&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MyAnnotation</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注解的注解，用来注解所定义的注解</span><br><span class="line">@Target  </span><br><span class="line">    枚举ElementType有ANNOTATION_TYPE, CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD,</span><br><span class="line">    PACKAGE, PARAMETER, TYPE。</span><br><span class="line">    TYPE: 适用于class，interface，enum</span><br><span class="line">    FIELD: 适用于field</span><br><span class="line">    METHOD: 适用于methond</span><br><span class="line">    PARAMETER: 适用于methond上的parameter</span><br><span class="line">    CONSTRUCTOR: 适用于constructor</span><br><span class="line">    LOCAL_VARIABLE: 适用于局部变量</span><br><span class="line">    ANNOTATION_TYPE: 适用于annotation</span><br><span class="line">    PACKAGE: 适用于package</span><br><span class="line">@Retention</span><br><span class="line">    枚举RetentionPolicy有CLASS，RUNTIME，SOURCE三种枚举值。</span><br><span class="line">    CLASS:   注解会被编译器保留在class文件中，但不会被VM读取。</span><br><span class="line">    RUNTIME: 注解会被编译器保留在class文件中，会被VM在运行时获取，因此能被反射机制读取。</span><br><span class="line">    SOURCE:  注解会被编译器丢弃。</span><br><span class="line">    默认值为CLASS。</span><br></pre></td></tr></table></figure>

<ul>
<li>注解定义2（指定注解范围）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation&#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注解定义3（指定保持状态）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation&#123;</span><br><span class="line">    String <span class="title function_">say</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当为RetentionPolicy.RUNTIME，那么问题来了，我们可以通过反射机制，在运行时来获取注解信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAnnotation</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestAnnotation</span><span class="params">()</span>&#123;</span><br><span class="line">        AnnotationHelper.register(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@MyAnnotation(say=&quot;TEST&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TestAnnotation test()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationHelper</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(Object obj)</span>&#123;<span class="comment">//此处通过反射来操作注解的对象</span></span><br><span class="line">        Class&lt;?&gt; clz=obj.getClass();</span><br><span class="line">        <span class="keyword">for</span>(Method m:clz.getDeclaredMethods())&#123;</span><br><span class="line">            MyAnnotation ma=m.getAnnotation(MyAnnotation.class);</span><br><span class="line">            <span class="keyword">if</span>(ma!=<span class="literal">null</span>)&#123;</span><br><span class="line">                System.out.println(ma.say());<span class="comment">//输出注解的say值</span></span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] agrs)</span>&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TestAnnotation</span>().test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果为：TEST</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>JupyterLab NoteBook 安装</title>
    <url>/2021/03/08/JupyterLab%20NoteBook%20%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h3 id="1-安装python3虚拟环境"><a href="#1-安装python3虚拟环境" class="headerlink" title="1. 安装python3虚拟环境"></a>1. 安装python3虚拟环境</h3><p>此步骤根据需求而定，为了不影响系统Python环境，这里建立了虚拟环境。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">python3 -m venv .p3env</span><br><span class="line">source ~/.p3env/bin/activate</span><br></pre></td></tr></table></figure>

<h3 id="2-修改pip源"><a href="#2-修改pip源" class="headerlink" title="2 修改pip源"></a>2 修改pip源</h3><p>为了能加速下载Python依赖，这里修改了pip源，这步也可根据自己的需求来。<br>可参考清华大学的pip源设置：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/">https://mirrors.tuna.tsinghua.edu.cn/help/pypi/</a></p>
<h4 id="临时设置"><a href="#临时设置" class="headerlink" title="临时设置"></a>临时设置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package</span><br></pre></td></tr></table></figure>

<h4 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>可以在 <code>~/.config/pip/pip.conf</code> 中找到pip全局配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">[<span class="string">global</span>]</span><br><span class="line"><span class="string">index-url</span> <span class="string">=</span> <span class="string">https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br></pre></td></tr></table></figure>

<p>不过在安装时，发现jupyter-lab下载还是很慢，因为jupyter-lab使用的时Piwheels源。<br>我们可以在配置里再加上aliyun的源。当然按理也可以直接设置aliyun的源为全局主源。或者继续添加其他的 <code>extra-index-url</code> 都行。这里主要演示怎么修改pip源的方法。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">[<span class="string">global</span>]</span><br><span class="line"><span class="string">index-url</span> <span class="string">=</span> <span class="string">https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br><span class="line"><span class="string">extra-index-url=https://mirrors.aliyun.com/pypi/simple</span></span><br></pre></td></tr></table></figure>

<h3 id="3-安装jupyter-lab"><a href="#3-安装jupyter-lab" class="headerlink" title="3 安装jupyter-lab"></a>3 安装jupyter-lab</h3><p>安装jupyter-lab的方法有好几种，这里使用pip： <a href="https://jupyter.org/install">https://jupyter.org/install</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install jupyterlab</span><br></pre></td></tr></table></figure>

<h3 id="4-运行jupyter-lab"><a href="#4-运行jupyter-lab" class="headerlink" title="4 运行jupyter-lab"></a>4 运行jupyter-lab</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd workspace</span><br><span class="line">jupyter-lab</span><br></pre></td></tr></table></figure>

<p>在工作目录中执行，在桌面环境下，会直接打开浏览器: <a href="http://localhost:8888/lab">http://localhost:8888/lab</a><br>在非桌面环境：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[I 2021-03-07 23:58:57.962 ServerApp] jupyterlab | extension was successfully linked.</span><br><span class="line">[I 2021-03-07 23:58:58.943 ServerApp] nbclassic | extension was successfully linked.</span><br><span class="line">[I 2021-03-07 23:58:59.044 LabApp] JupyterLab extension loaded from /home/pi/.p3env/lib/python3.7/site-packages/jupyterlab</span><br><span class="line">[I 2021-03-07 23:58:59.045 LabApp] JupyterLab application directory is /home/pi/.p3env/share/jupyter/lab</span><br><span class="line">[I 2021-03-07 23:58:59.054 ServerApp] jupyterlab | extension was successfully loaded.</span><br><span class="line">[I 2021-03-07 23:58:59.074 ServerApp] nbclassic | extension was successfully loaded.</span><br><span class="line">[I 2021-03-07 23:58:59.075 ServerApp] 启动notebooks 在本地路径: /home/user/.config/pip</span><br><span class="line">[I 2021-03-07 23:58:59.075 ServerApp] Jupyter Server 1.4.1 is running at:</span><br><span class="line">[I 2021-03-07 23:58:59.075 ServerApp] http://localhost:8888/lab</span><br><span class="line">[I 2021-03-07 23:58:59.076 ServerApp]  or http://127.0.0.1:8888/lab</span><br><span class="line">[I 2021-03-07 23:58:59.076 ServerApp] 使用control-c停止此服务器并关闭所有内核(两次跳过确认).</span><br><span class="line">[W 2021-03-07 23:58:59.089 ServerApp] 没有找到web浏览器: could not locate runnable browser.</span><br></pre></td></tr></table></figure>

<p>即使在局域网打开 <a href="http://192.168.123.30:8888/">http://192.168.2.3:8888/</a> 也没用。<br>在非桌面环境下，可使用以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jupyter-lab --no-browser --ip=0.0.0.0 </span><br></pre></td></tr></table></figure>

<p><code>--ip=x.x.x.x</code> 表示运行访问的主机IP地址， <code>0.0.0.0 </code> 表示所有主机都可访问。<br>这个时候打开<a href="http://192.168.123.30:8888/">http://192.168.2.3:8888/</a> 便可进入。</p>
<h3 id="5-配置外网环境"><a href="#5-配置外网环境" class="headerlink" title="5 配置外网环境"></a>5 配置外网环境</h3><p>在申请到公网IP，或者是运行在诸如VPS的云主机上时，需要对jupyter-lab进行配置。<br>由于公网访问，为了安全，我们对jupyter-lab设置密码。</p>
<h4 id="生成jupyter-lab配置文件"><a href="#生成jupyter-lab配置文件" class="headerlink" title="生成jupyter-lab配置文件"></a>生成jupyter-lab配置文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jupyter-lab --generate -config</span><br></pre></td></tr></table></figure>

<h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/.jupyter</span><br><span class="line">vim jupyter_lab_config.py</span><br></pre></td></tr></table></figure>

<p>可以修改以下配置:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">c.ServerApp.password=&#x27;xxxx&#x27;</span><br><span class="line">c.ServerApp.password_required = True</span><br><span class="line">c.ServerApp.port = 8888</span><br></pre></td></tr></table></figure>

<p>具体的修改项可以根据自己的需求来<br>其中鉴权方式分为2中，一种是密码，一种是服务器token，服务器token会由服务器随机生成，不建议采用这种方式。服务器token可以在 <code>~/.jupyter/jupyter_server_config.json</code> 文件末尾找到。<br>修改配置也可以通过命令行来进行，比较推荐这种方式。</p>
<h4 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jupyter-lab password</span><br></pre></td></tr></table></figure>

<h4 id="修改工作目录"><a href="#修改工作目录" class="headerlink" title="修改工作目录"></a>修改工作目录</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jupyter-lab --app-dir=&lt;Unicode&gt;</span><br></pre></td></tr></table></figure>

<h4 id="指端IP和端口号"><a href="#指端IP和端口号" class="headerlink" title="指端IP和端口号"></a>指端IP和端口号</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jupyter-lab --no-browser --ip=0.0.0.0 --port=5002</span><br></pre></td></tr></table></figure>

<p>具体由哪些方法见</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jupyter-lab --help </span><br></pre></td></tr></table></figure>

<p>为了提高安全性，可使用ssl设置https，具体修改的参数见 <code>jupyter-lab --help </code> 或者 <code>jupyter_lab_config.py</code> 文件。下面我使用的是nginx来方向代理。</p>
<h3 id="6-Nginx配置"><a href="#6-Nginx配置" class="headerlink" title="6 Nginx配置"></a>6 Nginx配置</h3><p>Nginx的使用可见文档：<a href="https://www.cwiki.cn/archives/nginx%E4%BD%BF%E7%94%A8">https://www.cwiki.cn/archives/nginx%E4%BD%BF%E7%94%A8</a></p>
<h4 id="Nginx-配置文件"><a href="#Nginx-配置文件" class="headerlink" title="Nginx 配置文件"></a>Nginx 配置文件</h4><p>这里设置的端口是8080，可以按自己的需求，比如443，设置ssl证书。由于jupyter-lab会使用到websocket，需要进行设置。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8080</span> ssl;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">8080</span> ssl;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /path/xx.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /path/xx.key;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">server_name</span> xxx.yy.zz;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8888;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-Scheme <span class="variable">$scheme</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># WebSocket support</span></span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">proxy_read_timeout</span> <span class="number">120s</span>;</span><br><span class="line">        <span class="attribute">proxy_next_upstream</span> <span class="literal">error</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="后台启动jupyter-lab"><a href="#后台启动jupyter-lab" class="headerlink" title="后台启动jupyter-lab"></a>后台启动jupyter-lab</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.p3env/bin/activate</span><br><span class="line">nohup jupyter-lab --no-browser --ip=0.0.0.0 &gt; /path/x.log 2&gt;&amp;1 &amp; # log </span><br><span class="line">nohup jupyter-lab --no-browser --ip=0.0.0.0 &gt; /dev/null 2&gt;&amp;1 &amp; # 无log </span><br></pre></td></tr></table></figure>

<p>关于后台运行可参考其他文章</p>
<h4 id="启动Nginx"><a href="#启动Nginx" class="headerlink" title="启动Nginx"></a>启动Nginx</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">已经运行了nginx</span></span><br><span class="line">sudo service nginx reload</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">没运行</span></span><br><span class="line">sudo service nginx start</span><br></pre></td></tr></table></figure>

<p>这时在外网打开 <a href="https://xxxx:8080/lab">https://xxxx:8080/lab</a>，输入密码就可以进入</p>
<p>DONE</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
  </entry>
  <entry>
    <title>Linux虚拟镜像创建分区和Grub2安装</title>
    <url>/2021/03/27/Linux%E8%99%9A%E6%8B%9F%E9%95%9C%E5%83%8F%E5%88%9B%E5%BB%BA%E5%88%86%E5%8C%BA%E5%92%8CGrub2%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h3 id="1-创建虚拟磁盘"><a href="#1-创建虚拟磁盘" class="headerlink" title="1. 创建虚拟磁盘"></a>1. 创建虚拟磁盘</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dd if=/dev/zero of=15g.img bs=1M count=15360 # 15GB</span><br></pre></td></tr></table></figure>

<h3 id="2-挂载img"><a href="#2-挂载img" class="headerlink" title="2. 挂载img"></a>2. 挂载img</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo losetup -l # 查看当前loop设备</span><br><span class="line">sudo losetup /dev/loop0 15g.img # 挂在到空闲的loop0上</span><br></pre></td></tr></table></figure>

<h3 id="3-img分区"><a href="#3-img分区" class="headerlink" title="3. img分区"></a>3. img分区</h3><p>通过fdisk对img分区<br>执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo fdisk /dev/loop0</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<p>进入提示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">欢迎使用 fdisk (util-linux 2.34)。</span><br><span class="line">更改将停留在内存中，直到您决定将更改写入磁盘。</span><br><span class="line">使用写入命令前请三思。</span><br><span class="line"></span><br><span class="line">设备不包含可识别的分区表。</span><br><span class="line">创建了一个磁盘标识符为 0x7accf69c 的新 DOS 磁盘标签。</span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)：</span><br></pre></td></tr></table></figure>

<p>输入m，查看帮助</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">命令(输入 m 获取帮助)： m</span><br><span class="line"></span><br><span class="line">帮助：</span><br><span class="line"></span><br><span class="line">  DOS (MBR)</span><br><span class="line">   a   开关 可启动 标志</span><br><span class="line">   b   编辑嵌套的 BSD 磁盘标签</span><br><span class="line">   c   开关 dos 兼容性标志</span><br><span class="line"></span><br><span class="line">  常规</span><br><span class="line">   d   删除分区</span><br><span class="line">   F   列出未分区的空闲区</span><br><span class="line">   l   列出已知分区类型</span><br><span class="line">   n   添加新分区</span><br><span class="line">   p   打印分区表</span><br><span class="line">   t   更改分区类型</span><br><span class="line">   v   检查分区表</span><br><span class="line">   i   打印某个分区的相关信息</span><br><span class="line"></span><br><span class="line">  杂项</span><br><span class="line">   m   打印此菜单</span><br><span class="line">   u   更改 显示/记录 单位</span><br><span class="line">   x   更多功能(仅限专业人员)</span><br><span class="line"></span><br><span class="line">  脚本</span><br><span class="line">   I   从 sfdisk 脚本文件加载磁盘布局</span><br><span class="line">   O   将磁盘布局转储为 sfdisk 脚本文件</span><br><span class="line"></span><br><span class="line">  保存并退出</span><br><span class="line">   w   将分区表写入磁盘并退出</span><br><span class="line">   q   退出而不保存更改</span><br><span class="line"></span><br><span class="line">  新建空磁盘标签</span><br><span class="line">   g   新建一份 GPT 分区表</span><br><span class="line">   G   新建一份空 GPT (IRIX) 分区表</span><br><span class="line">   o   新建一份的空 DOS 分区表</span><br><span class="line">   s   新建一份空 Sun 分区表</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)：</span><br></pre></td></tr></table></figure>

<p>我们主要用到的有：</p>
<ul>
<li>n   添加新分区</li>
<li>t   更改分区类型</li>
<li>a   开关 可启动 标志</li>
<li>w   将分区表写入磁盘并退出</li>
<li>q   退出而不保存更改</li>
</ul>
<p>下面首先来分区，这里主要分为3个区，boot，rootfs和swap分区</p>
<ol>
<li>boot分区分200M，</li>
<li>swap分1G</li>
<li>其余分到rootfs</li>
</ol>
<h4 id="3-1-Boot分区"><a href="#3-1-Boot分区" class="headerlink" title="3.1 Boot分区"></a>3.1 Boot分区</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">命令(输入 m 获取帮助)： n</span><br><span class="line">分区类型</span><br><span class="line">   p   主分区 (0个主分区，0个扩展分区，4空闲)</span><br><span class="line">   e   扩展分区 (逻辑分区容器)</span><br><span class="line">选择 (默认 p)： p</span><br><span class="line">分区号 (1-4, 默认  1): </span><br><span class="line">第一个扇区 (2048-31457279, 默认 2048): </span><br><span class="line">Last sector, +/-sectors or +/-size&#123;K,M,G,T,P&#125; (2048-31457279, 默认 31457279): +200M</span><br><span class="line"></span><br><span class="line">创建了一个新分区 1，类型为“Linux”，大小为 200 MiB。</span><br></pre></td></tr></table></figure>

<p>一张硬盘上，主分区最多只能有4个，加入4个主分区未将磁盘使用完，剩下的空间是无法在分配的，也就是无法使用。如果一张硬盘上想有个多分区，做多3个主分区，至少一个扩展分区，剩下的为逻辑分区。在有逻辑分区的情况下，必须有一个以上的扩展分区。逻辑分区没有数量限制。<br>一张硬盘上，分区表一般位于硬盘某柱面的0磁头1扇区。而第1个分区表（也即主分区表）总是位于（0柱面，0磁头，1扇区），剩余的分区表位置可以由主分区表依次推导出来。硬盘第一个扇区（512字节）坏死了，那么这个硬盘就没法用了。</p>
<p><code>t</code> 可修改分区类型</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">命令(输入 m 获取帮助)： t</span><br><span class="line">已选择分区 1</span><br><span class="line">Hex 代码(输入 L 列出所有代码)： L</span><br><span class="line"></span><br><span class="line"> 0  空              24  NEC DOS         81  Minix / 旧 Linu bf  Solaris        </span><br><span class="line"> 1  FAT12           27  隐藏的 NTFS Win 82  Linux swap / So c1  DRDOS/sec (FAT-</span><br><span class="line"> 2  XENIX root      39  Plan 9          83  Linux           c4  DRDOS/sec (FAT-</span><br><span class="line"> 3  XENIX usr       3c  PartitionMagic  84  OS/2 隐藏 或 In c6  DRDOS/sec (FAT-</span><br><span class="line"> 4  FAT16 &lt;32M      40  Venix 80286     85  Linux 扩展      c7  Syrinx         </span><br><span class="line"> 5  扩展            41  PPC PReP Boot   86  NTFS 卷集       da  非文件系统数据 </span><br><span class="line"> 6  FAT16           42  SFS             87  NTFS 卷集       db  CP/M / CTOS / .</span><br><span class="line"> 7  HPFS/NTFS/exFAT 4d  QNX4.x          88  Linux 纯文本    de  Dell 工具      </span><br><span class="line"> 8  AIX             4e  QNX4.x 第2部分  8e  Linux LVM       df  BootIt         </span><br><span class="line"> 9  AIX 可启动      4f  QNX4.x 第3部分  93  Amoeba          e1  DOS 访问       </span><br><span class="line"> a  OS/2 启动管理器 50  OnTrack DM      94  Amoeba BBT      e3  DOS R/O        </span><br><span class="line"> b  W95 FAT32       51  OnTrack DM6 Aux 9f  BSD/OS          e4  SpeedStor      </span><br><span class="line"> c  W95 FAT32 (LBA) 52  CP/M            a0  IBM Thinkpad 休 ea  Rufus 对齐     </span><br><span class="line"> e  W95 FAT16 (LBA) 53  OnTrack DM6 Aux a5  FreeBSD         eb  BeOS fs        </span><br><span class="line"> f  W95 扩展 (LBA)  54  OnTrackDM6      a6  OpenBSD         ee  GPT            </span><br><span class="line">10  OPUS            55  EZ-Drive        a7  NeXTSTEP        ef  EFI (FAT-12/16/</span><br><span class="line">11  隐藏的 FAT12    56  Golden Bow      a8  Darwin UFS      f0  Linux/PA-RISC  </span><br><span class="line">12  Compaq 诊断     5c  Priam Edisk     a9  NetBSD          f1  SpeedStor      </span><br><span class="line">14  隐藏的 FAT16 &lt;3 61  SpeedStor       ab  Darwin 启动     f4  SpeedStor      </span><br><span class="line">16  隐藏的 FAT16    63  GNU HURD 或 Sys af  HFS / HFS+      f2  DOS 次要       </span><br><span class="line">17  隐藏的 HPFS/NTF 64  Novell Netware  b7  BSDI fs         fb  VMware VMFS    </span><br><span class="line">18  AST 智能睡眠    65  Novell Netware  b8  BSDI swap       fc  VMware VMKCORE </span><br><span class="line">1b  隐藏的 W95 FAT3 70  DiskSecure 多启 bb  Boot Wizard 隐  fd  Linux raid 自动</span><br><span class="line">1c  隐藏的 W95 FAT3 75  PC/IX           bc  Acronis FAT32 L fe  LANstep        </span><br><span class="line">1e  隐藏的 W95 FAT1 80  旧 Minix        be  Solaris 启动    ff  BBT            </span><br><span class="line">Hex 代码(输入 L 列出所有代码)： 83</span><br><span class="line">已将分区“Linux”的类型更改为“Linux”。</span><br></pre></td></tr></table></figure>

<h4 id="3-2-rootfs分区"><a href="#3-2-rootfs分区" class="headerlink" title="3.2 rootfs分区"></a>3.2 rootfs分区</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">命令(输入 m 获取帮助)： n</span><br><span class="line">分区类型</span><br><span class="line">   p   主分区 (1个主分区，0个扩展分区，3空闲)</span><br><span class="line">   e   扩展分区 (逻辑分区容器)</span><br><span class="line">选择 (默认 p)： p</span><br><span class="line">分区号 (2-4, 默认  2): </span><br><span class="line">第一个扇区 (411648-31457279, 默认 411648): </span><br><span class="line">Last sector, +/-sectors or +/-size&#123;K,M,G,T,P&#125; (411648-31457279, 默认 31457279): +14136M</span><br><span class="line"></span><br><span class="line">创建了一个新分区 2，类型为“Linux”，大小为 13.8 GiB。</span><br></pre></td></tr></table></figure>

<h4 id="3-3-swap分区"><a href="#3-3-swap分区" class="headerlink" title="3.3 swap分区"></a>3.3 swap分区</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">命令(输入 m 获取帮助)： n</span><br><span class="line">分区类型</span><br><span class="line">   p   主分区 (2个主分区，0个扩展分区，2空闲)</span><br><span class="line">   e   扩展分区 (逻辑分区容器)</span><br><span class="line">选择 (默认 p)： p</span><br><span class="line">分区号 (3,4, 默认  3): </span><br><span class="line">第一个扇区 (29362176-31457279, 默认 29362176): </span><br><span class="line">Last sector, +/-sectors or +/-size&#123;K,M,G,T,P&#125; (29362176-31457279, 默认 31457279): </span><br><span class="line"></span><br><span class="line">创建了一个新分区 3，类型为“Linux”，大小为 1023 MiB。</span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)： t</span><br><span class="line">分区号 (1-3, 默认  3): 3</span><br><span class="line">Hex 代码(输入 L 列出所有代码)： 82</span><br><span class="line"></span><br><span class="line">已将分区“Linux”的类型更改为“Linux swap / Solaris”。</span><br></pre></td></tr></table></figure>

<h4 id="3-4-设置Boot分区可以引导标记"><a href="#3-4-设置Boot分区可以引导标记" class="headerlink" title="3.4 设置Boot分区可以引导标记"></a>3.4 设置Boot分区可以引导标记</h4><p>磁盘开头的446字节内容特指为“主引导记录”（MBR），其后是4个16字节的“磁盘分区表”（DPT），以及2字节的结束标志（55AA）。446 + 4*16 + 2 &#x3D; 512字节。<br>可引导标记就是此分区的第一个扇区最后2个字节为55AA。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">命令(输入 m 获取帮助)： a</span><br><span class="line">分区号 (1-3, 默认  3): 1</span><br><span class="line"></span><br><span class="line">分区 1 的 可启动 标志已启用。</span><br></pre></td></tr></table></figure>

<p> <code>a</code> 设置可引导标记，选择分区1。 </p>
<h4 id="3-5-保存分区记录"><a href="#3-5-保存分区记录" class="headerlink" title="3.5 保存分区记录"></a>3.5 保存分区记录</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">命令(输入 m 获取帮助)： w</span><br><span class="line">分区表已调整。</span><br><span class="line">将调用 ioctl() 来重新读分区表。</span><br><span class="line">重新读取分区表失败。: 无效的参数</span><br><span class="line"></span><br><span class="line">内核仍在使用旧分区表。新分区表将在下次重启或运行 partprobe(8) 或 kpartx(8) 后生效。</span><br></pre></td></tr></table></figure>

<p>操作完后一定记得输入 <code>w</code> 保存。 <code>重新读取分区表失败</code> 可以忽略，此时已经成功了。</p>
<h4 id="3-6-卸载设备"><a href="#3-6-卸载设备" class="headerlink" title="3.6 卸载设备"></a>3.6 卸载设备</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo losetup -d /dev/loop0 # 卸载loop设备</span><br></pre></td></tr></table></figure>

<h4 id="3-7-查看img分区情况"><a href="#3-7-查看img分区情况" class="headerlink" title="3.7 查看img分区情况"></a>3.7 查看img分区情况</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fdisk -l 15g.img     </span><br><span class="line"></span><br><span class="line">Disk 15g.img：15 GiB，16106127360 字节，31457280 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line">磁盘标签类型：dos</span><br><span class="line">磁盘标识符：0xc71ed2c6</span><br><span class="line"></span><br><span class="line">设备        启动     起点     末尾     扇区  大小 Id 类型</span><br><span class="line">15g.img1    *        2048   411647   409600  200M 83 Linux</span><br><span class="line">15g.img2           411648 29362175 28950528 13.8G 83 Linux</span><br><span class="line">15g.img3         29362176 31457279  2095104 1023M 82 Linux swap / Solaris</span><br></pre></td></tr></table></figure>

<h3 id="4-losetup挂载分区"><a href="#4-losetup挂载分区" class="headerlink" title="4. losetup挂载分区"></a>4. losetup挂载分区</h3><h4 id="4-1-将分区挂在到loop设备"><a href="#4-1-将分区挂在到loop设备" class="headerlink" title="4.1 将分区挂在到loop设备"></a>4.1 将分区挂在到loop设备</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-o （起始扇区 * 扇区大小）--sizelimit （扇区数量 * 扇区大小） 字节</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2048 x 512 = 1048576       409600 x 512 = 209715200</span>        </span><br><span class="line">sudo losetup -f -o 1048576 --sizelimit 209715200 15g.img</span><br><span class="line">sudo losetup -f -o 210763776 --sizelimit 14822670336 15g.img</span><br><span class="line">sudo losetup -f -o 15033434112 --sizelimit 1072693248 15g.img</span><br></pre></td></tr></table></figure>

<p>由于 <code>15g.img</code> 中包含3个分区，如果使用 <code>losetup</code> 挂载，需要计算每个分区的其实位置和大小。<br>起始位置和偏移通过 3.7中的信息可以查看到。<br><code>-o</code> 起点<em>512<br><code>--sizelimit</code> 扇区</em>512</p>
<h4 id="4-2-查看挂载情况"><a href="#4-2-查看挂载情况" class="headerlink" title="4.2 查看挂载情况"></a>4.2 查看挂载情况</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo losetup -l</span><br><span class="line"></span><br><span class="line">NAME         SIZELIMIT      OFFSET AUTOCLEAR RO BACK-FILE                            DIO LOG-SEC</span><br><span class="line">/dev/loop1 14822670336   210763776         0  0 /home/zauther/zos/product/zos15g.img   0     512</span><br><span class="line">/dev/loop2  1072693248 15033434112         0  0 /home/zauther/zos/product/zos15g.img   0     512</span><br><span class="line">/dev/loop0   209715200     1048576         0  0 /home/zauther/zos/product/zos15g.img   0     512</span><br></pre></td></tr></table></figure>

<p>&#x2F;dev&#x2F;loop0  对应boot分区<br>&#x2F;dev&#x2F;loop1  对应rootfs分区<br>&#x2F;dev&#x2F;loop2  对应swap分区</p>
<h4 id="4-3-格式化分区"><a href="#4-3-格式化分区" class="headerlink" title="4.3 格式化分区"></a>4.3 格式化分区</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkfs.ext4 /dev/loop0</span><br><span class="line">sudo mkfs.ext4 /dev/loop1</span><br><span class="line">sudo mkswap /dev/loop2</span><br></pre></td></tr></table></figure>

<h4 id="4-4-挂载到mnt"><a href="#4-4-挂载到mnt" class="headerlink" title="4.4 挂载到mnt"></a>4.4 挂载到mnt</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir /mnt/boot</span><br><span class="line">sudo mkdir /mnt/rootfs </span><br><span class="line">sudo mount /dev/loop0 /mnt/boot</span><br><span class="line">sudo mount /dev/loop1 /mnt/rootfs</span><br></pre></td></tr></table></figure>

<h4 id="4-5-查看挂载情况"><a href="#4-5-查看挂载情况" class="headerlink" title="4.5 查看挂载情况"></a>4.5 查看挂载情况</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">df -h</span><br><span class="line"></span><br><span class="line">文件系统        容量  已用  可用 已用% 挂载点</span><br><span class="line">/dev/loop0      178M  216K  164M    1% /mnt/boot</span><br><span class="line">/dev/loop1       14G   41M   13G    1% /mnt/rootfs</span><br></pre></td></tr></table></figure>

<h3 id="5-kpartx-挂载分区"><a href="#5-kpartx-挂载分区" class="headerlink" title="5 kpartx 挂载分区"></a>5 kpartx 挂载分区</h3><p>通过<code>losetup</code>挂载需要手动计算位置，如果虚假镜像中包含分区表，可以通过<code>kpartx</code>一次性挂载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kpartx -av 15g.img </span><br><span class="line"></span><br><span class="line">add map loop0p1 (253:2): 0 409600 linear 7:2 2048</span><br><span class="line">add map loop0p2 (253:3): 0 28950528 linear 7:2 411648</span><br><span class="line">add map loop0p3 (253:4): 0 2095104 linear 7:2 29362176</span><br></pre></td></tr></table></figure>

<p><code>-a</code> 添加镜像<br><code>-v</code> verbos信息打印<br><code>kpartx</code>会将 <code>15g.img</code> 挂载到 <code>/dev/loop0</code> 然后映射到 <code>/dev/mapper</code> 中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls /dev/mapper/       </span><br><span class="line"></span><br><span class="line">control  loop0p1  loop0p2  loop0p3</span><br></pre></td></tr></table></figure>

<p>可参考4.4 中，将<code>loop0p1  loop0p2  loop0p3</code>分别挂载到<code>/mnt</code>中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mount  /dev/mapper/loop0p1 /mnt/boot</span><br></pre></td></tr></table></figure>

<h3 id="6-安装Grub2到设备"><a href="#6-安装Grub2到设备" class="headerlink" title="6 安装Grub2到设备"></a>6 安装Grub2到设备</h3><h4 id="6-1-安装grub"><a href="#6-1-安装grub" class="headerlink" title="6.1 安装grub"></a>6.1 安装grub</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install grub2</span><br></pre></td></tr></table></figure>

<h4 id="6-2-安装Grub2到设备"><a href="#6-2-安装Grub2到设备" class="headerlink" title="6.2 安装Grub2到设备"></a>6.2 安装Grub2到设备</h4><p>强制安装到 <code>/dev/mapper/loop0p1</code> 即boot分区：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grub-install --boot-directory=/mnt/boot --force --allow-floppy /dev/mapper/loop0p1</span><br></pre></td></tr></table></figure>

<p><code>--boot-directory</code> boot分区中的目录位置，需要在boot分区中新建以下文件夹：<br>在执行完 <code>sudo mount  /dev/mapper/loop0p1 /mnt/boot</code> 后：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /mnt/boot</span><br><span class="line">sudo mkdir -p mnt/boot</span><br><span class="line">cd mnt/boot</span><br><span class="line">sudo mkdir grub</span><br></pre></td></tr></table></figure>

<p>此时路径为 <code>/mnt/boot/mnt/boot</code> 。<br>当然也可以再前面直接挂载 <code>sudo mount  /dev/mapper/loop0p1 /mnt</code></p>
<h4 id="6-3-测试"><a href="#6-3-测试" class="headerlink" title="6.3 测试"></a>6.3 测试</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">qemu-system-x86_64 -nographic -drive format=raw,file=15g.img</span><br></pre></td></tr></table></figure>

<h3 id="7-通过Docker安装Grub2"><a href="#7-通过Docker安装Grub2" class="headerlink" title="7 通过Docker安装Grub2"></a>7 通过Docker安装Grub2</h3><h4 id="7-1-安装docker"><a href="#7-1-安装docker" class="headerlink" title="7.1 安装docker"></a>7.1 安装docker</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install apt-transport-https ca-certificates curl gnupg2 software-properties-common</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">sudo add-apt-repository \                                                                      </span><br><span class="line">   &quot;deb [arch=amd64] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu \</span><br><span class="line"><span class="meta prompt_">   $</span><span class="language-bash">(lsb_release -cs) \</span></span><br><span class="line"><span class="language-bash">   stable<span class="string">&quot;</span></span></span><br><span class="line">sudo apt-get update                                                                            </span><br><span class="line">sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure>

<h4 id="7-2-添加dockerhub加速镜像"><a href="#7-2-添加dockerhub加速镜像" class="headerlink" title="7.2 添加dockerhub加速镜像"></a>7.2 添加dockerhub加速镜像</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/docker/daemon.json</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<p><code>/etc/docker/daemon.json</code> </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">    &quot;https://hub-mirror.c.163.com&quot;,</span><br><span class="line">    &quot;https://mirror.baidubce.com&quot;,</span><br><span class="line">    &quot;https://registry.docker-cn.com&quot;,</span><br><span class="line">    &quot;https://reg-mirror.qiniu.com&quot;,</span><br><span class="line">    &quot;https://dockerhub.azk8s.cn&quot;,</span><br><span class="line">    &quot;https://docker.mirrors.ustc.edu.cn&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7-3-拉取Ubuntu镜像并执行"><a href="#7-3-拉取Ubuntu镜像并执行" class="headerlink" title="7.3 拉取Ubuntu镜像并执行"></a>7.3 拉取Ubuntu镜像并执行</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker pull ubuntu</span><br><span class="line">sudo docker run --rm -it -v ~/testgrub:/root/testgrub ubuntu</span><br></pre></td></tr></table></figure>

<p><code>--rm</code> 运行完退出容器后，自动销毁并删除镜像<br><code>-it</code> 以bash交互的形式运行容器<br><code>-v ~/testgrub:/root/testgrub </code> 本地卷:容器内卷 映射<br>在容器内按第6节中的操作，会发现loop设备无法使用。</p>
<h4 id="7-4-添加设备映射"><a href="#7-4-添加设备映射" class="headerlink" title="7.4 添加设备映射"></a>7.4 添加设备映射</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/docker/daemon.json</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>添加设备映射并重启docker<br><code>/etc/docker/daemon.json</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">    &quot;https://hub-mirror.c.163.com&quot;,</span><br><span class="line">    &quot;https://mirror.baidubce.com&quot;,</span><br><span class="line">    &quot;https://registry.docker-cn.com&quot;,</span><br><span class="line">    &quot;https://reg-mirror.qiniu.com&quot;,</span><br><span class="line">    &quot;https://dockerhub.azk8s.cn&quot;,</span><br><span class="line">    &quot;https://docker.mirrors.ustc.edu.cn&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;storage-driver&quot;: &quot;devicemapper&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-卸载设备"><a href="#8-卸载设备" class="headerlink" title="8 卸载设备"></a>8 卸载设备</h3><p>在安装完grub2后，卸载设备</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo umount /mnt/boot/ </span><br><span class="line"></span><br><span class="line">sudo losetup -d /dev/loop0 # loop加载时</span><br><span class="line">sudo kpartx -dv 15g.img  # kpartx加载时 </span><br></pre></td></tr></table></figure>

<p>kpartx:<br><code>-d</code> 卸载镜像，会同时卸载<code>/dev/mapper/loop0p*</code> 和<code>/dev/loop0</code></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Grub</tag>
        <tag>引导</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8 Lambda表达式详解</title>
    <url>/2019/07/01/Java8%20Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="Lambda-表达式详解"><a href="#Lambda-表达式详解" class="headerlink" title="Lambda 表达式详解"></a>Lambda 表达式详解</h2><h3 id="1-Lambda-表达式的形式"><a href="#1-Lambda-表达式的形式" class="headerlink" title="1. Lambda 表达式的形式"></a>1. Lambda 表达式的形式</h3><ol>
<li><p>无参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">NoArgument</span> <span class="variable">noArgument</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;No Argument&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">NoArgument</span> &#123;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">noArg</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>一个参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">OneArgument</span> <span class="variable">oneArgument</span> <span class="operator">=</span> (a) -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;One Argument:&quot;</span> + a);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OneArgument</span> &#123;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">oneArg</span><span class="params">(<span class="type">int</span> one)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<span id="more"></span>

<ol start="3">
<li><p>多个参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ManyArguments</span> <span class="variable">manyArguments</span> <span class="operator">=</span> (a, b, many) -&gt; &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;ManyArguments:&quot;</span> + a + <span class="string">&quot;,&quot;</span> + b + <span class="string">&quot;,&quot;</span> + Arrays.toString(many));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ManyArguments</span> &#123;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">manyArg</span><span class="params">(<span class="type">int</span> one, <span class="type">int</span> two, <span class="type">int</span>... other)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>当lambda中的表达式只有一行时可缩写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">NoArgument</span> <span class="variable">noArgument</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;No Argument&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-Java-8中的函数接口"><a href="#2-Java-8中的函数接口" class="headerlink" title="2. Java 8中的函数接口"></a>2. Java 8中的函数接口</h3><p>java8中已经定义了很多lambda函数操作，这些是lambda表达式操作的基础，如：</p>
<p><code>BiFunction</code> <code>BinaryOperator</code> <code>Function</code> <code>Predicate</code> <code>Supplier</code> 等等，下面先简要介绍<code>BiFunction</code> <code>BinaryOperator</code> <code>Function</code> 的用法：</p>
<ul>
<li><p>BinaryOperator</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BinaryOperator&lt;Float&gt; addOperator = (a, b) -&gt; a + b;</span><br></pre></td></tr></table></figure>

<p><code>BinaryOperator&lt;T&gt;</code> 是二元操作，将2个为<code>T</code>类型的参数进行操作，返回同类型的结果<code>T</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Float result = addOperator.apply(1.f, 2.f);</span><br></pre></td></tr></table></figure>

<p><code>apply</code>表示将参数<code>1.f</code> <code>2.f</code> 输入，返回相加的结果<code>result</code></p>
</li>
<li><p>BiFunction</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BiFunction&lt;Float, Integer, Float&gt; subOperator = (Float a, Integer b) -&gt; a - b;</span><br></pre></td></tr></table></figure>

<p><code>BiFunction&lt;T, U, R&gt;</code>二元操作，其中<code>T</code> 和<code>U</code>是输入参数类型，<code>R</code>输出参数类型</p>
<p>上式表达的意思是，将<code>Float a</code>与<code>Integer b</code>相减，返回<code>Float</code>类型结果。</p>
<p>查看<code>BiFunction</code>源码，我们可以看出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BiFunction</span>&lt;T, U, R&gt; &#123;</span><br><span class="line"></span><br><span class="line">    R <span class="title function_">apply</span><span class="params">(T t, U u)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; BiFunction&lt;T, U, V&gt; <span class="title function_">andThen</span><span class="params">(Function&lt;? <span class="built_in">super</span> R, ? extends V&gt; after)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(after);</span><br><span class="line">        <span class="keyword">return</span> (T t, U u) -&gt; after.apply(apply(t, u));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@FunctionalInterface</code>定义函数式接口</p>
<p><code>apply</code>接口方法，<code>andThen</code> 采用<code>default</code>修饰的接口方法，有默认实现，其中<code>default</code>是java 8新增的。</p>
<blockquote>
<p>在 java 8 之前，接口与其实现类之间的 <strong>耦合度</strong> 太高了（<strong>tightly coupled</strong>），当需要为一个接口添加方法时，所有的实现类都必须随之修改。默认方法解决了这个问题，它可以为接口添加新的方法，而不会破坏已有的接口的实现。这在 lambda 表达式作为 java 8 语言的重要特性而出现之际，为升级旧接口且保持向后兼容（backward compatibility）提供了途径。</p>
</blockquote>
<p><code>andThen</code> 默认实现表达的意思是，在<code>BiFunction</code> 执行<code>apply</code>方法后，返回结果通过<code>Function</code>来处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BiFunction&lt;Float, Integer, Float&gt; mulOperator = (Float a, Integer b) -&gt; a * b;</span><br><span class="line">mulOperator.andThen((a) -&gt; a * a);</span><br><span class="line"><span class="type">Float</span> <span class="variable">result</span> <span class="operator">=</span> mulOperator.apply(<span class="number">1.f</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Function</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Function&lt;Float, Integer&gt; trsOperator = (a) -&gt; a.intValue();</span><br></pre></td></tr></table></figure>

<p><code>Function&lt;T, R&gt;</code>一元操作，输入<code>T</code>类型，返回<code>R</code>类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Function</span>&lt;T, R&gt; &#123;</span><br><span class="line"></span><br><span class="line">    R <span class="title function_">apply</span><span class="params">(T t)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; Function&lt;V, R&gt; <span class="title function_">compose</span><span class="params">(Function&lt;? <span class="built_in">super</span> V, ? extends T&gt; before)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(before);</span><br><span class="line">        <span class="keyword">return</span> (V v) -&gt; apply(before.apply(v));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; Function&lt;T, V&gt; <span class="title function_">andThen</span><span class="params">(Function&lt;? <span class="built_in">super</span> R, ? extends V&gt; after)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(after);</span><br><span class="line">        <span class="keyword">return</span> (T t) -&gt; after.apply(apply(t));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; Function&lt;T, T&gt; <span class="title function_">identity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> t -&gt; t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-自定义函数接口"><a href="#2-自定义函数接口" class="headerlink" title="2. 自定义函数接口"></a>2. 自定义函数接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.FunctionalInterface;</span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TestFun</span>&lt;T, R&gt; &#123;</span><br><span class="line">    R <span class="title function_">test</span><span class="params">(T t)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TestFun&lt;Integer, Integer&gt; tf = (a) -&gt; a * a;</span><br></pre></td></tr></table></figure>

<h3 id="3-函数接口与普通接口的区别"><a href="#3-函数接口与普通接口的区别" class="headerlink" title="3. 函数接口与普通接口的区别"></a>3. 函数接口与普通接口的区别</h3><p>看到这里或许有人会问，函数接口与普通接口都可以写成lambda形式，那他们之前还有什么区别呢？</p>
<p>使用<code>@FunctionalInterface</code> 时，在编译过程中，会强制检javac查这个接口是不是符合函数式接口的标准。如果不符合函数接口标准会报错。</p>
<h4 id="3-1-接口函数标准"><a href="#3-1-接口函数标准" class="headerlink" title="3.1 接口函数标准"></a>3.1 接口函数标准</h4><ul>
<li>注解的是接口类型，而不是枚举、类或其他注解</li>
<li>注解的接口有且只有一个非默认方法（可包含多个方法，但是其他的方法必须有默认实现，即default实现，但必须有一个且只有一个没有显示的方法）</li>
</ul>
<p>除了定义有<code>@FunctionalInterface</code> 的接口，编译器会处理符合的任何接口，将其定义为函数式接口，无论是否有<code>@FunctionalInterface</code> 注解。二者有交集，但不完全一样。</p>
<h4 id="3-2-示例"><a href="#3-2-示例" class="headerlink" title="3.2 示例"></a>3.2 示例</h4><ol>
<li><p>当有 <code>@FunctionalInterface</code> 修饰的接口中包含多个方法时：</p>
<p><img src="/images/image20190602173756.webp"></p>
<p><img src="/images/image20190602173923.webp"></p>
</li>
<li><p>当有 <code>@FunctionalInterface</code> 修饰的接口中，没有必须实现的方法时，即全部都有默认实现：</p>
<p><img src="/images/image20190602174033.webp"></p>
</li>
<li><p>普通类可实现有 <code>@FunctionalInterface</code> 修饰的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Age</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Age&gt;, TestFun &#123;</span><br><span class="line"> <span class="type">int</span> age;</span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">Age</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.age = age;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Age o)</span> &#123;</span><br><span class="line">     Objects.requireNonNull(o);</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">this</span>.age - o.age;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> Object <span class="title function_">test</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> age;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>对于只有一个方法的<code>Comparable</code> 接口，也可写为函数式。下面例子只是用来说明这个情况。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Comparable comparable= (Object o) -&gt;&#123;<span class="keyword">return</span> o.hashCode();&#125;;</span><br><span class="line">Comparable comparable= (o) -&gt;&#123;<span class="keyword">return</span> o.hashCode();&#125;;</span><br><span class="line">Comparable comparable= Object::hashCode;</span><br></pre></td></tr></table></figure>

<p>但是实际应用 <code>Comparable</code> 接口时，会像类 <code>Age</code> 一样应用，<code>Comparable</code> 接口的方法会与外部相关连。<code>Comparable</code> 接口的意义是比较，自然在该类的实例之间存在某种顺序。因此，就这个接口表达的意义上来说，这个接口并不是函数式接口。</p>
</li>
</ol>
<h3 id="4-Lambda表达式调用过程"><a href="#4-Lambda表达式调用过程" class="headerlink" title="4. Lambda表达式调用过程"></a>4. Lambda表达式调用过程</h3><p>lambda表达式在调用过程中有以下特点：</p>
<ol>
<li>lambda表达式引用的是值，而不是变量。</li>
<li>lambda表达式的类型依赖与上下文，经由编译器推断得到具体类型。</li>
<li>lambda表达式可用来简写匿名内部类，但是lambda表达式不等同与匿名内部类，JVM内部是通过<em>invokedynamic</em>指令来实现Lambda表达式的。</li>
</ol>
<h4 id="4-1-Lambda表达式调用分析"><a href="#4-1-Lambda表达式调用分析" class="headerlink" title="4.1 Lambda表达式调用分析"></a>4.1 Lambda表达式调用分析</h4><p>下面，我们跟随包含lambda表达式的class文件，来一步步解析其调用过程：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambda</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        TestFun&lt;Integer, Integer&gt; tf = (a) -&gt; a * a;</span><br><span class="line">        System.out.println(tf.test(<span class="number">10</span>));</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TestLambda</span>().test(<span class="keyword">new</span> <span class="title class_">OneArgument</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">oneArg</span><span class="params">(<span class="type">int</span> one)</span> &#123;</span><br><span class="line">                System.out.println(one);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TestLambda</span>().test(System.out::println);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TestLambda</span>().testSeri(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Serializable&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(OneArgument oneArgument)</span> &#123;</span><br><span class="line">        oneArgument.oneArg(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSeri</span><span class="params">(NoArgument noArgument)</span> &#123;</span><br><span class="line">        noArgument.noArg();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OneArgument</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">oneArg</span><span class="params">(<span class="type">int</span> one)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">NoArgument</span> <span class="keyword">extends</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">noArg</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TestFun</span>&lt;T, R&gt; &#123;</span><br><span class="line">        R <span class="title function_">test</span><span class="params">(T t)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.FunctionalInterface;</span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TestFun</span>&lt;T, R&gt; &#123;</span><br><span class="line">    R <span class="title function_">test</span><span class="params">(T t)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">javap -verbose TestLambda.class</span><br></pre></td></tr></table></figure>

<p>对于类<code>TestLambda</code> ,查看其生存的class文件关键内容如下（全部内容见文章未）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Code:</span><br><span class="line">      stack=<span class="number">3</span>, locals=<span class="number">2</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: invokedynamic #<span class="number">2</span>,  <span class="number">0</span>              <span class="comment">// InvokeDynamic #0:test:()Lcn/cwiki/java8/TestLambda$TestFun;</span></span><br><span class="line">         <span class="number">5</span>: astore_1</span><br><span class="line">         <span class="number">6</span>: getstatic     #<span class="number">3</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">         <span class="number">9</span>: aload_1</span><br><span class="line">        <span class="number">10</span>: bipush        <span class="number">10</span></span><br><span class="line">        <span class="number">12</span>: invokestatic  #<span class="number">4</span>                  <span class="comment">// Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span></span><br><span class="line">        <span class="number">15</span>: invokeinterface #<span class="number">5</span>,  <span class="number">2</span>            <span class="comment">// InterfaceMethod cn/cwiki/java8/TestLambda$TestFun.test:(Ljava/lang/Object;)Ljava/lang/Object;</span></span><br><span class="line">        <span class="number">20</span>: invokevirtual #<span class="number">6</span>                  <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/Object;)V</span></span><br><span class="line">        <span class="number">23</span>: <span class="keyword">new</span>           #<span class="number">7</span>                  <span class="comment">// class cn/cwiki/java8/TestLambda</span></span><br><span class="line">        <span class="number">26</span>: dup</span><br><span class="line">        <span class="number">27</span>: invokespecial #<span class="number">8</span>                  <span class="comment">// Method &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">        <span class="number">30</span>: <span class="keyword">new</span>           #<span class="number">9</span>                  <span class="comment">// class cn/cwiki/java8/TestLambda$1</span></span><br><span class="line">        <span class="number">33</span>: dup</span><br><span class="line">        <span class="number">34</span>: invokespecial #<span class="number">10</span>                 <span class="comment">// Method cn/cwiki/java8/TestLambda$1.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">        <span class="number">37</span>: invokevirtual #<span class="number">11</span>                 <span class="comment">// Method test:(Lcn/cwiki/java8/TestLambda$OneArgument;)V</span></span><br><span class="line">        <span class="number">40</span>: <span class="keyword">new</span>           #<span class="number">7</span>                  <span class="comment">// class cn/cwiki/java8/TestLambda</span></span><br><span class="line">        <span class="number">43</span>: dup</span><br><span class="line">        <span class="number">44</span>: invokespecial #<span class="number">8</span>                  <span class="comment">// Method &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">        <span class="number">47</span>: getstatic     #<span class="number">3</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">        <span class="number">50</span>: dup</span><br><span class="line">        <span class="number">51</span>: invokevirtual #<span class="number">12</span>                 <span class="comment">// Method java/lang/Object.getClass:()Ljava/lang/Class;</span></span><br><span class="line">        <span class="number">54</span>: pop</span><br><span class="line">        <span class="number">55</span>: invokedynamic #<span class="number">13</span>,  <span class="number">0</span>             <span class="comment">// InvokeDynamic #1:oneArg:(Ljava/io/PrintStream;)Lcn/cwiki/java8/TestLambda$OneArgument;</span></span><br><span class="line">        <span class="number">60</span>: invokevirtual #<span class="number">11</span>                 <span class="comment">// Method test:(Lcn/cwiki/java8/TestLambda$OneArgument;)V</span></span><br><span class="line">        <span class="number">63</span>: <span class="keyword">new</span>           #<span class="number">7</span>                  <span class="comment">// class cn/cwiki/java8/TestLambda</span></span><br><span class="line">        <span class="number">66</span>: dup</span><br><span class="line">        <span class="number">67</span>: invokespecial #<span class="number">8</span>                  <span class="comment">// Method &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">        <span class="number">70</span>: invokedynamic #<span class="number">14</span>,  <span class="number">0</span>             <span class="comment">// InvokeDynamic #2:noArg:()Lcn/cwiki/java8/TestLambda$NoArgument;</span></span><br><span class="line">        <span class="number">75</span>: invokevirtual #<span class="number">15</span>                 <span class="comment">// Method testSeri:(Lcn/cwiki/java8/TestLambda$NoArgument;)V</span></span><br><span class="line">        <span class="number">78</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure>

<p>解读class中code区内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TestFun&lt;Integer, Integer&gt; tf = (a) -&gt; a * a;</span><br><span class="line">System.out.println(tf.test(<span class="number">10</span>));</span><br></pre></td></tr></table></figure>

<p><code>0: invokedynamic #2,  0</code> 调用动态方法，即lambda表达式,invokedynami指令出现的地方都称为一个动态调用点</p>
<p><code>5: astore_1</code> 将reference类型保存到本地变量中，此处包含的即是lambda表达式的调用点<code>CallSite</code></p>
<p><code>6: getstatic     #3</code> 获取类的静态字段值，<code>#3</code> 在常量池中对于<code>public final static PrintStream out</code> 即获取<code>System</code>类中的静态变量<code>out</code></p>
<p><code>9: aload_1</code> 从局部变量中加在一个reference类型到操作数中，即<code>TestFun&lt;Integer, Integer&gt; tf = (a) -&gt; a * a</code> 的调用点</p>
<p><code>10: bipush        10</code> 将byte类型数据入栈，即将10入栈</p>
<p><code>12: invokestatic  #4</code> 调用静态方法，此处调用的是<code>Integer.valueOf</code> 将10装箱</p>
<p><code>5: invokeinterface #5,  2</code>  调用接口方法，此处即<code>TestFun.test</code></p>
<p><code>20: invokevirtual #6</code> 调用实例方法，即<code>PrintStream.println</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">TestLambda</span>().test(<span class="keyword">new</span> <span class="title class_">OneArgument</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">oneArg</span><span class="params">(<span class="type">int</span> one)</span> &#123;</span><br><span class="line">        System.out.println(one);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>23: new           #7</code> 创建一个对象，此处即 <code>TestLambda</code></p>
<p><code>26: dup</code> 复制操作数栈栈顶的值，并插入到操作数栈栈顶，此处的值为<code>TestLambda</code></p>
<p><code>27: invokespecial #8</code> 调用实例方法，专门用来调用父类方法、私有方法和实例初始化方法，此时调用的是<code>&lt;init&gt;</code> ，<code>&lt;init&gt;</code> 是jvm里类的实例方法，此处即调用 <code>TestLambda</code> 的构造方法</p>
<p><code>30: new           #9</code>   <code>33: dup</code> <code>34: invokespecial #10</code> 三条指令则是新建 <code>TestLambda$1</code> 类，并初始化，即匿名内部类<code>OneArgument</code></p>
<p><code>37: invokevirtual #11</code> 执行<code>TestLambda.test</code> ，<code>#11</code> 对于常量池中<code>TestLambda.test</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">(cn.cwiki.java8.TestLambda$OneArgument)</span>;</span><br><span class="line">    descriptor: (Lcn/cwiki/java8/TestLambda$OneArgument;)V</span><br><span class="line">    flags:</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">2</span>, args_size=<span class="number">2</span></span><br><span class="line">         <span class="number">0</span>: aload_1</span><br><span class="line">         <span class="number">1</span>: bipush        <span class="number">100</span></span><br><span class="line">         <span class="number">3</span>: invokeinterface #<span class="number">16</span>,  <span class="number">2</span>           <span class="comment">// InterfaceMethod cn/cwiki/java8/TestLambda$OneArgument.oneArg:(I)V</span></span><br><span class="line">         <span class="number">8</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">22</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">23</span>: <span class="number">8</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">9</span>     <span class="number">0</span>  <span class="built_in">this</span>   Lcn/cwiki/java8/TestLambda;</span><br><span class="line">            <span class="number">0</span>       <span class="number">9</span>     <span class="number">1</span> oneArgument   Lcn/cwiki/java8/TestLambda$OneArgument;</span><br></pre></td></tr></table></figure>

<p>查看test方法的指令：</p>
<p><code>0: aload_1</code> 从局部变量中加在一个reference类型到操作数中，此处加载的<code>OneArgument</code></p>
<p><code>1: bipush        100</code> 将byte类型数据入栈，即将100入操作数栈</p>
<p><code>3: invokeinterface #16,  2</code> 调用接口方法<code>OneArgument.oneArg</code></p>
<p><code>8: return</code> 返回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">TestLambda</span>().test(System.out::println);</span><br></pre></td></tr></table></figure>

<p><code>40: new           #7</code> <code>43: dup</code> <code>44: invokespecial #8</code> 新建<code>TestLambda</code> 并初始化</p>
<p><code>47: getstatic     #3</code> 获取<code>PrintStream</code></p>
<p><code>50: dup</code> 复制操作数栈栈顶的值，并插入到操作数栈栈顶，此处是 <code>PrintStream</code></p>
<p><code>51: invokevirtual #12</code> 引用方法<code>System.out::println</code></p>
<p><code>54: pop</code> 将操作数栈的栈顶元素出栈，即 <code>PrintStream</code></p>
<p><code>55: invokedynamic #13,  0</code> 调用动态方法，即调用lambda表达式</p>
<p><code>60: invokevirtual #11</code> 调用引用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">TestLambda</span>().testSeri(() -&gt; &#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;Serializable&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>63: new           #7</code> <code>66: dup</code> <code>67: invokespecial #8</code> <code>70: invokedynamic #14,  0</code> <code>75: invokevirtual #15</code> 新建 <code>TestLambda</code> 类，初始化，并调用lambda表达式，返回</p>
<p>从分析中可以看出，在lambda表达式处都是调用<code>invokedynamic</code> 指令：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>: invokedynamic #<span class="number">2</span>,  <span class="number">0</span></span><br><span class="line"><span class="number">55</span>: invokedynamic #<span class="number">13</span>,  <span class="number">0</span></span><br><span class="line"><span class="number">70</span>: invokedynamic #<span class="number">14</span>,  <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>而在匿名内不类处，则是调用 <code>new</code> 指令:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">30</span>: <span class="keyword">new</span>           #<span class="number">9</span> </span><br></pre></td></tr></table></figure>

<p>虽然在写法上，lambda可用来简写匿名内部类，但是两者在JVM指令上，却有很大不用。并且在匿名内部类的编译过程中会显式生成内部类。</p>
<p><img src="http://image.cwiki.cn/blog/markdown/image20190526131422.png"></p>
<p>下面我们来看一下 <code>invokedynamic</code> 指令做的事情。</p>
<h4 id="4-2-invokedynamic-指令"><a href="#4-2-invokedynamic-指令" class="headerlink" title="4.2 invokedynamic 指令"></a>4.2 <em>invokedynamic</em> 指令</h4><blockquote>
<p><em>invokedynamic</em> 指令用于调用以绑定了 <em>invokedynamic</em> 指令的调用点对象（call site object）并作为目标方法。 调用点对象是一个特殊的语法结构，当一条 <em>invokedynamic</em> 指令首次被Java虚拟机执行前，Java虚拟机将会执行一个引导方法（bootstrap method）并以这个方法的运行结果作为调用点对象。因此，每条 <em>invokedynamic</em> 指令都有独一无二的链接状态，这是它与其它方法调用指令的一个差异。</p>
</blockquote>
<p>代码中，每条 <em>invokedynamic</em> 指令出现的位置都称为一个 <strong>动态调用点</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>: invokedynamic #<span class="number">2</span>,  <span class="number">0</span></span><br><span class="line"><span class="number">55</span>: invokedynamic #<span class="number">13</span>,  <span class="number">0</span></span><br><span class="line"><span class="number">70</span>: invokedynamic #<span class="number">14</span>,  <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p><em>invokedynamic</em> 指令后面的无符号数<code>#2,0</code> <code>#13,0</code> <code>#14,  0</code> 用于构建一个指向当前类运行时常量池的索引值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BootstrapMethods:</span><br><span class="line">  <span class="number">0</span>: #<span class="number">85</span> invokestatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;</span><br><span class="line">    Method arguments:</span><br><span class="line">      #<span class="number">86</span> (Ljava/lang/Object;)Ljava/lang/Object;</span><br><span class="line">      #<span class="number">87</span> invokestatic cn/cwiki/java8/TestLambda.lambda$main$<span class="number">0</span>:(Ljava/lang/Integer;)Ljava/lang/Integer;</span><br><span class="line">      #<span class="number">88</span> (Ljava/lang/Integer;)Ljava/lang/Integer;</span><br><span class="line">  <span class="number">1</span>: #<span class="number">85</span> invokestatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;</span><br><span class="line">    Method arguments:</span><br><span class="line">      #<span class="number">101</span> (I)V</span><br><span class="line">      #<span class="number">102</span> invokevirtual java/io/PrintStream.println:(I)V</span><br><span class="line">      #<span class="number">101</span> (I)V</span><br><span class="line">  <span class="number">2</span>: #<span class="number">104</span> invokestatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;</span><br><span class="line">    Method arguments:</span><br><span class="line">      #<span class="number">105</span> ()V</span><br><span class="line">      #<span class="number">106</span> invokestatic cn/cwiki/java8/TestLambda.lambda$main$22abaf9d$<span class="number">1</span>:()V</span><br><span class="line">      #<span class="number">105</span> ()V</span><br><span class="line">      #<span class="number">107</span> <span class="number">5</span></span><br><span class="line">      #<span class="number">108</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>在class文件未，生成的对应的BootstrapMethods方法如上。</p>
<p>可以看到BootstrapMethods方法中，通过调用静态方法<code>LambdaMetafactory.metafactory</code> 来生成<code>CallSite</code> ，<code>CallSite</code>可以被视为函数对象的”工厂”，用于创建合适的功能对象。当接口继承了<code>Serializable</code> 接口时，会调用<code>LambdaMetafactory.altMetafactory</code> 后面会介绍二者的区别。</p>
<p>查看<code>LambdaMetafactory.metafactory</code>源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CallSite <span class="title function_">metafactory</span><span class="params">(MethodHandles.Lookup caller,</span></span><br><span class="line"><span class="params">                                      String invokedName,</span></span><br><span class="line"><span class="params">                                      MethodType invokedType,</span></span><br><span class="line"><span class="params">                                      MethodType samMethodType,</span></span><br><span class="line"><span class="params">                                      MethodHandle implMethod,</span></span><br><span class="line"><span class="params">                                      MethodType instantiatedMethodType)</span></span><br><span class="line"> <span class="keyword">throws</span> LambdaConversionException &#123;</span><br><span class="line"> AbstractValidatingLambdaMetafactory mf;</span><br><span class="line"> mf = <span class="keyword">new</span> <span class="title class_">InnerClassLambdaMetafactory</span>(caller, invokedType,</span><br><span class="line">                                      invokedName, samMethodType,</span><br><span class="line">                                      implMethod, instantiatedMethodType,</span><br><span class="line">                                      <span class="literal">false</span>, EMPTY_CLASS_ARRAY, EMPTY_MT_ARRAY);</span><br><span class="line"> mf.validateMetafactoryArgs();</span><br><span class="line"> <span class="keyword">return</span> mf.buildCallSite();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>MethodHandles.Lookup caller</code> 用于确定动态调用点发生在哪个类中,由JVM提供</p>
<p><code>String invokedName</code>  要实现的方法的名称（test），即InvokeDynamic 对应NameAndType，由JVM提供</p>
<p><code>MethodType invokedType</code> CallSite签名描述，包含有CallSite方法的参数、返回类型等信息，由JVM提供</p>
<p><code>MethodType samMethodType</code> 实现的方法的描述，包含实现的方法的参数、返回类型等信息</p>
<p><code>MethodHandle implMethod</code> <code>implMethod</code> 内提供了对应方法的实现</p>
<p><code>MethodType instantiatedMethodType</code> 实例化方法的描述，<code>instantiatedMethodType</code> 的参数类型是<code>samMethodType</code> 的子类型或与之相同，<code>instantiatedMethodType</code> 返回值类型是<code>samMethodType</code> 的子类型或同类型，允许强制转换。</p>
<p>我们来看一下<code>buildCallSite</code> 方法的实现过程：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">CallSite <span class="title function_">buildCallSite</span><span class="params">()</span> <span class="keyword">throws</span> LambdaConversionException &#123;</span><br><span class="line">  <span class="keyword">final</span> Class&lt;?&gt; innerClass = spinInnerClass();</span><br><span class="line">  <span class="keyword">if</span> (invokedType.parameterCount() == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">final</span> Constructor&lt;?&gt;[] ctrs = AccessController.doPrivileged(</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>&lt;Constructor&lt;?&gt;[]&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Constructor&lt;?&gt;[] run() &#123;</span><br><span class="line">          Constructor&lt;?&gt;[] ctrs = innerClass.getDeclaredConstructors();</span><br><span class="line">          <span class="keyword">if</span> (ctrs.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// The lambda implementing inner class constructor is private, set</span></span><br><span class="line">            <span class="comment">// it accessible (by us) before creating the constant sole instance</span></span><br><span class="line">            ctrs[<span class="number">0</span>].setAccessible(<span class="literal">true</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> ctrs;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="keyword">if</span> (ctrs.length != <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">LambdaConversionException</span>(<span class="string">&quot;Expected one lambda constructor for &quot;</span></span><br><span class="line">                                          + innerClass.getCanonicalName() + <span class="string">&quot;, got &quot;</span> + ctrs.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">Object</span> <span class="variable">inst</span> <span class="operator">=</span> ctrs[<span class="number">0</span>].newInstance();</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConstantCallSite</span>(MethodHandles.constant(samBase, inst));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ReflectiveOperationException e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">LambdaConversionException</span>(<span class="string">&quot;Exception instantiating lambda object&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      UNSAFE.ensureClassInitialized(innerClass);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConstantCallSite</span>(</span><br><span class="line">        MethodHandles.Lookup.IMPL_LOOKUP</span><br><span class="line">        .findStatic(innerClass, NAME_FACTORY, invokedType));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ReflectiveOperationException e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">LambdaConversionException</span>(<span class="string">&quot;Exception finding constructor&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>buildCallSite</code>第一步，调用了<code>spinInnerClass</code> ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Class&lt;?&gt; spinInnerClass() <span class="keyword">throws</span> LambdaConversionException &#123;</span><br><span class="line">  String[] interfaces;</span><br><span class="line">  <span class="type">String</span> <span class="variable">samIntf</span> <span class="operator">=</span> samBase.getName().replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">accidentallySerializable</span> <span class="operator">=</span> !isSerializable &amp;&amp; Serializable.class.isAssignableFrom(samBase);</span><br><span class="line">  <span class="keyword">if</span> (markerInterfaces.length == <span class="number">0</span>) &#123;</span><br><span class="line">    interfaces = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;samIntf&#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Assure no duplicate interfaces (ClassFormatError)</span></span><br><span class="line">    Set&lt;String&gt; itfs = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;(markerInterfaces.length + <span class="number">1</span>);</span><br><span class="line">    itfs.add(samIntf);</span><br><span class="line">    <span class="keyword">for</span> (Class&lt;?&gt; markerInterface : markerInterfaces) &#123;</span><br><span class="line">      itfs.add(markerInterface.getName().replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>));</span><br><span class="line">      accidentallySerializable |= !isSerializable &amp;&amp; Serializable.class.isAssignableFrom(markerInterface);</span><br><span class="line">    &#125;</span><br><span class="line">    interfaces = itfs.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[itfs.size()]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  cw.visit(CLASSFILE_VERSION, ACC_SUPER + ACC_FINAL + ACC_SYNTHETIC,</span><br><span class="line">           lambdaClassName, <span class="literal">null</span>,</span><br><span class="line">           JAVA_LANG_OBJECT, interfaces);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Generate final fields to be filled in by constructor</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; argDescs.length; i++) &#123;</span><br><span class="line">    <span class="type">FieldVisitor</span> <span class="variable">fv</span> <span class="operator">=</span> cw.visitField(ACC_PRIVATE + ACC_FINAL,</span><br><span class="line">                                    argNames[i],</span><br><span class="line">                                    argDescs[i],</span><br><span class="line">                                    <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    fv.visitEnd();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  generateConstructor();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (invokedType.parameterCount() != <span class="number">0</span>) &#123;</span><br><span class="line">    generateFactory();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Forward the SAM method</span></span><br><span class="line">  <span class="type">MethodVisitor</span> <span class="variable">mv</span> <span class="operator">=</span> cw.visitMethod(ACC_PUBLIC, samMethodName,</span><br><span class="line">                                    samMethodType.toMethodDescriptorString(), <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">  mv.visitAnnotation(<span class="string">&quot;Ljava/lang/invoke/LambdaForm$Hidden;&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">ForwardingMethodGenerator</span>(mv).generate(samMethodType);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Forward the bridges</span></span><br><span class="line">  <span class="keyword">if</span> (additionalBridges != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (MethodType mt : additionalBridges) &#123;</span><br><span class="line">      mv = cw.visitMethod(ACC_PUBLIC|ACC_BRIDGE, samMethodName,</span><br><span class="line">                          mt.toMethodDescriptorString(), <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">      mv.visitAnnotation(<span class="string">&quot;Ljava/lang/invoke/LambdaForm$Hidden;&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">ForwardingMethodGenerator</span>(mv).generate(mt);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isSerializable)</span><br><span class="line">    generateSerializationFriendlyMethods();</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (accidentallySerializable)</span><br><span class="line">    generateSerializationHostileMethods();</span><br><span class="line"></span><br><span class="line">  cw.visitEnd();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Define the generated class in this VM.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="type">byte</span>[] classBytes = cw.toByteArray();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If requested, dump out to a file for debugging purposes</span></span><br><span class="line">  <span class="keyword">if</span> (dumper != <span class="literal">null</span>) &#123;</span><br><span class="line">    AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>&lt;Void&gt;() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> Void <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        dumper.dumpClass(lambdaClassName, classBytes);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">FilePermission</span>(<span class="string">&quot;&lt;&lt;ALL FILES&gt;&gt;&quot;</span>, <span class="string">&quot;read, write&quot;</span>),</span><br><span class="line">    <span class="comment">// createDirectories may need it</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">PropertyPermission</span>(<span class="string">&quot;user.dir&quot;</span>, <span class="string">&quot;read&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> UNSAFE.defineAnonymousClass(targetClass, classBytes, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，CallSite的生成过程中，实际上时使用ASM框架动态构造一个匿名类，进行调用。</p>
<h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h3><p>本文介绍了Java8中的Lambda表达式写法、函数接口以及Lambda的调用过程。Lambda与匿名内部类相似，但在调用过程中略有不同，匿名内部类在编译过程中会生成对于的匿名类文件，而Lambda表达式则是在运行时，通过特有的<code>InvokeDynamic</code> java虚拟机指令来通过包含asm动态生成类的动态调用点<code>CallSite</code>进行调用</p>
<h3 id="附录：Class文件内容"><a href="#附录：Class文件内容" class="headerlink" title="附录：Class文件内容"></a>附录：Class文件内容</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Classfile /Users<span class="comment">/***/</span>out/production/classes/cn/cwiki/java8/TestLambda.<span class="keyword">class</span></span><br><span class="line">  <span class="title class_">Last</span> modified <span class="number">2019</span>-<span class="number">6</span>-<span class="number">2</span>; size <span class="number">3691</span> bytes</span><br><span class="line">  MD5 checksum 5a0ff75b4d8bc1fc577e30389b42d89c</span><br><span class="line">  Compiled from <span class="string">&quot;TestLambda.java&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cn</span>.cwiki.java8.TestLambda</span><br><span class="line">  minor version: <span class="number">0</span></span><br><span class="line">  major version: <span class="number">52</span></span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">    #<span class="number">1</span> = Methodref          #<span class="number">39.</span>#<span class="number">83</span>       <span class="comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">    #<span class="number">2</span> = InvokeDynamic      #<span class="number">0</span>:#<span class="number">89</span>        <span class="comment">// #0:test:()Lcn/cwiki/java8/TestLambda$TestFun;</span></span><br><span class="line">    #<span class="number">3</span> = Fieldref           #<span class="number">90.</span>#<span class="number">91</span>       <span class="comment">// java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">    #<span class="number">4</span> = Methodref          #<span class="number">92.</span>#<span class="number">93</span>       <span class="comment">// java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span></span><br><span class="line">    #<span class="number">5</span> = InterfaceMethodref #<span class="number">40.</span>#<span class="number">94</span>       <span class="comment">// cn/cwiki/java8/TestLambda$TestFun.test:(Ljava/lang/Object;)Ljava/lang/Object;</span></span><br><span class="line">    #<span class="number">6</span> = Methodref          #<span class="number">95.</span>#<span class="number">96</span>       <span class="comment">// java/io/PrintStream.println:(Ljava/lang/Object;)V</span></span><br><span class="line">    #<span class="number">7</span> = Class              #<span class="number">97</span>           <span class="comment">// cn/cwiki/java8/TestLambda</span></span><br><span class="line">    #<span class="number">8</span> = Methodref          #<span class="number">7.</span>#<span class="number">83</span>        <span class="comment">// cn/cwiki/java8/TestLambda.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">    #<span class="number">9</span> = Class              #<span class="number">98</span>           <span class="comment">// cn/cwiki/java8/TestLambda$1</span></span><br><span class="line">   #<span class="number">10</span> = Methodref          #<span class="number">9.</span>#<span class="number">83</span>        <span class="comment">// cn/cwiki/java8/TestLambda$1.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   #<span class="number">11</span> = Methodref          #<span class="number">7.</span>#<span class="number">99</span>        <span class="comment">// cn/cwiki/java8/TestLambda.test:(Lcn/cwiki/java8/TestLambda$OneArgument;)V</span></span><br><span class="line">   #<span class="number">12</span> = Methodref          #<span class="number">39.</span>#<span class="number">100</span>      <span class="comment">// java/lang/Object.getClass:()Ljava/lang/Class;</span></span><br><span class="line">   #<span class="number">13</span> = InvokeDynamic      #<span class="number">1</span>:#<span class="number">103</span>       <span class="comment">// #1:oneArg:(Ljava/io/PrintStream;)Lcn/cwiki/java8/TestLambda$OneArgument;</span></span><br><span class="line">   #<span class="number">14</span> = InvokeDynamic      #<span class="number">2</span>:#<span class="number">109</span>       <span class="comment">// #2:noArg:()Lcn/cwiki/java8/TestLambda$NoArgument;</span></span><br><span class="line">   #<span class="number">15</span> = Methodref          #<span class="number">7.</span>#<span class="number">110</span>       <span class="comment">// cn/cwiki/java8/TestLambda.testSeri:(Lcn/cwiki/java8/TestLambda$NoArgument;)V</span></span><br><span class="line">   #<span class="number">16</span> = InterfaceMethodref #<span class="number">45.</span>#<span class="number">111</span>      <span class="comment">// cn/cwiki/java8/TestLambda$OneArgument.oneArg:(I)V</span></span><br><span class="line">   #<span class="number">17</span> = InterfaceMethodref #<span class="number">43.</span>#<span class="number">112</span>      <span class="comment">// cn/cwiki/java8/TestLambda$NoArgument.noArg:()V</span></span><br><span class="line">   #<span class="number">18</span> = Methodref          #<span class="number">113.</span>#<span class="number">114</span>     <span class="comment">// java/lang/invoke/SerializedLambda.getImplMethodName:()Ljava/lang/String;</span></span><br><span class="line">   #<span class="number">19</span> = Methodref          #<span class="number">115.</span>#<span class="number">116</span>     <span class="comment">// java/lang/String.hashCode:()I</span></span><br><span class="line">   #<span class="number">20</span> = String             #<span class="number">76</span>           <span class="comment">// lambda$main$22abaf9d$1</span></span><br><span class="line">   #<span class="number">21</span> = Methodref          #<span class="number">115.</span>#<span class="number">117</span>     <span class="comment">// java/lang/String.equals:(Ljava/lang/Object;)Z</span></span><br><span class="line">   #<span class="number">22</span> = Methodref          #<span class="number">113.</span>#<span class="number">118</span>     <span class="comment">// java/lang/invoke/SerializedLambda.getImplMethodKind:()I</span></span><br><span class="line">   #<span class="number">23</span> = Methodref          #<span class="number">113.</span>#<span class="number">119</span>     <span class="comment">// java/lang/invoke/SerializedLambda.getFunctionalInterfaceClass:()Ljava/lang/String;</span></span><br><span class="line">   #<span class="number">24</span> = String             #<span class="number">120</span>          <span class="comment">// cn/cwiki/java8/TestLambda$NoArgument</span></span><br><span class="line">   #<span class="number">25</span> = Methodref          #<span class="number">39.</span>#<span class="number">117</span>      <span class="comment">// java/lang/Object.equals:(Ljava/lang/Object;)Z</span></span><br><span class="line">   #<span class="number">26</span> = Methodref          #<span class="number">113.</span>#<span class="number">121</span>     <span class="comment">// java/lang/invoke/SerializedLambda.getFunctionalInterfaceMethodName:()Ljava/lang/String;</span></span><br><span class="line">   #<span class="number">27</span> = String             #<span class="number">122</span>          <span class="comment">// noArg</span></span><br><span class="line">   #<span class="number">28</span> = Methodref          #<span class="number">113.</span>#<span class="number">123</span>     <span class="comment">// java/lang/invoke/SerializedLambda.getFunctionalInterfaceMethodSignature:()Ljava/lang/String;</span></span><br><span class="line">   #<span class="number">29</span> = String             #<span class="number">48</span>           <span class="comment">// ()V</span></span><br><span class="line">   #<span class="number">30</span> = Methodref          #<span class="number">113.</span>#<span class="number">124</span>     <span class="comment">// java/lang/invoke/SerializedLambda.getImplClass:()Ljava/lang/String;</span></span><br><span class="line">   #<span class="number">31</span> = String             #<span class="number">97</span>           <span class="comment">// cn/cwiki/java8/TestLambda</span></span><br><span class="line">   #<span class="number">32</span> = Methodref          #<span class="number">113.</span>#<span class="number">125</span>     <span class="comment">// java/lang/invoke/SerializedLambda.getImplMethodSignature:()Ljava/lang/String;</span></span><br><span class="line">   #<span class="number">33</span> = Class              #<span class="number">126</span>          <span class="comment">// java/lang/IllegalArgumentException</span></span><br><span class="line">   #<span class="number">34</span> = String             #<span class="number">127</span>          <span class="comment">// Invalid lambda deserialization</span></span><br><span class="line">   #<span class="number">35</span> = Methodref          #<span class="number">33.</span>#<span class="number">128</span>      <span class="comment">// java/lang/IllegalArgumentException.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span></span><br><span class="line">   #<span class="number">36</span> = String             #<span class="number">129</span>          <span class="comment">// Serializable</span></span><br><span class="line">   #<span class="number">37</span> = Methodref          #<span class="number">95.</span>#<span class="number">130</span>      <span class="comment">// java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">   #<span class="number">38</span> = Methodref          #<span class="number">92.</span>#<span class="number">131</span>      <span class="comment">// java/lang/Integer.intValue:()I</span></span><br><span class="line">   #<span class="number">39</span> = Class              #<span class="number">132</span>          <span class="comment">// java/lang/Object</span></span><br><span class="line">   #<span class="number">40</span> = Class              #<span class="number">133</span>          <span class="comment">// cn/cwiki/java8/TestLambda$TestFun</span></span><br><span class="line">   #<span class="number">41</span> = Utf8               TestFun</span><br><span class="line">   #<span class="number">42</span> = Utf8               InnerClasses</span><br><span class="line">   #<span class="number">43</span> = Class              #<span class="number">120</span>          <span class="comment">// cn/cwiki/java8/TestLambda$NoArgument</span></span><br><span class="line">   #<span class="number">44</span> = Utf8               NoArgument</span><br><span class="line">   #<span class="number">45</span> = Class              #<span class="number">134</span>          <span class="comment">// cn/cwiki/java8/TestLambda$OneArgument</span></span><br><span class="line">   #<span class="number">46</span> = Utf8               OneArgument</span><br><span class="line">   #<span class="number">47</span> = Utf8               &lt;init&gt;</span><br><span class="line">   #<span class="number">48</span> = Utf8               ()V</span><br><span class="line">   #<span class="number">49</span> = Utf8               Code</span><br><span class="line">   #<span class="number">50</span> = Utf8               LineNumberTable</span><br><span class="line">   #<span class="number">51</span> = Utf8               LocalVariableTable</span><br><span class="line">   #<span class="number">52</span> = Utf8               <span class="built_in">this</span></span><br><span class="line">   #<span class="number">53</span> = Utf8               Lcn/cwiki/java8/TestLambda;</span><br><span class="line">   #<span class="number">54</span> = Utf8               main</span><br><span class="line">   #<span class="number">55</span> = Utf8               ([Ljava/lang/String;)V</span><br><span class="line">   #<span class="number">56</span> = Utf8               args</span><br><span class="line">   #<span class="number">57</span> = Utf8               [Ljava/lang/String;</span><br><span class="line">   #<span class="number">58</span> = Utf8               tf</span><br><span class="line">   #<span class="number">59</span> = Utf8               Lcn/cwiki/java8/TestLambda$TestFun;</span><br><span class="line">   #<span class="number">60</span> = Utf8               LocalVariableTypeTable</span><br><span class="line">   #<span class="number">61</span> = Utf8               Lcn/cwiki/java8/TestLambda$TestFun&lt;Ljava/lang/Integer;Ljava/lang/Integer;&gt;;</span><br><span class="line">   #<span class="number">62</span> = Utf8               test</span><br><span class="line">   #<span class="number">63</span> = Utf8               (Lcn/cwiki/java8/TestLambda$OneArgument;)V</span><br><span class="line">   #<span class="number">64</span> = Utf8               oneArgument</span><br><span class="line">   #<span class="number">65</span> = Utf8               Lcn/cwiki/java8/TestLambda$OneArgument;</span><br><span class="line">   #<span class="number">66</span> = Utf8               testSeri</span><br><span class="line">   #<span class="number">67</span> = Utf8               (Lcn/cwiki/java8/TestLambda$NoArgument;)V</span><br><span class="line">   #<span class="number">68</span> = Utf8               noArgument</span><br><span class="line">   #<span class="number">69</span> = Utf8               Lcn/cwiki/java8/TestLambda$NoArgument;</span><br><span class="line">   #<span class="number">70</span> = Utf8               $deserializeLambda$</span><br><span class="line">   #<span class="number">71</span> = Utf8               (Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;</span><br><span class="line">   #<span class="number">72</span> = Utf8               lambda</span><br><span class="line">   #<span class="number">73</span> = Utf8               Ljava/lang/invoke/SerializedLambda;</span><br><span class="line">   #<span class="number">74</span> = Utf8               StackMapTable</span><br><span class="line">   #<span class="number">75</span> = Class              #<span class="number">135</span>          <span class="comment">// java/lang/String</span></span><br><span class="line">   #<span class="number">76</span> = Utf8               lambda$main$22abaf9d$<span class="number">1</span></span><br><span class="line">   #<span class="number">77</span> = Utf8               lambda$main$<span class="number">0</span></span><br><span class="line">   #<span class="number">78</span> = Utf8               (Ljava/lang/Integer;)Ljava/lang/Integer;</span><br><span class="line">   #<span class="number">79</span> = Utf8               a</span><br><span class="line">   #<span class="number">80</span> = Utf8               Ljava/lang/Integer;</span><br><span class="line">   #<span class="number">81</span> = Utf8               SourceFile</span><br><span class="line">   #<span class="number">82</span> = Utf8               TestLambda.java</span><br><span class="line">   #<span class="number">83</span> = NameAndType        #<span class="number">47</span>:#<span class="number">48</span>       <span class="comment">// &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   #<span class="number">84</span> = Utf8               BootstrapMethods</span><br><span class="line">   #<span class="number">85</span> = MethodHandle       #<span class="number">6</span>:#<span class="number">136</span>       <span class="comment">// invokestatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;</span></span><br><span class="line">   #<span class="number">86</span> = MethodType         #<span class="number">137</span>          <span class="comment">//  (Ljava/lang/Object;)Ljava/lang/Object;</span></span><br><span class="line">   #<span class="number">87</span> = MethodHandle       #<span class="number">6</span>:#<span class="number">138</span>       <span class="comment">// invokestatic cn/cwiki/java8/TestLambda.lambda$main$0:(Ljava/lang/Integer;)Ljava/lang/Integer;</span></span><br><span class="line">   #<span class="number">88</span> = MethodType         #<span class="number">78</span>           <span class="comment">//  (Ljava/lang/Integer;)Ljava/lang/Integer;</span></span><br><span class="line">   #<span class="number">89</span> = NameAndType        #<span class="number">62</span>:#<span class="number">139</span>      <span class="comment">// test:()Lcn/cwiki/java8/TestLambda$TestFun;</span></span><br><span class="line">   #<span class="number">90</span> = Class              #<span class="number">140</span>          <span class="comment">// java/lang/System</span></span><br><span class="line">   #<span class="number">91</span> = NameAndType        #<span class="number">141</span>:#<span class="number">142</span>     <span class="comment">// out:Ljava/io/PrintStream;</span></span><br><span class="line">   #<span class="number">92</span> = Class              #<span class="number">143</span>          <span class="comment">// java/lang/Integer</span></span><br><span class="line">   #<span class="number">93</span> = NameAndType        #<span class="number">144</span>:#<span class="number">145</span>     <span class="comment">// valueOf:(I)Ljava/lang/Integer;</span></span><br><span class="line">   #<span class="number">94</span> = NameAndType        #<span class="number">62</span>:#<span class="number">137</span>      <span class="comment">// test:(Ljava/lang/Object;)Ljava/lang/Object;</span></span><br><span class="line">   #<span class="number">95</span> = Class              #<span class="number">146</span>          <span class="comment">// java/io/PrintStream</span></span><br><span class="line">   #<span class="number">96</span> = NameAndType        #<span class="number">147</span>:#<span class="number">148</span>     <span class="comment">// println:(Ljava/lang/Object;)V</span></span><br><span class="line">   #<span class="number">97</span> = Utf8               cn/cwiki/java8/TestLambda</span><br><span class="line">   #<span class="number">98</span> = Utf8               cn/cwiki/java8/TestLambda$<span class="number">1</span></span><br><span class="line">   #<span class="number">99</span> = NameAndType        #<span class="number">62</span>:#<span class="number">63</span>       <span class="comment">// test:(Lcn/cwiki/java8/TestLambda$OneArgument;)V</span></span><br><span class="line">  #<span class="number">100</span> = NameAndType        #<span class="number">149</span>:#<span class="number">150</span>     <span class="comment">// getClass:()Ljava/lang/Class;</span></span><br><span class="line">  #<span class="number">101</span> = MethodType         #<span class="number">151</span>          <span class="comment">//  (I)V</span></span><br><span class="line">  #<span class="number">102</span> = MethodHandle       #<span class="number">5</span>:#<span class="number">152</span>       <span class="comment">// invokevirtual java/io/PrintStream.println:(I)V</span></span><br><span class="line">  #<span class="number">103</span> = NameAndType        #<span class="number">153</span>:#<span class="number">154</span>     <span class="comment">// oneArg:(Ljava/io/PrintStream;)Lcn/cwiki/java8/TestLambda$OneArgument;</span></span><br><span class="line">  #<span class="number">104</span> = MethodHandle       #<span class="number">6</span>:#<span class="number">155</span>       <span class="comment">// invokestatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;</span></span><br><span class="line">  #<span class="number">105</span> = MethodType         #<span class="number">48</span>           <span class="comment">//  ()V</span></span><br><span class="line">  #<span class="number">106</span> = MethodHandle       #<span class="number">6</span>:#<span class="number">156</span>       <span class="comment">// invokestatic cn/cwiki/java8/TestLambda.lambda$main$22abaf9d$1:()V</span></span><br><span class="line">  #<span class="number">107</span> = Integer            <span class="number">5</span></span><br><span class="line">  #<span class="number">108</span> = Integer            <span class="number">0</span></span><br><span class="line">  #<span class="number">109</span> = NameAndType        #<span class="number">122</span>:#<span class="number">157</span>     <span class="comment">// noArg:()Lcn/cwiki/java8/TestLambda$NoArgument;</span></span><br><span class="line">  #<span class="number">110</span> = NameAndType        #<span class="number">66</span>:#<span class="number">67</span>       <span class="comment">// testSeri:(Lcn/cwiki/java8/TestLambda$NoArgument;)V</span></span><br><span class="line">  #<span class="number">111</span> = NameAndType        #<span class="number">153</span>:#<span class="number">151</span>     <span class="comment">// oneArg:(I)V</span></span><br><span class="line">  #<span class="number">112</span> = NameAndType        #<span class="number">122</span>:#<span class="number">48</span>      <span class="comment">// noArg:()V</span></span><br><span class="line">  #<span class="number">113</span> = Class              #<span class="number">158</span>          <span class="comment">// java/lang/invoke/SerializedLambda</span></span><br><span class="line">  #<span class="number">114</span> = NameAndType        #<span class="number">159</span>:#<span class="number">160</span>     <span class="comment">// getImplMethodName:()Ljava/lang/String;</span></span><br><span class="line">  #<span class="number">115</span> = Class              #<span class="number">135</span>          <span class="comment">// java/lang/String</span></span><br><span class="line">  #<span class="number">116</span> = NameAndType        #<span class="number">161</span>:#<span class="number">162</span>     <span class="comment">// hashCode:()I</span></span><br><span class="line">  #<span class="number">117</span> = NameAndType        #<span class="number">163</span>:#<span class="number">164</span>     <span class="comment">// equals:(Ljava/lang/Object;)Z</span></span><br><span class="line">  #<span class="number">118</span> = NameAndType        #<span class="number">165</span>:#<span class="number">162</span>     <span class="comment">// getImplMethodKind:()I</span></span><br><span class="line">  #<span class="number">119</span> = NameAndType        #<span class="number">166</span>:#<span class="number">160</span>     <span class="comment">// getFunctionalInterfaceClass:()Ljava/lang/String;</span></span><br><span class="line">  #<span class="number">120</span> = Utf8               cn/cwiki/java8/TestLambda$NoArgument</span><br><span class="line">  #<span class="number">121</span> = NameAndType        #<span class="number">167</span>:#<span class="number">160</span>     <span class="comment">// getFunctionalInterfaceMethodName:()Ljava/lang/String;</span></span><br><span class="line">  #<span class="number">122</span> = Utf8               noArg</span><br><span class="line">  #<span class="number">123</span> = NameAndType        #<span class="number">168</span>:#<span class="number">160</span>     <span class="comment">// getFunctionalInterfaceMethodSignature:()Ljava/lang/String;</span></span><br><span class="line">  #<span class="number">124</span> = NameAndType        #<span class="number">169</span>:#<span class="number">160</span>     <span class="comment">// getImplClass:()Ljava/lang/String;</span></span><br><span class="line">  #<span class="number">125</span> = NameAndType        #<span class="number">170</span>:#<span class="number">160</span>     <span class="comment">// getImplMethodSignature:()Ljava/lang/String;</span></span><br><span class="line">  #<span class="number">126</span> = Utf8               java/lang/IllegalArgumentException</span><br><span class="line">  #<span class="number">127</span> = Utf8               Invalid lambda deserialization</span><br><span class="line">  #<span class="number">128</span> = NameAndType        #<span class="number">47</span>:#<span class="number">171</span>      <span class="comment">// &quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span></span><br><span class="line">  #<span class="number">129</span> = Utf8               Serializable</span><br><span class="line">  #<span class="number">130</span> = NameAndType        #<span class="number">147</span>:#<span class="number">171</span>     <span class="comment">// println:(Ljava/lang/String;)V</span></span><br><span class="line">  #<span class="number">131</span> = NameAndType        #<span class="number">172</span>:#<span class="number">162</span>     <span class="comment">// intValue:()I</span></span><br><span class="line">  #<span class="number">132</span> = Utf8               java/lang/Object</span><br><span class="line">  #<span class="number">133</span> = Utf8               cn/cwiki/java8/TestLambda$TestFun</span><br><span class="line">  #<span class="number">134</span> = Utf8               cn/cwiki/java8/TestLambda$OneArgument</span><br><span class="line">  #<span class="number">135</span> = Utf8               java/lang/String</span><br><span class="line">  #<span class="number">136</span> = Methodref          #<span class="number">173.</span>#<span class="number">174</span>     <span class="comment">// java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;</span></span><br><span class="line">  #<span class="number">137</span> = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;</span><br><span class="line">  #<span class="number">138</span> = Methodref          #<span class="number">7.</span>#<span class="number">175</span>       <span class="comment">// cn/cwiki/java8/TestLambda.lambda$main$0:(Ljava/lang/Integer;)Ljava/lang/Integer;</span></span><br><span class="line">  #<span class="number">139</span> = Utf8               ()Lcn/cwiki/java8/TestLambda$TestFun;</span><br><span class="line">  #<span class="number">140</span> = Utf8               java/lang/System</span><br><span class="line">  #<span class="number">141</span> = Utf8               out</span><br><span class="line">  #<span class="number">142</span> = Utf8               Ljava/io/PrintStream;</span><br><span class="line">  #<span class="number">143</span> = Utf8               java/lang/Integer</span><br><span class="line">  #<span class="number">144</span> = Utf8               valueOf</span><br><span class="line">  #<span class="number">145</span> = Utf8               (I)Ljava/lang/Integer;</span><br><span class="line">  #<span class="number">146</span> = Utf8               java/io/PrintStream</span><br><span class="line">  #<span class="number">147</span> = Utf8               println</span><br><span class="line">  #<span class="number">148</span> = Utf8               (Ljava/lang/Object;)V</span><br><span class="line">  #<span class="number">149</span> = Utf8               getClass</span><br><span class="line">  #<span class="number">150</span> = Utf8               ()Ljava/lang/Class;</span><br><span class="line">  #<span class="number">151</span> = Utf8               (I)V</span><br><span class="line">  #<span class="number">152</span> = Methodref          #<span class="number">95.</span>#<span class="number">176</span>      <span class="comment">// java/io/PrintStream.println:(I)V</span></span><br><span class="line">  #<span class="number">153</span> = Utf8               oneArg</span><br><span class="line">  #<span class="number">154</span> = Utf8               (Ljava/io/PrintStream;)Lcn/cwiki/java8/TestLambda$OneArgument;</span><br><span class="line">  #<span class="number">155</span> = Methodref          #<span class="number">173.</span>#<span class="number">177</span>     <span class="comment">// java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;</span></span><br><span class="line">  #<span class="number">156</span> = Methodref          #<span class="number">7.</span>#<span class="number">178</span>       <span class="comment">// cn/cwiki/java8/TestLambda.lambda$main$22abaf9d$1:()V</span></span><br><span class="line">  #<span class="number">157</span> = Utf8               ()Lcn/cwiki/java8/TestLambda$NoArgument;</span><br><span class="line">  #<span class="number">158</span> = Utf8               java/lang/invoke/SerializedLambda</span><br><span class="line">  #<span class="number">159</span> = Utf8               getImplMethodName</span><br><span class="line">  #<span class="number">160</span> = Utf8               ()Ljava/lang/String;</span><br><span class="line">  #<span class="number">161</span> = Utf8               hashCode</span><br><span class="line">  #<span class="number">162</span> = Utf8               ()I</span><br><span class="line">  #<span class="number">163</span> = Utf8               equals</span><br><span class="line">  #<span class="number">164</span> = Utf8               (Ljava/lang/Object;)Z</span><br><span class="line">  #<span class="number">165</span> = Utf8               getImplMethodKind</span><br><span class="line">  #<span class="number">166</span> = Utf8               getFunctionalInterfaceClass</span><br><span class="line">  #<span class="number">167</span> = Utf8               getFunctionalInterfaceMethodName</span><br><span class="line">  #<span class="number">168</span> = Utf8               getFunctionalInterfaceMethodSignature</span><br><span class="line">  #<span class="number">169</span> = Utf8               getImplClass</span><br><span class="line">  #<span class="number">170</span> = Utf8               getImplMethodSignature</span><br><span class="line">  #<span class="number">171</span> = Utf8               (Ljava/lang/String;)V</span><br><span class="line">  #<span class="number">172</span> = Utf8               intValue</span><br><span class="line">  #<span class="number">173</span> = Class              #<span class="number">179</span>          <span class="comment">// java/lang/invoke/LambdaMetafactory</span></span><br><span class="line">  #<span class="number">174</span> = NameAndType        #<span class="number">180</span>:#<span class="number">183</span>     <span class="comment">// metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;</span></span><br><span class="line">  #<span class="number">175</span> = NameAndType        #<span class="number">77</span>:#<span class="number">78</span>       <span class="comment">// lambda$main$0:(Ljava/lang/Integer;)Ljava/lang/Integer;</span></span><br><span class="line">  #<span class="number">176</span> = NameAndType        #<span class="number">147</span>:#<span class="number">151</span>     <span class="comment">// println:(I)V</span></span><br><span class="line">  #<span class="number">177</span> = NameAndType        #<span class="number">184</span>:#<span class="number">185</span>     <span class="comment">// altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;</span></span><br><span class="line">  #<span class="number">178</span> = NameAndType        #<span class="number">76</span>:#<span class="number">48</span>       <span class="comment">// lambda$main$22abaf9d$1:()V</span></span><br><span class="line">  #<span class="number">179</span> = Utf8               java/lang/invoke/LambdaMetafactory</span><br><span class="line">  #<span class="number">180</span> = Utf8               metafactory</span><br><span class="line">  #<span class="number">181</span> = Class              #<span class="number">187</span>          <span class="comment">// java/lang/invoke/MethodHandles$Lookup</span></span><br><span class="line">  #<span class="number">182</span> = Utf8               Lookup</span><br><span class="line">  #<span class="number">183</span> = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;</span><br><span class="line">  #<span class="number">184</span> = Utf8               altMetafactory</span><br><span class="line">  #<span class="number">185</span> = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;</span><br><span class="line">  #<span class="number">186</span> = Class              #<span class="number">188</span>          <span class="comment">// java/lang/invoke/MethodHandles</span></span><br><span class="line">  #<span class="number">187</span> = Utf8               java/lang/invoke/MethodHandles$Lookup</span><br><span class="line">  #<span class="number">188</span> = Utf8               java/lang/invoke/MethodHandles</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> cn.cwiki.java8.TestLambda();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">5</span>: <span class="number">0</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">5</span>     <span class="number">0</span>  <span class="built_in">this</span>   Lcn/cwiki/java8/TestLambda;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">3</span>, locals=<span class="number">2</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: invokedynamic #<span class="number">2</span>,  <span class="number">0</span>              <span class="comment">// InvokeDynamic #0:test:()Lcn/cwiki/java8/TestLambda$TestFun;</span></span><br><span class="line">         <span class="number">5</span>: astore_1</span><br><span class="line">         <span class="number">6</span>: getstatic     #<span class="number">3</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">         <span class="number">9</span>: aload_1</span><br><span class="line">        <span class="number">10</span>: bipush        <span class="number">10</span></span><br><span class="line">        <span class="number">12</span>: invokestatic  #<span class="number">4</span>                  <span class="comment">// Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span></span><br><span class="line">        <span class="number">15</span>: invokeinterface #<span class="number">5</span>,  <span class="number">2</span>            <span class="comment">// InterfaceMethod cn/cwiki/java8/TestLambda$TestFun.test:(Ljava/lang/Object;)Ljava/lang/Object;</span></span><br><span class="line">        <span class="number">20</span>: invokevirtual #<span class="number">6</span>                  <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/Object;)V</span></span><br><span class="line">        <span class="number">23</span>: <span class="keyword">new</span>           #<span class="number">7</span>                  <span class="comment">// class cn/cwiki/java8/TestLambda</span></span><br><span class="line">        <span class="number">26</span>: dup</span><br><span class="line">        <span class="number">27</span>: invokespecial #<span class="number">8</span>                  <span class="comment">// Method &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">        <span class="number">30</span>: <span class="keyword">new</span>           #<span class="number">9</span>                  <span class="comment">// class cn/cwiki/java8/TestLambda$1</span></span><br><span class="line">        <span class="number">33</span>: dup</span><br><span class="line">        <span class="number">34</span>: invokespecial #<span class="number">10</span>                 <span class="comment">// Method cn/cwiki/java8/TestLambda$1.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">        <span class="number">37</span>: invokevirtual #<span class="number">11</span>                 <span class="comment">// Method test:(Lcn/cwiki/java8/TestLambda$OneArgument;)V</span></span><br><span class="line">        <span class="number">40</span>: <span class="keyword">new</span>           #<span class="number">7</span>                  <span class="comment">// class cn/cwiki/java8/TestLambda</span></span><br><span class="line">        <span class="number">43</span>: dup</span><br><span class="line">        <span class="number">44</span>: invokespecial #<span class="number">8</span>                  <span class="comment">// Method &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">        <span class="number">47</span>: getstatic     #<span class="number">3</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">        <span class="number">50</span>: dup</span><br><span class="line">        <span class="number">51</span>: invokevirtual #<span class="number">12</span>                 <span class="comment">// Method java/lang/Object.getClass:()Ljava/lang/Class;</span></span><br><span class="line">        <span class="number">54</span>: pop</span><br><span class="line">        <span class="number">55</span>: invokedynamic #<span class="number">13</span>,  <span class="number">0</span>             <span class="comment">// InvokeDynamic #1:oneArg:(Ljava/io/PrintStream;)Lcn/cwiki/java8/TestLambda$OneArgument;</span></span><br><span class="line">        <span class="number">60</span>: invokevirtual #<span class="number">11</span>                 <span class="comment">// Method test:(Lcn/cwiki/java8/TestLambda$OneArgument;)V</span></span><br><span class="line">        <span class="number">63</span>: <span class="keyword">new</span>           #<span class="number">7</span>                  <span class="comment">// class cn/cwiki/java8/TestLambda</span></span><br><span class="line">        <span class="number">66</span>: dup</span><br><span class="line">        <span class="number">67</span>: invokespecial #<span class="number">8</span>                  <span class="comment">// Method &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">        <span class="number">70</span>: invokedynamic #<span class="number">14</span>,  <span class="number">0</span>             <span class="comment">// InvokeDynamic #2:noArg:()Lcn/cwiki/java8/TestLambda$NoArgument;</span></span><br><span class="line">        <span class="number">75</span>: invokevirtual #<span class="number">15</span>                 <span class="comment">// Method testSeri:(Lcn/cwiki/java8/TestLambda$NoArgument;)V</span></span><br><span class="line">        <span class="number">78</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">7</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">8</span>: <span class="number">6</span></span><br><span class="line">        line <span class="number">9</span>: <span class="number">23</span></span><br><span class="line">        line <span class="number">15</span>: <span class="number">40</span></span><br><span class="line">        line <span class="number">16</span>: <span class="number">63</span></span><br><span class="line">        line <span class="number">19</span>: <span class="number">78</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>      <span class="number">79</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">            <span class="number">6</span>      <span class="number">73</span>     <span class="number">1</span>    tf   Lcn/cwiki/java8/TestLambda$TestFun;</span><br><span class="line">      LocalVariableTypeTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">6</span>      <span class="number">73</span>     <span class="number">1</span>    tf   Lcn/cwiki/java8/TestLambda$TestFun&lt;Ljava/lang/Integer;Ljava/lang/Integer;&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(cn.cwiki.java8.TestLambda$OneArgument)</span>;</span><br><span class="line">    descriptor: (Lcn/cwiki/java8/TestLambda$OneArgument;)V</span><br><span class="line">    flags:</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">2</span>, args_size=<span class="number">2</span></span><br><span class="line">         <span class="number">0</span>: aload_1</span><br><span class="line">         <span class="number">1</span>: bipush        <span class="number">100</span></span><br><span class="line">         <span class="number">3</span>: invokeinterface #<span class="number">16</span>,  <span class="number">2</span>           <span class="comment">// InterfaceMethod cn/cwiki/java8/TestLambda$OneArgument.oneArg:(I)V</span></span><br><span class="line">         <span class="number">8</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">22</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">23</span>: <span class="number">8</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">9</span>     <span class="number">0</span>  <span class="built_in">this</span>   Lcn/cwiki/java8/TestLambda;</span><br><span class="line">            <span class="number">0</span>       <span class="number">9</span>     <span class="number">1</span> oneArgument   Lcn/cwiki/java8/TestLambda$OneArgument;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">testSeri</span><span class="params">(cn.cwiki.java8.TestLambda$NoArgument)</span>;</span><br><span class="line">    descriptor: (Lcn/cwiki/java8/TestLambda$NoArgument;)V</span><br><span class="line">    flags:</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">2</span>, args_size=<span class="number">2</span></span><br><span class="line">         <span class="number">0</span>: aload_1</span><br><span class="line">         <span class="number">1</span>: invokeinterface #<span class="number">17</span>,  <span class="number">1</span>           <span class="comment">// InterfaceMethod cn/cwiki/java8/TestLambda$NoArgument.noArg:()V</span></span><br><span class="line">         <span class="number">6</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">26</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">27</span>: <span class="number">6</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">7</span>     <span class="number">0</span>  <span class="built_in">this</span>   Lcn/cwiki/java8/TestLambda;</span><br><span class="line">            <span class="number">0</span>       <span class="number">7</span>     <span class="number">1</span> noArgument   Lcn/cwiki/java8/TestLambda$NoArgument;</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">&quot;TestLambda.java&quot;</span></span><br><span class="line">InnerClasses:</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> #<span class="number">41</span>= #<span class="number">40</span> of #<span class="number">7</span>; <span class="comment">//TestFun=class cn/cwiki/java8/TestLambda$TestFun of class cn/cwiki/java8/TestLambda</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> #<span class="number">44</span>= #<span class="number">43</span> of #<span class="number">7</span>; <span class="comment">//NoArgument=class cn/cwiki/java8/TestLambda$NoArgument of class cn/cwiki/java8/TestLambda</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> #<span class="number">46</span>= #<span class="number">45</span> of #<span class="number">7</span>; <span class="comment">//OneArgument=class cn/cwiki/java8/TestLambda$OneArgument of class cn/cwiki/java8/TestLambda</span></span><br><span class="line">     <span class="keyword">static</span> #<span class="number">9</span>; <span class="comment">//class cn/cwiki/java8/TestLambda$1</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> #<span class="number">182</span>= #<span class="number">181</span> of #<span class="number">186</span>; <span class="comment">//Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles</span></span><br><span class="line">BootstrapMethods:</span><br><span class="line">  <span class="number">0</span>: #<span class="number">85</span> invokestatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;</span><br><span class="line">    Method arguments:</span><br><span class="line">      #<span class="number">86</span> (Ljava/lang/Object;)Ljava/lang/Object;</span><br><span class="line">      #<span class="number">87</span> invokestatic cn/cwiki/java8/TestLambda.lambda$main$<span class="number">0</span>:(Ljava/lang/Integer;)Ljava/lang/Integer;</span><br><span class="line">      #<span class="number">88</span> (Ljava/lang/Integer;)Ljava/lang/Integer;</span><br><span class="line">  <span class="number">1</span>: #<span class="number">85</span> invokestatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;</span><br><span class="line">    Method arguments:</span><br><span class="line">      #<span class="number">101</span> (I)V</span><br><span class="line">      #<span class="number">102</span> invokevirtual java/io/PrintStream.println:(I)V</span><br><span class="line">      #<span class="number">101</span> (I)V</span><br><span class="line">  <span class="number">2</span>: #<span class="number">104</span> invokestatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;</span><br><span class="line">    Method arguments:</span><br><span class="line">      #<span class="number">105</span> ()V</span><br><span class="line">      #<span class="number">106</span> invokestatic cn/cwiki/java8/TestLambda.lambda$main$22abaf9d$<span class="number">1</span>:()V</span><br><span class="line">      #<span class="number">105</span> ()V</span><br><span class="line">      #<span class="number">107</span> <span class="number">5</span></span><br><span class="line">      #<span class="number">108</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>一些指令：</p>
<blockquote>
<p><em>invokevirtual</em> 指令用于调用对象的实例方法</p>
<p><em>invokespecial</em> 调用一些需要特殊处理的实例方法，如初始化方法、父方法和私有方法</p>
<p><em>invokestatic</em> 调用调用类方法</p>
<p><em>invokeinterface</em> 调用接口方法</p>
</blockquote>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3>]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>MAC 下 V8 Android编译指墙</title>
    <url>/2021/03/09/MAC%20%E4%B8%8B%20V8%20Android%E7%BC%96%E8%AF%91%E6%8C%87%E5%A2%99/</url>
    <content><![CDATA[<h3 id="1-V8编译历程"><a href="#1-V8编译历程" class="headerlink" title="1. V8编译历程"></a>1. V8编译历程</h3><h4 id="1-1-前言"><a href="#1-1-前言" class="headerlink" title="1.1 前言"></a>1.1 前言</h4><ol>
<li>编译V8第一步就是保证能访问Google，当然不仅仅是为了查阅资料，最最重要的是V8源码下载的需要。</li>
<li>访问 <a href="https://v8.dev/docs">https://v8.dev/docs</a> ，V8官网可查看到<a href="https://v8.dev/docs/build">Building V8 from source</a> 根据所写一步步来就好。</li>
</ol>
<h4 id="1-2-编译环境搭建"><a href="#1-2-编译环境搭建" class="headerlink" title="1.2 编译环境搭建"></a>1.2 编译环境搭建</h4><p>V8源码通过depot_tools工具来管理，首先下载这个工具，作者以<code>/Users/*/Documents/test/v8</code> 目录为工作目录。</p>
<p>由于需要访问国外站，在获取depot_tools前需要做一些不可描述的事情：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">export</span> http_proxy=<span class="string">&quot;http://127.0.0.1:8001&quot;</span>; <span class="built_in">export</span> HTTP_PROXY=<span class="string">&quot;http://127.0.0.1:8001&quot;</span>; <span class="built_in">export</span> https_proxy=<span class="string">&quot;http://127.0.0.1:8001&quot;</span>; <span class="built_in">export</span> HTTPS_PROXY=<span class="string">&quot;http://127.0.0.1:8001&quot;</span></span></span><br></pre></td></tr></table></figure>
<span id="more"></span>

<p>开启代理后，将其假如环境变量。</p>
<p>进入<code>/Users/*/Documents/test/v8</code> 目录下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://chromium.googlesource.com/chromium/tools/depot_tools.git</span></span><br></pre></td></tr></table></figure>

<p>通过git下载<code>depot_tools</code> 。</p>
<p>将工具集假如环境变量：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/Users/*/Documents/test/v8/depot_tools</span></span><br></pre></td></tr></table></figure>

<p>fetch V8源码，并同步，fetch命令即depot_tools中的命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">fetch v8</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gclient <span class="built_in">sync</span></span></span><br></pre></td></tr></table></figure>

<p>详见:<br><a href="https://commondatastorage.googleapis.com/chrome-infra-docs/flat/depot_tools/docs/html/depot_tools_tutorial.html#_setting_up">https://commondatastorage.googleapis.com/chrome-infra-docs/flat/depot_tools/docs/html/depot_tools_tutorial.html#_setting_up</a></p>
<p>作者使用Mac，Xcode 为10.2.1，Xcode在10以后不支持32位的编译，一次需要同时安装10一下的版本。</p>
<p>到苹果下载官网 <a href="https://developer.apple.com/download/more/">https://developer.apple.com/download/more/</a> 找到Xcode 10一下的版本并下载，我采用的是9.4.1。由于Xcode 体积比较大，通过浏览器下载比较慢。直接复制下载地址到下载器无法下载，需要将下载地址的请求头一并复制：打开chrome 开发者工具，点击下载后在Network可看到下载地址，右键下载地址，选择Copy-Copy as cURL，在终端粘贴后假如 <code>-O</code> 即可通过curl下载。</p>
<p>笔者将Xcode9.4.1 安装到：<code>/Applications/Xcode9.4.1/Xcode.app</code> </p>
<p>查看xcode的版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">xcode-select -p</span></span><br><span class="line">/Applications/Xcode.app/Contents/Developer</span><br></pre></td></tr></table></figure>

<p>切换xcode的版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo xcode-select -s /Applications/Xcode9.4.1/Xcode.app/Contents/Developer</span></span><br></pre></td></tr></table></figure>

<p>接下来进入编译的坑。</p>
<!-- more -->

<h4 id="1-3-编译"><a href="#1-3-编译" class="headerlink" title="1.3 编译"></a>1.3 编译</h4><h5 id="1-3-1-编译V8可执行文件"><a href="#1-3-1-编译V8可执行文件" class="headerlink" title="1.3.1 编译V8可执行文件"></a>1.3.1 编译V8可执行文件</h5><p>通过 <a href="https://v8.dev/docs/cross-compile-arm">https://v8.dev/docs/cross-compile-arm</a> 官网介绍的，在<code>.gclient</code> 中添加<code>target_os = [&#39;android&#39;]</code> ，再次执行<code>gclient sync</code> ，拉取与Android编译想过的模块，主要是NDK，如果本地有ndk，可以不用添加<code>target_os = [&#39;android&#39;]</code> ，以节约时间。即是加上，拉下来的NDK也是linux的，里面缺少很多Mac下的工具，因此，我单独自己下载的。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /Users/*/Documents/test/v8</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -O https://dl.google.com/android/repository/android-ndk-r19c-darwin-x86_64.zip</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">unzip android-ndk-r19c-darwin-x86_64.zip -d ndkr19c</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">export</span> ANDROID_NDK_HOME=`<span class="built_in">pwd</span>`/ndkr19c/android-ndk-r19c</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> v8</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> third_party/android_tools</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ln</span> -s <span class="variable">$ANDROID_NDK_HOME</span> third_party/android_tools/ndk</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ln</span> -s <span class="variable">$ANDROID_NDK_HOME</span> third_party/android_ndk</span></span><br></pre></td></tr></table></figure>

<p>通过 <code>gm</code> 工具编译</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> v8  <span class="comment"># 进入v8代码目录</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">alias</span> gm=/Users/*/Documents/test/v8/v8/tools/dev/gm.py</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gm android_arm.release.check</span></span><br></pre></td></tr></table></figure>

<p>执行完后，会生成 <code>unittests cctest d8</code> 三个执行文件，并需要电脑通过ADB连接Android手机，以测试生存文件是否存在问题。这里有个巨坑，在生成d8的最后一步，需要用到一个工具eu-strip，这个工具是linux的，导致最后一步无法通过。除此之外，在构建静态库时，需要用到llvm-ar工具，但是v8工具库里缺少这个文件，需要从ndk中拷贝一份。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /Users/*/Documents/test/v8</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span> ndkr19c/android-ndk-r19c/toolchains/llvm/prebuilt/darwin-x86_64/bin/llvm-ar v8/third_party/llvm-build/Release+Asserts/bin/</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span> ndkr19c/android-ndk-r19c/toolchains/llvm/prebuilt/darwin-x86_64/bin/ld.lld v8/third_party/llvm-build/Release+Asserts/bin/</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mv</span> v8/buildtools/third_party/eu-strip/bin/eu-strip v8/buildtools/third_party/eu-strip/bin/eu-strip.bak</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span> ndkr19c/android-ndk-r19c/toolchains/llvm/prebuilt/darwin-x86_64/bin/llvm-strip v8/buildtools/third_party/eu-strip/bin/eu-strip</span></span><br></pre></td></tr></table></figure>

<p>在链接过程中可能会报<code>clang: error: invalid linker name in argument &#39;-fuse-ld=lld&#39;</code> 这是因为缺少<code>ld.lld</code> 文件。</p>
<p>编译完成后，会自动通过adb下载到手机做测试。如果不想测试执行<code>gm android_arm.release</code> ，另外<code>gm</code> 命令会自动上传编译报告给google，如果link完后，提示<code>ninjalog_uploader_wrapper.py</code> 相关的错误可能时代理没设置，不过没关系，前面的那步一脚编译完成。</p>
<p>如果需要测试v8编译是否成功，可参考官方文档 <a href="https://v8.dev/docs/cross-compile-arm">https://v8.dev/docs/cross-compile-arm</a> 自己上传d8及需要的文件至手机测试。</p>
<p>如果自定测试提示adb未找到，需要将adb添加到下面目录（v8下载的android_tools中的adb为linux版的）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/Users/*/Documents/test/v8/v8/third_party/android_tools/sdk/platform-tools/adb</span><br></pre></td></tr></table></figure>

<p>如果不行，直接改代码</p>
<p> &#x2F;Users&#x2F;*&#x2F;Documents&#x2F;test&#x2F;v8&#x2F;v8&#x2F;third_party&#x2F;catapult&#x2F;devil&#x2F;devil&#x2F;android&#x2F;sdk&#x2F;adb_wrapper.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_FindAdb</span>():</span><br><span class="line">    <span class="keyword">return</span> os.path.join(<span class="string">&quot;/Users/*/Documents/test/v8/v8/third_party/android_tools/sdk/platform-tools/adb&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>自己简单测一下；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell &#x27;mkdir -p /data/local/tmp/v8/bin&#x27;</span><br><span class="line">adb push out.gn/arm.release/d8 /data/local/tmp/v8/bin</span><br><span class="line">adb push out.gn/arm.release/icudtl.dat /data/local/tmp/v8/bin</span><br><span class="line">adb push out.gn/arm.release/natives_blob.bin /data/local/tmp/v8/bin</span><br><span class="line">adb push out.gn/arm.release/snapshot_blob.bin /data/local/tmp/v8/bin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rebuffat:~/src/v8$ adb shell</span><br><span class="line">bullhead:/ $ cd /data/local/tmp/v8/bin</span><br><span class="line">bullhead:/data/local/tmp/v8/bin $ ls</span><br><span class="line">v8 natives_blob.bin snapshot_blob.bin</span><br><span class="line">bullhead:/data/local/tmp/v8/bin $ ./d8</span><br><span class="line">V8 version 5.8.0 (candidate)</span><br><span class="line"><span class="meta prompt_">d8&gt; </span><span class="language-bash"><span class="string">&#x27;w00t!&#x27;</span></span></span><br><span class="line">&quot;w00t!&quot;</span><br><span class="line"><span class="meta prompt_">d8&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="1-3-2-编译配置"><a href="#1-3-2-编译配置" class="headerlink" title="1.3.2 编译配置"></a>1.3.2 编译配置</h5><p>可按自己的需求修改编译配置，通过v8gen.py工具可查看内置默认编译配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /Users/*/Documents/test/v8/v8</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tools/dev/v8gen.py list</span></span><br><span class="line">android.arm.debug</span><br><span class="line">android.arm.optdebug</span><br><span class="line">android.arm.release</span><br><span class="line">arm.debug</span><br><span class="line">arm.optdebug</span><br><span class="line">arm.release</span><br><span class="line">arm64.debug</span><br><span class="line">arm64.optdebug</span><br><span class="line">arm64.release</span><br><span class="line">ia32.debug</span><br><span class="line">ia32.optdebug</span><br><span class="line">ia32.release</span><br><span class="line">mips64el.debug</span><br><span class="line">mips64el.optdebug</span><br><span class="line">mips64el.release</span><br><span class="line">mipsel.debug</span><br><span class="line">mipsel.optdebug</span><br><span class="line">mipsel.release</span><br><span class="line">ppc64.debug</span><br><span class="line">ppc64.debug.sim</span><br><span class="line">ppc64.optdebug</span><br><span class="line">ppc64.optdebug.sim</span><br><span class="line">ppc64.release</span><br><span class="line">ppc64.release.sim</span><br><span class="line">s390x.debug</span><br><span class="line">s390x.debug.sim</span><br><span class="line">s390x.optdebug</span><br><span class="line">s390x.optdebug.sim</span><br><span class="line">s390x.release</span><br><span class="line">s390x.release.sim</span><br><span class="line">x64.debug</span><br><span class="line">x64.optdebug</span><br><span class="line">x64.release</span><br><span class="line">x64.release.sample</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tools/dev/v8gen.py arm.release</span></span><br></pre></td></tr></table></figure>

<p>通过<code>tools/dev/v8gen.py arm.release</code> 命令可以生存对应的问价，文件在 <code>out.gn</code> 目录内，通过<code>gm</code> 生成的文件在 <code>out</code> 内。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">is_component_build = false</span><br><span class="line">is_debug = false</span><br><span class="line">target_cpu = &quot;arm&quot;</span><br><span class="line">v8_target_cpu = &quot;arm&quot;</span><br><span class="line">target_os = &quot;android&quot;</span><br><span class="line">use_goma = false</span><br><span class="line">goma_dir = &quot;None&quot;</span><br><span class="line">v8_enable_backtrace = true</span><br><span class="line">v8_enable_disassembler = true</span><br><span class="line">v8_enable_object_print = true</span><br><span class="line">v8_enable_verify_heap = true</span><br><span class="line">v8_use_snapshot=true</span><br><span class="line">v8_enable_embedded_builtins=true </span><br><span class="line">is_official_build=true </span><br><span class="line">use_thin_lto=false </span><br><span class="line">v8_enable_i18n_support=true</span><br><span class="line">symbol_level=0</span><br><span class="line">v8_android_log_stdout=true</span><br></pre></td></tr></table></figure>

<p><code>is_component_build</code> true 生存动态库，false 生成可执行文件</p>
<p><code>v8_static_library=true</code> 生成静态库</p>
<p><code>v8_enable_i18n_support=false</code> 是否支持i18n</p>
<h5 id="1-3-3-编译静态库"><a href="#1-3-3-编译静态库" class="headerlink" title="1.3.3 编译静态库"></a>1.3.3 编译静态库</h5><p>出了通过配置编译外，还可以自己通过llvm-ar 命令来生存静态库。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /Users/*/Documents/test/v8/v8/out/android_arm.release/obj</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">export</span> armar=<span class="variable">$ANDROID_NDK_HOME</span>/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/arm-linux-androideabi/bin/ar</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="variable">$armar</span> r libv8all.a  v8_libsampler/*.o v8_libplatform/*.o v8_libbase/*.o v8_external_snapshot/*.o v8_compiler/*.o v8_base_without_compiler/*.o torque_generated_definitions/*.o third_party/icu/icui18n/*.o third_party/icu/icuuc/*.o third_party/inspector_protocol/encoding/*.o buildtools/third_party/libc++/libc++/*.o buildtools/third_party/libc++abi/libc++abi/*.o</span> </span><br></pre></td></tr></table></figure>

<p>得到的libv8all.a 即为链接了所有.o 的静态库。</p>
<h5 id="1-3-4-其他问题"><a href="#1-3-4-其他问题" class="headerlink" title="1.3.4 其他问题"></a>1.3.4 其他问题</h5><ol>
<li><p><code>“stddef.h: No such file or directory”</code></p>
<p>这个是clang++ 的一个bug，在拷贝llvm-ar时，确保 <code>v8/third_party/llvm-build/Release+Asserts/bin/ </code> 目录中的clang++ 没被替换，用v8自己的。</p>
</li>
<li><p>在Android项目中引入v8静态库做开发时，出现 <code>std::__ndk1::</code> 想关错误</p>
<blockquote>
<ol>
<li>NDK的libc++的C++11命名空间为std::__ndk1</li>
<li>NDK的gnustl的C++11命名空间为std</li>
<li>安卓系统的libc++的C++11命名空间为std::__1</li>
</ol>
</blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/31025055">https://zhuanlan.zhihu.com/p/31025055</a></p>
<p>需要将obj下的libc++相关的库一起引入，通过ar命令打包时，需要一起打包。</p>
</li>
<li><p>发现v8下的内容被玩坏了？</p>
<p>删掉对应内容的git仓库，<code> gclient sync</code> 一下 。<code>gclient sync</code> 提示其他库有内容未提交，删掉其他库，一起<code>gclient sync</code> 😋。</p>
</li>
<li><p>怎么都不行？</p>
<p><strong>请使用ubuntu!!!</strong></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>V8</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 使用</title>
    <url>/2021/03/04/Nginx%20%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="Nginx安装和使用"><a href="#Nginx安装和使用" class="headerlink" title="Nginx安装和使用"></a>Nginx安装和使用</h3><h4 id="Ubuntu-安装Nginx"><a href="#Ubuntu-安装Nginx" class="headerlink" title="Ubuntu 安装Nginx"></a>Ubuntu 安装Nginx</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure>

<h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><p>nginx 所有服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service nginx</span><br><span class="line">Usage: nginx &#123;start|stop|restart|reload|force-reload|status|configtest|rotate|upgrade&#125;</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service nginx start</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>停止nginx服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service nginx stop</span><br></pre></td></tr></table></figure>

<p>重新加载配置（修改完配置后执行）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service nginx reload</span><br></pre></td></tr></table></figure>

<p>查看nginx状态，这里会打印出nginx conf中需要优化的地方</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service nginx status</span><br><span class="line"></span><br><span class="line">● nginx.service - A high performance web server and a reverse proxy server</span><br><span class="line">     Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled)</span><br><span class="line">     Active: active (running) since Wed 2021-03-03 00:56:38 UTC; 1 day 13h ago</span><br><span class="line">       Docs: man:nginx(8)</span><br><span class="line">    Process: 62271 ExecReload=/usr/sbin/nginx -g daemon on; master_process on; -s reload (code=exited, status=0/SUCCESS)</span><br><span class="line">   Main PID: 1531 (nginx)</span><br><span class="line">      Tasks: 3 (limit: 1092)</span><br><span class="line">     Memory: 15.8M</span><br><span class="line">     CGroup: /system.slice/nginx.service</span><br><span class="line">             ├─ 1531 nginx: master process /usr/sbin/nginx -g daemon on; master_process on;</span><br><span class="line">             ├─62272 nginx: worker process</span><br><span class="line">             └─62275 nginx: worker process</span><br></pre></td></tr></table></figure>

<p>比如这种提示：<br> nginx: [warn] the “ssl” directive is deprecated, use the “listen … ssl”<br>ssl 这个配置已经失效，可采用</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">  <span class="attribute">listen</span> [::]:<span class="number">443</span> ssl;</span><br><span class="line">  <span class="attribute">ssl_certificate</span> /etc/nginx/cert/1_www.xxx.cn_bundle.crt;</span><br><span class="line">  <span class="attribute">ssl_certificate_key</span> /etc/nginx/cert/2_www.xxx.cn.key;</span><br><span class="line">  <span class="attribute">ssl_protocols</span>         TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">  <span class="attribute">ssl_ciphers</span>           HIGH:!aNULL:!MD5;</span><br><span class="line">  <span class="attribute">server_name</span> www.xxx.cn;</span><br><span class="line">  <span class="attribute">client_max_body_size</span> <span class="number">1024m</span>;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">      ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之后重启</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure>

<h3 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h3><h4 id="nginx-下载服务配置"><a href="#nginx-下载服务配置" class="headerlink" title="nginx 下载服务配置"></a>nginx 下载服务配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location /downloads &#123;  # url</span><br><span class="line">    alias   /tmp;  # 下载目录</span><br><span class="line">    autoindex on;</span><br><span class="line">    autoindex_exact_size on;</span><br><span class="line">    autoindex_localtime on;</span><br><span class="line">    charset utf-8,gbk;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="nginx-内置变量"><a href="#nginx-内置变量" class="headerlink" title="nginx 内置变量"></a>nginx 内置变量</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">args ：这个变量等于请求行中的参数，同<span class="variable">$query_string</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">content_length ： 请求头中的Content-length字段。</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">content_type ： 请求头中的Content-Type字段。</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">document_root ： 当前请求在root指令中指定的值。</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">host ： 请求主机头字段，否则为服务器名称。</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">http_user_agent ： 客户端agent信息</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">http_cookie ： 客户端cookie信息</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">limit_rate ： 这个变量可以限制连接速率。</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">request_method ： 客户端请求的动作，通常为GET或POST。</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">remote_addr ： 客户端的IP地址。</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">remote_port ： 客户端的端口。</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">remote_user ： 已经经过Auth Basic Module验证的用户名。</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">request_filename ： 当前请求的文件路径，由root或<span class="built_in">alias</span>指令与URI请求生成。</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">scheme ： HTTP方法（如http，https）。</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">server_protocol ： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">server_addr ： 服务器地址，在完成一次系统调用后可以确定这个值。</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">server_name ： 服务器名称。</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">server_port ： 请求到达服务器的端口号。</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">request_uri ： 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">uri ： 不带请求参数的当前URI，<span class="variable">$uri</span>不包含主机名，如”/foo/bar.html”。</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">document_uri ： 与<span class="variable">$uri</span>相同。</span></span><br></pre></td></tr></table></figure>

<h4 id="http跳转https"><a href="#http跳转https" class="headerlink" title="http跳转https"></a>http跳转https</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span> default_server;</span><br><span class="line">        <span class="attribute">listen</span> [::]:<span class="number">80</span> default_server;</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 直接重定向</span></span><br><span class="line">       <span class="comment"># rewrite ^/(.*) https://www.xxx.cn/$1 permanent;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># SSL configuration</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># listen 443 ssl default_server;</span></span><br><span class="line">        <span class="comment"># listen [::]:443 ssl default_server;</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># Note: You should disable gzip for SSL traffic.</span></span><br><span class="line">        <span class="comment"># See: https://bugs.debian.org/773332</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># Read up on ssl_ciphers to ensure a secure configuration.</span></span><br><span class="line">        <span class="comment"># See: https://bugs.debian.org/765782</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># Self signed certs generated by the ssl-cert package</span></span><br><span class="line">        <span class="comment"># Don&#x27;t use them in a production server!</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># include snippets/snakeoil.conf;</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">root</span> /var/www/html;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Add index.php to the list if you are using PHP</span></span><br><span class="line">        <span class="attribute">index</span> index.html index.htm index.nginx-debian.html;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">server_name</span> _;</span><br><span class="line">                <span class="comment"># 错误也跳转</span></span><br><span class="line">        <span class="attribute">error_page</span>  <span class="number">404</span> https://www.xxx.cn/;</span><br><span class="line">                <span class="comment"># 301 重定向</span></span><br><span class="line">        <span class="attribute">return</span> <span class="number">301</span> https://www.xxx.cn/<span class="variable">$request_uri</span>;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">                <span class="comment"># First attempt to serve request as file, then</span></span><br><span class="line">                <span class="comment"># as directory, then fall back to displaying a 404.</span></span><br><span class="line">                <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="nginx配置静态文件"><a href="#nginx配置静态文件" class="headerlink" title="nginx配置静态文件"></a>nginx配置静态文件</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">  <span class="attribute">listen</span> [::]:<span class="number">443</span> ssl;</span><br><span class="line">  <span class="attribute">ssl_certificate</span> /etc/nginx/cert/1_www.xxx.cn_bundle.crt;</span><br><span class="line">  <span class="attribute">ssl_certificate_key</span> /etc/nginx/cert/2_www.xxx.cn.key;</span><br><span class="line">  <span class="attribute">ssl_protocols</span>         TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">  <span class="attribute">ssl_ciphers</span>           HIGH:!aNULL:!MD5;</span><br><span class="line">  <span class="attribute">server_name</span> www.xxx.cn;</span><br><span class="line">  <span class="attribute">client_max_body_size</span> <span class="number">1024m</span>;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> /ads.txt &#123;</span><br><span class="line">      <span class="comment"># 目录</span></span><br><span class="line">    <span class="attribute">root</span> /var/www/html;</span><br><span class="line">    <span class="comment"># 文件</span></span><br><span class="line">    <span class="attribute">index</span> ads.txt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="直接暴露目录"><a href="#直接暴露目录" class="headerlink" title="直接暴露目录"></a>直接暴露目录</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">    <span class="comment"># 指定目录</span></span><br><span class="line">    <span class="attribute">root</span> /var/www/html;</span><br><span class="line">    <span class="comment"># 自动索引</span></span><br><span class="line">    <span class="attribute">autoindex</span> <span class="literal">on</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>U-Boot 安装到树莓派</title>
    <url>/2021/03/29/U-Boot%20%E5%AE%89%E8%A3%85%E5%88%B0%E6%A0%91%E8%8E%93%E6%B4%BE/</url>
    <content><![CDATA[<h3 id="SD卡分区"><a href="#SD卡分区" class="headerlink" title="SD卡分区"></a>SD卡分区</h3><p>将SD卡分区，通过fdisk命令分区为2个区，100M的boot区，剩下的rootfs区，boot区<br>boot区格式化为fat格式，rootfs格式化为ext4<br>将boot挂在到&#x2F;mnt&#x2F;boot位置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkfs.vfat /dev/sdb1</span><br><span class="line">sudo mount /dev/sdb1 /mnt/boot</span><br></pre></td></tr></table></figure>

<h3 id="准备树莓派Boot文件"><a href="#准备树莓派Boot文件" class="headerlink" title="准备树莓派Boot文件"></a>准备树莓派Boot文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/raspberrypi/firmware.git</span><br><span class="line">cd firmware</span><br><span class="line">cp -R boot/* /mnt/boot</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<p>树莓派boot文件介绍</p>
<h4 id="bootcode-bin"><a href="#bootcode-bin" class="headerlink" title="bootcode.bin"></a>bootcode.bin</h4><p>这是引导加载程序，由SoC在引导时加载，它执行一些非常基本的设置，然后加载其中一个<code>start*.elf</code>文件。<code>bootcode.bin</code>在Raspberry Pi 4上未使用，因为它已由<a href="https://www.raspberrypi.org/documentation/hardware/raspberrypi/booteeprom.md">板载EEPROM</a>中的启动代码替换</p>
<h4 id="start-elf和fixup-elf"><a href="#start-elf和fixup-elf" class="headerlink" title="start*.elf和fixup*.elf"></a>start*.elf和fixup*.elf</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">start4.elf，start4x.elf，start4cd.elf，start4db.elf</span><br><span class="line">fixup4.dat，fixup4x.dat，fixup4cd.dat，fixup4db.dat</span><br></pre></td></tr></table></figure>

<p><code>start*.elf</code>是基本固件，<code>start*x.elf</code>包括相机驱动程序和编解码器，<code>start*db.elf</code>是固件的调试版本，<code>start*cd.elf</code>是简化版本，不支持编解码器和3D之类的硬件块，并且在<code>gpu_mem=16</code>中指定时使用<code>config.txt</code></p>
<h4 id="fixup-dat"><a href="#fixup-dat" class="headerlink" title="fixup* .dat"></a>fixup* .dat</h4><p>这些是链接器文件，并且与<code>start*.elf</code>上一节中列出的文件配对</p>
<h4 id="cmdline-txt"><a href="#cmdline-txt" class="headerlink" title="cmdline.txt"></a>cmdline.txt</h4><p>引导时，内核命令行会传递到内核。</p>
<h4 id="config-txt"><a href="#config-txt" class="headerlink" title="config.txt"></a>config.txt</h4><p>包含许多用于设置Pi的配置参数</p>
<p>具体可见：<br><a href="https://www.lxx1.com/pi/basis/raspberry_pi_version.html#%E5%BC%95%E5%AF%BC%E6%96%87%E4%BB%B6%E5%A4%B9%E5%86%85%E5%AE%B9">https://www.lxx1.com/pi/basis/raspberry_pi_version.html#%E5%BC%95%E5%AF%BC%E6%96%87%E4%BB%B6%E5%A4%B9%E5%86%85%E5%AE%B9</a></p>
<h3 id="GCC交叉编译"><a href="#GCC交叉编译" class="headerlink" title="GCC交叉编译"></a>GCC交叉编译</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">https://mirrors.tuna.tsinghua.edu.cn/armbian-releases/_toolchain/</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export ARCH_HOME=/&#123;PATH&#125;/gcc-arm-8.3-2019.03-x86_64-aarch64-linux-gnu</span><br><span class="line">export PATH=$PATH:$ARCH_HOME/bin</span><br></pre></td></tr></table></figure>

<h3 id="编译U-boot"><a href="#编译U-boot" class="headerlink" title="编译U-boot"></a>编译U-boot</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/u-boot/u-boot.git</span><br><span class="line">cd u-boot</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用刚才下载的交叉工具链</span></span><br><span class="line">export CROSS_COMPILE=aarch64-linux-gnu-</span><br><span class="line">make distclean</span><br><span class="line">make ARCH=arm CROSS_COMPILE=aarch64-linux-gnu- rpi_4_defconfig</span><br><span class="line">make ARCH=arm CROSS_COMPILE=aarch64-linux-gnu- -j12</span><br><span class="line">make ARCH=arm CROSS_COMPILE=aarch64-linux-gnu- distclean</span><br></pre></td></tr></table></figure>

<p><code>make distclean</code> 清理编译配置和编译产物</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo cp u-boot.bin /mnt/boot/kernel8.img</span><br></pre></td></tr></table></figure>

<p><code>u-boot.bin</code> 584.5k 大小</p>
<h3 id="USB串口调试"><a href="#USB串口调试" class="headerlink" title="USB串口调试"></a>USB串口调试</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install minicom</span><br><span class="line">sudo minicom -D /dev/ttyUSB0</span><br></pre></td></tr></table></figure>

<p>在控制台下通过组合键<code>Ctrl+A Z</code> 可以进入minicom 菜单。<br>组合键的用法是：先按<code>Ctrl+A</code>组合键，然后松开这两个键，再按Z键。另外还有一些常用的组合键。</p>
<p><code>S键</code>：发送文件到目标系统中；<br><code>W键</code>：自动卷屏。当显示的内容超过一行之后，自动将后面的内容换行。这个功能在查看内核的启动信息时很有用。<br><code>C键</code>：清除屏幕的显示内容；<br><code>B键</code>：浏览minicom的历史显示；<br><code>X键</code>：退出mInicom，会提示确认退出。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
        <tag>U-Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 安装CUDA</title>
    <url>/2021/04/27/Ubuntu%20%E5%AE%89%E8%A3%85CUDA/</url>
    <content><![CDATA[<h3 id="CUDA安装"><a href="#CUDA安装" class="headerlink" title="CUDA安装"></a>CUDA安装</h3><h4 id="NVIDIA®-GPU-驱动程序"><a href="#NVIDIA®-GPU-驱动程序" class="headerlink" title="NVIDIA® GPU 驱动程序"></a>NVIDIA® GPU 驱动程序</h4><p><a href="https://www.nvidia.com/drivers">https://www.nvidia.com/drivers</a><br>根据显卡型号下载 NVIDIA-Linux-x86_64-460.73.01.run</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chmod +x NVIDIA-Linux-x86_64-460.73.01.run</span><br><span class="line">sudo ./NVIDIA-Linux-x86_64-460.73.01.run </span><br></pre></td></tr></table></figure>

<p>Ubuntu没必要安装这个版本，直接在“软件和更新”中选择NVIDIA的驱动更好</p>
<span id="more"></span>
<h4 id="CUDA®-工具包"><a href="#CUDA®-工具包" class="headerlink" title="CUDA® 工具包"></a>CUDA® 工具包</h4><p><a href="https://developer.nvidia.com/cuda-toolkit-archive">https://developer.nvidia.com/cuda-toolkit-archive</a><br>下载Ubuntu对于的包安装，sample没必要安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i libcudnn8_8.2.0.53-1+cuda11.3_amd64.deb </span><br><span class="line">sudo dpkg -i libcudnn8-dev_8.2.0.53-1+cuda11.3_amd64.deb</span><br></pre></td></tr></table></figure>

<h4 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export PATH=/usr/local/cuda/bin$&#123;PATH:+:$&#123;PATH&#125;&#125;</span><br><span class="line">export LD_LIBRARY_PATH=/usr/local/cuda/lib64:/usr/local/cuda/lib64</span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="built_in">print</span>(tf.test.is_gpu_available())</span><br></pre></td></tr></table></figure>

<p>根据打印排查问题，如果最后输出为<code>True</code> 则安装成功；否则根据日志排查问题。</p>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><h4 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h4><p>ERROR: An NVIDIA kernel module ‘nvidia-drm’ appears to already be loaded in  your kernel.<br>Linux 驱动已经安装，如果需要重新安装，在“软件和更新”中选择非NVIDIA的驱动，重启，再安装。其实没必要，直接使用“软件和更新”中的驱动更好</p>
<h4 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h4><p>Could not load dynamic library ‘libcusolver.so.10’</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd $LD_LIBRARY_PATH</span><br><span class="line">sudo ln libcusolver.so.11 libcusolver.so.10</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>CUDA</tag>
      </tags>
  </entry>
  <entry>
    <title>charles ubuntu 安装证书</title>
    <url>/2021/05/01/charles%20ubuntu%20%E5%AE%89%E8%A3%85%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">help</span><br><span class="line">  -- SSL Proxing</span><br><span class="line">         -- Save Charles Root Certificate</span><br></pre></td></tr></table></figure>

<p>得到 <code>charles-ssl-proxying-certificate.pem</code></p>
<p>转化格式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl x509 -in charles-ssl-proxying-certificate.pem -inform PEM -out charles-ssl-proxying-certificate.crt</span><br></pre></td></tr></table></figure>

<p>复制到ca证书目录（这里新建了一个目录）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir /usr/share/ca-certificates/extra</span><br><span class="line">sudo cp charles-ssl-proxying-certificate.crt /usr/share/ca-certificates/extra/charles-ssl-proxying-certificate.crt</span><br></pre></td></tr></table></figure>

<p>配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo dpkg-reconfigure ca-certificates</span><br></pre></td></tr></table></figure>

<p>选择Yes后，弹出证书列表，选择charles证书即可。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>qemu启动Linux内核</title>
    <url>/2021/01/31/%E4%BB%8Eqemu%E5%90%AF%E5%8A%A8Linux%E5%86%85%E6%A0%B8%E7%9C%8Blinux/</url>
    <content><![CDATA[<h2 id="Linux-内核编译"><a href="#Linux-内核编译" class="headerlink" title="Linux 内核编译"></a>Linux 内核编译</h2><h5 id="准备Linux-kernel-源码"><a href="#准备Linux-kernel-源码" class="headerlink" title="准备Linux kernel 源码"></a>准备Linux kernel 源码</h5><p>下载地址：</p>
<p> <a href="https://www.kernel.org/">https://www.kernel.org/</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xz -d linux-5.10.12.tar.xz</span><br><span class="line">tar xvf linux-5.10.12.tar</span><br><span class="line">cd linux-5.10.12</span><br></pre></td></tr></table></figure>

<h5 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br><span class="line">sudo apt-get install libelf-dev</span><br><span class="line">sudo apt-get install libncurses-dev</span><br><span class="line">sudo apt-get install flex</span><br><span class="line">sudo apt-get install bison</span><br><span class="line">sudo apt install kernel-package build-essential libncurses5-dev fakeroot</span><br><span class="line">sudo apt install libssl-dev</span><br></pre></td></tr></table></figure>

<h5 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a>编译源码</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make menuconfig</span><br><span class="line">make bzImage -j8</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p><code>make menuconfig</code> 配置kernel编译参数，可根据自己的需求进行设置，<code>ramfs</code> 一般是默认开启的，后面通过qemu运行需要使用到这个。</p>
<p>内存分为不同的类型，这里编译的是<code>x86_64</code> <code>bzImage</code> </p>
<p>内核的不同类型</p>
<blockquote>
<p>bzImage是vmlinuz经过gzip压缩后的文件，适用于大内核</p>
<p>vmlinux是未压缩的内核</p>
<p>vmlinuz是vmlinux的压缩文件。</p>
<p>vmlinux 是ELF文件，即编译出来的最原始的文件。</p>
<p>vmlinuz应该是由ELF文件vmlinux经过OBJCOPY后，并经过压缩后的文件</p>
<p>zImage是vmlinuz经过gzip压缩后的文件，适用于小内核</p>
</blockquote>
<h2 id="BusyBox编译"><a href="#BusyBox编译" class="headerlink" title="BusyBox编译"></a>BusyBox编译</h2><p>在内核加载时，需要为内核准备文件系统，以及各种基本的工具。而BusyBox整合了很多常用的Linux工具。</p>
<h5 id="准备busybox源码"><a href="#准备busybox源码" class="headerlink" title="准备busybox源码"></a>准备busybox源码</h5><p>下载地址： <a href="https://busybox.net/">https://busybox.net/</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xvjf busybox-1.32.1.tar.bz2</span><br><span class="line">cd busybox-1.32.1</span><br></pre></td></tr></table></figure>

<h5 id="编译源码-1"><a href="#编译源码-1" class="headerlink" title="编译源码"></a>编译源码</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make menuconfig</span><br><span class="line">make install -j 8</span><br></pre></td></tr></table></figure>

<p><code>make menuconfig</code> 对busybox编译参数进行设置，类似于linux kernel设置。由于我们前面编译的linux kernel只有一个内核文件，并且linux 程序执行的所需的依赖库，我们暂时是不打算装的，因此在编译busybox时，我们选择将busybox编译为一个静态二进制文件。</p>
<p>设置的路径如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Settings—&gt;</span><br><span class="line">    Build Options—&gt;</span><br><span class="line">           Build Busybox as a static binary(no shared libs)</span><br></pre></td></tr></table></figure>

<p><code>make install -j 8</code> 在执行后，会在当前目录生成<code>_install</code> 目录，这个目录里面包含busybox所有工具。我们可以看到，比如<code>bin</code> 目录中的程序，除了busybox外都是链接到busybox的软链。具体的调用都是busybox通过argv[0]来识别到调用名，在busybox内部来调用的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">( <span class="type">int</span> argc, <span class="type">char</span> *argv[] )</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span> ; i &lt; argc ; i++) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;argv[%d] = %s\n&quot;</span>, i, argv[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="制作文件系统"><a href="#制作文件系统" class="headerlink" title="制作文件系统"></a>制作文件系统</h2><h5 id="补全目录"><a href="#补全目录" class="headerlink" title="补全目录"></a>补全目录</h5><p>进入busybox的_install目录，补充完linux缺失的目录和文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir root dev etc bin sbin mnt sys proc lib home tmp var usr</span><br><span class="line">mkdir usr/sbin usr/bin usr/lib usr/modules</span><br><span class="line">mkdir mnt/usb mnt/nfs mnt/etc mnt/etc/init.d</span><br><span class="line">mkdir lib/modules</span><br><span class="line">chmod 1777 tmp</span><br></pre></td></tr></table></figure>

<h5 id="创建设备文件"><a href="#创建设备文件" class="headerlink" title="创建设备文件"></a>创建设备文件</h5><p>进入dev目录执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mknod -m 660 console c 5 1</span><br><span class="line">sudo mknod -m 660 null c 1 3</span><br></pre></td></tr></table></figure>

<h5 id="配置磁盘分区"><a href="#配置磁盘分区" class="headerlink" title="配置磁盘分区"></a>配置磁盘分区</h5><p>进入etc目录，创建并编辑fstab文件，输入以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proc    /proc   proc    defaults    0   0</span><br><span class="line">none    /tmp    ramfs   defaults    0   0</span><br><span class="line">mdev    /dev    ramfs   defaults    0   0</span><br><span class="line">sysfs   /sys    sysfs   defaults    0   0</span><br></pre></td></tr></table></figure>

<h5 id="配置初始化操作"><a href="#配置初始化操作" class="headerlink" title="配置初始化操作"></a>配置初始化操作</h5><p>在etc下创建init.d目录，并在init.d目录下编辑rcS文件且加上可执行权限，输入以下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/sh</span></span><br><span class="line">/bin/mount -a</span><br></pre></td></tr></table></figure>

<p>在etc下编辑inittab，输入以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">::sysinit:/etc/init.d/rcS</span><br><span class="line">::respawn:-/bin/sh</span><br><span class="line">::restart:/sbin/init</span><br><span class="line">::ctrlaltdel:/bin/umount -a -r</span><br><span class="line">::shutdown:/bin/umount -a -r</span><br><span class="line">::shutdown:/sbin/swapoff –a</span><br></pre></td></tr></table></figure>

<h5 id="打包文件系统"><a href="#打包文件系统" class="headerlink" title="打包文件系统"></a>打包文件系统</h5><p>在_install目录下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . | cpio -o --format=newc &gt; ./rootfs.img</span><br></pre></td></tr></table></figure>

<p>这个时候会生成<code>rootfs.img</code> 文件</p>
<h2 id="Qemu-编译及运行"><a href="#Qemu-编译及运行" class="headerlink" title="Qemu 编译及运行"></a>Qemu 编译及运行</h2><p>我自己在ubuntu20.04上通过<code>sudo apt-get install qemu</code> 安装qemu，显示安装成功了，但是却找不到相关文件，因此后面是源码安装的。</p>
<h5 id="准备源码"><a href="#准备源码" class="headerlink" title="准备源码"></a>准备源码</h5><p>源码地址：<a href="https://www.qemu.org/">https://www.qemu.org/</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xz -d qemu-5.2.0.tar.xz</span><br><span class="line">tar xvf qemu-5.2.0.tar.xz</span><br><span class="line">cd qemu-5.2.0</span><br></pre></td></tr></table></figure>

<h5 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure </span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<p><code>./configure </code> 后面可以指定安装路径，默然qemu会安装到&#x2F;usr&#x2F;local&#x2F;bin中:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure  --prefix=/usr/bin/qemu --localstatedir=/var --sysconfdir=/etc</span><br></pre></td></tr></table></figure>

<h5 id="加载并运行linux"><a href="#加载并运行linux" class="headerlink" title="加载并运行linux"></a>加载并运行linux</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">qemu-system-x86_64 -kernel ./bzImage -initrd  ./rootfs.img -nographic -append &quot;console=ttyS0&quot;</span><br></pre></td></tr></table></figure>

<h2 id="Linux-启动"><a href="#Linux-启动" class="headerlink" title="Linux 启动"></a>Linux 启动</h2><p>TODO : 启动分析</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.sunxiaokong.xyz/2020-01-14/lzx-linuxkernel-qemuinit/">https://www.sunxiaokong.xyz/2020-01-14/lzx-linuxkernel-qemuinit/</a>  试了博主的方式，会提示<code>physical kaslr disabled</code> 而无法启动内核</p>
<p><a href="https://gist.github.com/chrisdone/02e165a0004be33734ac2334f215380e">https://gist.github.com/chrisdone/02e165a0004be33734ac2334f215380e</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>qemu</tag>
      </tags>
  </entry>
  <entry>
    <title>ViewModel</title>
    <url>/2021/11/21/ViewModel/</url>
    <content><![CDATA[<h3 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h3><h4 id="ViewModelProviders"><a href="#ViewModelProviders" class="headerlink" title="ViewModelProviders"></a>ViewModelProviders</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestViewModel</span> <span class="keyword">extends</span> <span class="title class_">ViewModel</span></span><br><span class="line"></span><br><span class="line"><span class="type">TestViewModel</span> <span class="variable">test</span> <span class="operator">=</span> ViewModelProviders.of(<span class="built_in">this</span>).get(TestViewModel.class);</span><br></pre></td></tr></table></figure>

<p>在ViewModelProviders中会创建ViewModelProvider，通过ViewModelProvider来管理ViewModel。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ViewModelProvider <span class="title function_">of</span><span class="params">(<span class="meta">@NonNull</span> FragmentActivity activity, <span class="meta">@Nullable</span> Factory factory)</span> &#123;</span><br><span class="line">    <span class="type">Application</span> <span class="variable">application</span> <span class="operator">=</span> checkApplication(activity);</span><br><span class="line">    <span class="keyword">if</span> (factory == <span class="literal">null</span>) &#123;</span><br><span class="line">        factory = AndroidViewModelFactory.getInstance(application);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ViewModelProvider</span>(ViewModelStores.of(activity), (Factory)factory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>ViewModelProvider中的核心要素只有ViewModelProvider.Factory和ViewModelStore。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ViewModelProvider</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ViewModelProvider.Factory mFactory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ViewModelStore mViewModelStore;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T <span class="keyword">extends</span> <span class="title class_">ViewModel</span>&gt; T <span class="title function_">get</span><span class="params">(<span class="meta">@NonNull</span> String key, <span class="meta">@NonNull</span> Class&lt;T&gt; modelClass)</span> &#123;</span><br><span class="line">        <span class="type">ViewModel</span> <span class="variable">viewModel</span> <span class="operator">=</span> <span class="built_in">this</span>.mViewModelStore.get(key);</span><br><span class="line">        <span class="keyword">if</span> (modelClass.isInstance(viewModel)) &#123;</span><br><span class="line">            <span class="keyword">return</span> viewModel;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (viewModel != <span class="literal">null</span>) &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            viewModel = <span class="built_in">this</span>.mFactory.create(modelClass);</span><br><span class="line">            <span class="built_in">this</span>.mViewModelStore.put(key, viewModel);</span><br><span class="line">            <span class="keyword">return</span> viewModel;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在ViewModelProvider.get时，先从mViewModelStore中取，取不到就通过mFactory创建。下面分别是2个<br>Factory中的创建方式，当有包含Application构造函数时，注入mApplication，不包含则直接无参数构造。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">NewInstanceFactory</span> <span class="keyword">implements</span> <span class="title class_">ViewModelProvider</span>.Factory&#123;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T <span class="keyword">extends</span> <span class="title class_">ViewModel</span>&gt; T <span class="title function_">create</span><span class="params">(<span class="meta">@NonNull</span> Class&lt;T&gt; modelClass)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (ViewModel)modelClass.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Cannot create an instance of &quot;</span> + modelClass, var3);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Cannot create an instance of &quot;</span> + modelClass, var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AndroidViewModelFactory</span> <span class="keyword">extends</span> <span class="title class_">ViewModelProvider</span>.NewInstanceFactory &#123;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T <span class="keyword">extends</span> <span class="title class_">ViewModel</span>&gt; T <span class="title function_">create</span><span class="params">(<span class="meta">@NonNull</span> Class&lt;T&gt; modelClass)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (AndroidViewModel.class.isAssignableFrom(modelClass)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> (ViewModel)modelClass.getConstructor(Application.class).newInstance(<span class="built_in">this</span>.mApplication);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException var3) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Cannot create an instance of &quot;</span> + modelClass, var3);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException var4) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Cannot create an instance of &quot;</span> + modelClass, var4);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InstantiationException var5) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Cannot create an instance of &quot;</span> + modelClass, var5);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException var6) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Cannot create an instance of &quot;</span> + modelClass, var6);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.create(modelClass);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过下图可看到ViewModelStore可来源于FragmentActivity，非FragmentActivity可以通过<code>ViewModelStores._of_(activity)</code> 中的<code>HolderFragment</code> 来注入，原理同后文的<code>ReportFragment</code>。<br><img src="https://cdn.nlark.com/yuque/__puml/2413f5e31d82f1bf26ea75e1c7804dc6.svg#lake_card_v2=eyJ0eXBlIjoicHVtbCIsImNvZGUiOiJAc3RhcnR1bWxcbmludGVyZmFjZSBWaWV3TW9kZWxTdG9yZU93bmVyIHtcblx0Vmlld01vZGVsU3RvcmUgZ2V0Vmlld01vZGVsU3RvcmUoKTtcbn1cblxuY2xhc3MgRnJhZ21lbnRBY3Rpdml0eSBleHRlbmRzIFN1cHBvcnRBY3Rpdml0eSBpbXBsZW1lbnRzIFZpZXdNb2RlbFN0b3JlT3duZXJcblxuY2xhc3MgU3VwcG9ydEFjdGl2aXR5IGV4dGVuZHMgQWN0aXZpdHkgaW1wbGVtZW50cyBMaWZlY3ljbGVPd25lcntcblx0TGlmZWN5Y2xlUmVnaXN0cnkgbUxpZmVjeWNsZVJlZ2lzdHJ5O1xufVxuXG5TdXBwb3J0QWN0aXZpdHkgby0tICBMaWZlY3ljbGVSZWdpc3RyeVxuXG5AZW5kdW1sIiwidXJsIjoiaHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlL19fcHVtbC8yNDEzZjVlMzFkODJmMWJmMjZlYTc1ZTFjNzgwNGRjNi5zdmciLCJpZCI6ImF3aTFYIiwibWFyZ2luIjp7InRvcCI6dHJ1ZSwiYm90dG9tIjp0cnVlfSwiY2FyZCI6ImRpYWdyYW0ifQ==">#### LiveData.postValue<br>可在子线程中触发，最终使用的是setValue，如果发送数据过快，存在数据丢失可能，每次从mPendingData中取最新数据。<br>在post时将数据复制到mPendingData，送入主循环队列，后面发送数据时，从mPendingData缓存中取数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">postValue</span><span class="params">(T value)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> postTask;</span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="built_in">this</span>.mDataLock) &#123;</span><br><span class="line">        postTask = <span class="built_in">this</span>.mPendingData == NOT_SET;</span><br><span class="line">        <span class="built_in">this</span>.mPendingData = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (postTask) &#123;</span><br><span class="line">        ArchTaskExecutor.getInstance().postToMainThread(<span class="built_in">this</span>.mPostValueRunnable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.mPostValueRunnable = <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        Object newValue;</span><br><span class="line">        <span class="keyword">synchronized</span>(LiveData.<span class="built_in">this</span>.mDataLock) &#123;</span><br><span class="line">            newValue = LiveData.<span class="built_in">this</span>.mPendingData;</span><br><span class="line">            LiveData.<span class="built_in">this</span>.mPendingData = LiveData.NOT_SET;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LiveData.<span class="built_in">this</span>.setValue(newValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="LiveData-setValue"><a href="#LiveData-setValue" class="headerlink" title="LiveData.setValue"></a>LiveData.setValue</h4><p>在主线程中执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(T value)</span> &#123;</span><br><span class="line">    assertMainThread(<span class="string">&quot;setValue&quot;</span>);</span><br><span class="line">    ++<span class="built_in">this</span>.mVersion;</span><br><span class="line">    <span class="built_in">this</span>.mData = value;</span><br><span class="line">    <span class="built_in">this</span>.dispatchingValue((LiveData.ObserverWrapper)<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dispatchingValue</span><span class="params">(<span class="meta">@Nullable</span> LiveData&lt;T&gt;.ObserverWrapper initiator)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.mDispatchingValue) &#123;</span><br><span class="line">        <span class="built_in">this</span>.mDispatchInvalidated = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mDispatchingValue = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.mDispatchInvalidated = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (initiator != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.considerNotify(initiator);</span><br><span class="line">                initiator = <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">IteratorWithAdditions</span> <span class="variable">iterator</span> <span class="operator">=</span> <span class="built_in">this</span>.mObservers.iteratorWithAdditions();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.considerNotify((LiveData.ObserverWrapper)((Entry)iterator.next()).getValue());</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">this</span>.mDispatchInvalidated) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span>(<span class="built_in">this</span>.mDispatchInvalidated);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.mDispatchingValue = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">considerNotify</span><span class="params">(LiveData&lt;T&gt;.ObserverWrapper observer)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (observer.mActive) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!observer.shouldBeActive()) &#123;</span><br><span class="line">            observer.activeStateChanged(<span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (observer.mLastVersion &lt; <span class="built_in">this</span>.mVersion) &#123;</span><br><span class="line">            observer.mLastVersion = <span class="built_in">this</span>.mVersion;</span><br><span class="line">            observer.mObserver.onChanged(<span class="built_in">this</span>.mData);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>setValue主要分3步：</p>
<ul>
<li>++this.mVersion;</li>
<li>取出mObservers分发值</li>
<li>根据当前条件分发值</li>
</ul>
<p>分发值的条件：</p>
<ul>
<li>observer处于Active</li>
<li>observer.mLastVersion &lt; this.mVersion</li>
<li>至少处于started之后的生命周期状态，observer.shouldBeActive()，也就是started和resumed状态下。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">shouldBeActive</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.mOwner.getLifecycle().getCurrentState().isAtLeast(State.STARTED);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    DESTROYED,</span><br><span class="line">    INITIALIZED,</span><br><span class="line">    CREATED,</span><br><span class="line">    STARTED,</span><br><span class="line">    RESUMED;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">State</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAtLeast</span><span class="params">(<span class="meta">@NonNull</span> Lifecycle.State state)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.compareTo(state) &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="LiveData-observe和observeForever"><a href="#LiveData-observe和observeForever" class="headerlink" title="LiveData.observe和observeForever"></a>LiveData.observe和observeForever</h4><p>二者都是将observer包装后放入mObservers中。不同的是observe使用的是LifecycleBoundObserver，当生命周期状态为DESTROYED时，将自己从mObservers移除；observeForever使用的是AlwaysActiveObserver，并将激活状态一直设置为true。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">observe</span><span class="params">(<span class="meta">@NonNull</span> LifecycleOwner owner, <span class="meta">@NonNull</span> Observer&lt;T&gt; observer)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (owner.getLifecycle().getCurrentState() != State.DESTROYED) &#123;</span><br><span class="line">        LiveData&lt;T&gt;.<span class="type">LifecycleBoundObserver</span> <span class="variable">wrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LiveData</span>.LifecycleBoundObserver(owner, observer);</span><br><span class="line">        LiveData&lt;T&gt;.<span class="type">ObserverWrapper</span> <span class="variable">existing</span> <span class="operator">=</span> (LiveData.ObserverWrapper)<span class="built_in">this</span>.mObservers.putIfAbsent(observer, wrapper);</span><br><span class="line">        <span class="keyword">if</span> (existing != <span class="literal">null</span> &amp;&amp; !existing.isAttachedTo(owner)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Cannot add the same observer with different lifecycles&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (existing == <span class="literal">null</span>) &#123;</span><br><span class="line">            owner.getLifecycle().addObserver(wrapper);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">observeForever</span><span class="params">(<span class="meta">@NonNull</span> Observer&lt;T&gt; observer)</span> &#123;</span><br><span class="line">    LiveData&lt;T&gt;.<span class="type">AlwaysActiveObserver</span> <span class="variable">wrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LiveData</span>.AlwaysActiveObserver(observer);</span><br><span class="line">    LiveData&lt;T&gt;.<span class="type">ObserverWrapper</span> <span class="variable">existing</span> <span class="operator">=</span> (LiveData.ObserverWrapper)<span class="built_in">this</span>.mObservers.putIfAbsent(observer, wrapper);</span><br><span class="line">    <span class="keyword">if</span> (existing != <span class="literal">null</span> &amp;&amp; existing <span class="keyword">instanceof</span> LiveData.LifecycleBoundObserver) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Cannot add the same observer with different lifecycles&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (existing == <span class="literal">null</span>) &#123;</span><br><span class="line">        wrapper.activeStateChanged(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Lifecycle"><a href="#Lifecycle" class="headerlink" title="Lifecycle"></a>Lifecycle</h3><p>在SupportActivity中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SupportActivity</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">LifecycleRegistry</span> <span class="variable">mLifecycleRegistry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LifecycleRegistry</span>(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        ReportFragment.injectIfNeededIn(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Lifecycle <span class="title function_">getLifecycle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.mLifecycleRegistry;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReportFragment</span> <span class="keyword">extends</span> <span class="title class_">Fragment</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">injectIfNeededIn</span><span class="params">(Activity activity)</span> &#123;</span><br><span class="line">        <span class="type">FragmentManager</span> <span class="variable">manager</span> <span class="operator">=</span> activity.getFragmentManager();</span><br><span class="line">        <span class="keyword">if</span> (manager.findFragmentByTag(<span class="string">&quot;android.arch.lifecycle.LifecycleDispatcher.report_fragment_tag&quot;</span>) == <span class="literal">null</span>) &#123;</span><br><span class="line">            manager.beginTransaction().add(<span class="keyword">new</span> <span class="title class_">ReportFragment</span>(), <span class="string">&quot;android.arch.lifecycle.LifecycleDispatcher.report_fragment_tag&quot;</span>).commit();</span><br><span class="line">            manager.executePendingTransactions();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SupportActivity onCreate时注入ReportFragment，用来监听生命周期。<br>在ReportFragment中，通过添加Fragment到Activity中来实现对Activity生命周期的捕捉（类似的有权限申请）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReportFragment</span> <span class="keyword">extends</span> <span class="title class_">Fragment</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onActivityCreated</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">        <span class="built_in">this</span>.dispatchCreate(<span class="built_in">this</span>.mProcessListener);</span><br><span class="line">        <span class="built_in">this</span>.dispatch(Event.ON_CREATE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStart</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onStart();</span><br><span class="line">        <span class="built_in">this</span>.dispatchStart(<span class="built_in">this</span>.mProcessListener);</span><br><span class="line">        <span class="built_in">this</span>.dispatch(Event.ON_START);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onResume</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onResume();</span><br><span class="line">        <span class="built_in">this</span>.dispatchResume(<span class="built_in">this</span>.mProcessListener);</span><br><span class="line">        <span class="built_in">this</span>.dispatch(Event.ON_RESUME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onPause</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onPause();</span><br><span class="line">        <span class="built_in">this</span>.dispatch(Event.ON_PAUSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onStop();</span><br><span class="line">        <span class="built_in">this</span>.dispatch(Event.ON_STOP);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        <span class="built_in">this</span>.dispatch(Event.ON_DESTROY);</span><br><span class="line">        <span class="built_in">this</span>.mProcessListener = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dispatch</span><span class="params">(Event event)</span> &#123;</span><br><span class="line">        <span class="type">Activity</span> <span class="variable">activity</span> <span class="operator">=</span> <span class="built_in">this</span>.getActivity();</span><br><span class="line">        <span class="keyword">if</span> (activity <span class="keyword">instanceof</span> LifecycleRegistryOwner) &#123;</span><br><span class="line">            ((LifecycleRegistryOwner)activity).getLifecycle().handleLifecycleEvent(event);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (activity <span class="keyword">instanceof</span> LifecycleOwner) &#123;</span><br><span class="line">                <span class="type">Lifecycle</span> <span class="variable">lifecycle</span> <span class="operator">=</span> ((LifecycleOwner)activity).getLifecycle();</span><br><span class="line">                <span class="keyword">if</span> (lifecycle <span class="keyword">instanceof</span> LifecycleRegistry) &#123;</span><br><span class="line">                    ((LifecycleRegistry)lifecycle).handleLifecycleEvent(event);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终生命周期的处理实现在LifecycleRegistryOwner中，也就是 SupportActivity中的mLifecycleRegistry。<br>​</p>
<p>在LifecycleRegistryOwner中，当前后状态相同是，不会触发状态变更。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LifecycleRegistry</span> <span class="keyword">extends</span> <span class="title class_">Lifecycle</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLifecycleEvent</span><span class="params">(<span class="meta">@NonNull</span> Event event)</span> &#123;</span><br><span class="line">        <span class="type">State</span> <span class="variable">next</span> <span class="operator">=</span> getStateAfter(event);</span><br><span class="line">        <span class="built_in">this</span>.moveToState(next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">moveToState</span><span class="params">(State next)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.mState != next) &#123;</span><br><span class="line">            <span class="built_in">this</span>.mState = next;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">this</span>.mHandlingEvent &amp;&amp; <span class="built_in">this</span>.mAddingObserverCounter == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.mHandlingEvent = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">this</span>.sync();</span><br><span class="line">                <span class="built_in">this</span>.mHandlingEvent = <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.mNewEventOccurred = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sync</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">LifecycleOwner</span> <span class="variable">lifecycleOwner</span> <span class="operator">=</span> (LifecycleOwner)<span class="built_in">this</span>.mLifecycleOwner.get();</span><br><span class="line">        <span class="keyword">if</span> (lifecycleOwner == <span class="literal">null</span>) &#123;</span><br><span class="line">            Log.w(<span class="string">&quot;LifecycleRegistry&quot;</span>, <span class="string">&quot;LifecycleOwner is garbage collected, you shouldn&#x27;t try dispatch new events from it.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(!<span class="built_in">this</span>.isSynced()) &#123;</span><br><span class="line">                <span class="built_in">this</span>.mNewEventOccurred = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.mState.compareTo(((LifecycleRegistry.ObserverWithState)<span class="built_in">this</span>.mObserverMap.eldest().getValue()).mState) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.backwardPass(lifecycleOwner);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Entry&lt;LifecycleObserver, LifecycleRegistry.ObserverWithState&gt; newest = <span class="built_in">this</span>.mObserverMap.newest();</span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">this</span>.mNewEventOccurred &amp;&amp; newest != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.mState.compareTo(((LifecycleRegistry.ObserverWithState)newest.getValue()).mState) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.forwardPass(lifecycleOwner);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.mNewEventOccurred = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ProcessLifecycleOwnerInitializer"><a href="#ProcessLifecycleOwnerInitializer" class="headerlink" title="ProcessLifecycleOwnerInitializer"></a>ProcessLifecycleOwnerInitializer</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessLifecycleOwnerInitializer</span> <span class="keyword">extends</span> <span class="title class_">ContentProvider</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProcessLifecycleOwnerInitializer</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">        LifecycleDispatcher.init(<span class="built_in">this</span>.getContext());</span><br><span class="line">        ProcessLifecycleOwner.init(<span class="built_in">this</span>.getContext());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="LifecycleDispatcher"><a href="#LifecycleDispatcher" class="headerlink" title="LifecycleDispatcher"></a>LifecycleDispatcher</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LifecycleDispatcher</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!sInitialized.getAndSet(<span class="literal">true</span>)) &#123;</span><br><span class="line">            ((Application)context.getApplicationContext()).registerActivityLifecycleCallbacks(<span class="keyword">new</span> <span class="title class_">LifecycleDispatcher</span>.DispatcherActivityCallback());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DispatcherActivityCallback</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onActivityCreated</span><span class="params">(Activity activity, Bundle savedInstanceState)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (activity <span class="keyword">instanceof</span> FragmentActivity) &#123;</span><br><span class="line">                ((FragmentActivity)activity).getSupportFragmentManager().registerFragmentLifecycleCallbacks(<span class="built_in">this</span>.mFragmentCallback, <span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ReportFragment.injectIfNeededIn(activity);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过对application生命周期注册，在onActivityCreated时注入ReportFragment。<br>如果是FragmentActivity，还会registerFragmentLifecycleCallbacks。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">FragmentCallback</span> <span class="keyword">extends</span> <span class="title class_">FragmentLifecycleCallbacks</span> &#123;</span><br><span class="line">    FragmentCallback() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFragmentCreated</span><span class="params">(FragmentManager fm, Fragment f, Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        LifecycleDispatcher.dispatchIfLifecycleOwner(f, Event.ON_CREATE);</span><br><span class="line">        <span class="keyword">if</span> (f <span class="keyword">instanceof</span> LifecycleRegistryOwner) &#123;</span><br><span class="line">            <span class="keyword">if</span> (f.getChildFragmentManager().findFragmentByTag(<span class="string">&quot;android.arch.lifecycle.LifecycleDispatcher.report_fragment_tag&quot;</span>) == <span class="literal">null</span>) &#123;</span><br><span class="line">                f.getChildFragmentManager().beginTransaction().add(<span class="keyword">new</span> <span class="title class_">LifecycleDispatcher</span>.DestructionReportFragment(), <span class="string">&quot;android.arch.lifecycle.LifecycleDispatcher.report_fragment_tag&quot;</span>).commit();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFragmentStarted</span><span class="params">(FragmentManager fm, Fragment f)</span> &#123;</span><br><span class="line">        LifecycleDispatcher.dispatchIfLifecycleOwner(f, Event.ON_START);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFragmentResumed</span><span class="params">(FragmentManager fm, Fragment f)</span> &#123;</span><br><span class="line">        LifecycleDispatcher.dispatchIfLifecycleOwner(f, Event.ON_RESUME);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要是将onFragmentCreated、onFragmentStarted、onFragmentResumed分别分发为ON_CREATE、ON_START、ON_RESUME。<br>​</p>
<h4 id="ProcessLifecycleOwner"><a href="#ProcessLifecycleOwner" class="headerlink" title="ProcessLifecycleOwner"></a>ProcessLifecycleOwner</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessLifecycleOwner</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        sInstance.attach(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">attach</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mHandler = <span class="keyword">new</span> <span class="title class_">Handler</span>();</span><br><span class="line">        <span class="built_in">this</span>.mRegistry.handleLifecycleEvent(Event.ON_CREATE);</span><br><span class="line">        <span class="type">Application</span> <span class="variable">app</span> <span class="operator">=</span> (Application)context.getApplicationContext();</span><br><span class="line">        app.registerActivityLifecycleCallbacks(<span class="keyword">new</span> <span class="title class_">EmptyActivityLifecycleCallbacks</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onActivityCreated</span><span class="params">(Activity activity, Bundle savedInstanceState)</span> &#123;</span><br><span class="line">                ReportFragment.get(activity).setProcessListener(ProcessLifecycleOwner.<span class="built_in">this</span>.mInitializationListener);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onActivityPaused</span><span class="params">(Activity activity)</span> &#123;</span><br><span class="line">                ProcessLifecycleOwner.<span class="built_in">this</span>.activityPaused();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onActivityStopped</span><span class="params">(Activity activity)</span> &#123;</span><br><span class="line">                ProcessLifecycleOwner.<span class="built_in">this</span>.activityStopped();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要用处是将ProcessListener（ActivityInitializationListener）注入到对应activity的ReportFragment中。而ActivityInitializationListener中主要包含常用的3个生命周期状态。当ReportFragment中处理什么周期时，会回调这3个方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ActivityInitializationListener</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onStart</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onResume</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="ViewModel-1"><a href="#ViewModel-1" class="headerlink" title="ViewModel"></a>ViewModel</h4><ul>
<li>ViewModel使用反射的形式创建，获取时先从ViewModelStores缓存中获取，没找到则通过Factory创建</li>
<li>非FragmentActivity类或没实现ViewModelStoreOwner，可通过HolderFragment注入ViewModelStores</li>
<li>LiveData中postValue可在子线程使用，最终会在主线程调用setValue来分发数据</li>
<li>LiveData中postValue时，执行setValue时，每次取mPendingData，因此如果postValue过快，会导致前面的数据会被后面的覆盖。</li>
<li>分发数据时的条件有三个<ul>
<li>observer处于Active</li>
<li>observer.mLastVersion &lt; livedata的mVersion</li>
<li>当前生命周期处于started或resumed下</li>
</ul>
</li>
<li>注册的observer可与生命后期绑定，也可以是全局的，与生命周期绑定的observer会在destory后反注册</li>
</ul>
<h4 id="Lifecycle-1"><a href="#Lifecycle-1" class="headerlink" title="Lifecycle"></a>Lifecycle</h4><ul>
<li>SupportActivity及其子类的生命周期是通过ReportFragment管理的，在onCreated是注入ReportFragment</li>
<li>非SupportActivity及其子类的，可以通过全局监听各个Activity的生命周期在onCreated是注入ReportFragment</li>
<li>非SupportActivity及其子类的生命周期管理是通过ProcessLifecycleOwner，ProcessLifecycleOwner在Activity onCreated时设置ReportFragment中监听来感知生命周期变化。可通过静态方法获取ProcessLifecycleOwner对象的LifecycleOwner实现对非SupportActivity及其子类的的感知。</li>
<li>Lifecycle的状态分为DESTROYED、INITIALIZED、CREATED、STARTED、RESUMED 5种，在ViewModel中可以设置数据的是STARTED、RESUMED</li>
</ul>
<h4 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h4><ul>
<li>通过注入Fragment来感知Activity的生命周期和一些Fragment以Activity绑定的一些方法，应用案例入ReportFragment、HolderFragment，另外权限管理和Activiyt跳转的返回值也可以通过这种方式</li>
<li>通过ContentProvider来初始化SDK，ContentProvider会在Application的attachContext之后，onCreate之前执行onCreate方法，在AndroidManifest.xml注册后，会自动初始化ContentProvider。但是如果需要对启动进行管理，或者sdk依赖于其他的sdk，则不适合通过ContentProvider来初始化SDK。</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习基础</title>
    <url>/2021/03/09/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="主要任务"><a href="#主要任务" class="headerlink" title="主要任务"></a>主要任务</h2><ul>
<li>分类（classification）：将实例数据划分到合适的类别中。<ul>
<li>应用实例：判断网站是否被黑客入侵（二分类 ），手写数字的自动识别（多分类）</li>
</ul>
</li>
<li>回归（regression）：主要用于预测数值型数据。<ul>
<li>应用实例：股票价格波动的预测，房屋价格的预测等。</li>
</ul>
</li>
</ul>
<h2 id="监督学习（supervised-learning）"><a href="#监督学习（supervised-learning）" class="headerlink" title="监督学习（supervised learning）"></a>监督学习（supervised learning）</h2><p>必须确定目标变量的值，以便机器学习算法可以发现特征和目标变量之间的关系。在监督学习中，给定一组数据，我们知道正确的输出结果应该是什么样子，并且知道在输入和输出之间有着一个特定的关系。 (包括：分类和回归)</p>
<h2 id="非监督学习（unsupervised-learing）"><a href="#非监督学习（unsupervised-learing）" class="headerlink" title="非监督学习（unsupervised learing）"></a>非监督学习（unsupervised learing）</h2><p>在机器学习，无监督学习的问题是，在未加标签的数据中，试图找到隐藏的结构。因为提供给学习者的实例是未标记的，因此没有错误或报酬信号来评估潜在的解决方案。</p>
<span id="more"></span>
<h2 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h2><p>这个算法可以训练程序做出某一决定。程序在某一情况下尝试所有的可能行动，记录不同行动的结果并试着找出最好的一次尝试来做决定。 属于这一类算法的有马尔可夫决策过程。</p>
<h4 id="机器学习过程"><a href="#机器学习过程" class="headerlink" title="机器学习过程"></a>机器学习过程</h4><p><img src="https://camo.githubusercontent.com/d8590769184ddfedf61412b48b779edcba563d4d/687474703a2f2f646174612e617061636865636e2e6f72672f696d672f41694c6561726e696e672f6d6c2f312e4d4c466f756e646174696f6e2f2545362539432542412545352539392541382545352541442541362545342542392541302545352539462542412545372541312538302545382541452541442545372542422538332545382542462538372545372541382538422e6a7067#align=left&display=inline&height=404&margin=%5Bobject%20Object%5D&originHeight=404&originWidth=1134&status=done&style=none&width=1134"></p>
<h4 id="算法汇总"><a href="#算法汇总" class="headerlink" title="算法汇总"></a>算法汇总</h4><p><img src="https://camo.githubusercontent.com/5e3d929718cc18352130414fc6c89ef281f89d31/687474703a2f2f646174612e617061636865636e2e6f72672f696d672f41694c6561726e696e672f6d6c2f312e4d4c466f756e646174696f6e2f6d6c5f616c676f726974686d2e6a7067#align=left&display=inline&height=404&margin=%5Bobject%20Object%5D&originHeight=404&originWidth=1130&status=done&style=none&width=1130"></p>
<h2 id="机器学习-使用"><a href="#机器学习-使用" class="headerlink" title="机器学习 使用"></a>机器学习 使用</h2><h4 id="选择算法需要考虑的两个问题"><a href="#选择算法需要考虑的两个问题" class="headerlink" title="选择算法需要考虑的两个问题"></a>选择算法需要考虑的两个问题</h4><ol>
<li>算法场景<ul>
<li>预测明天是否下雨，因为可以用历史的天气情况做预测，所以选择监督学习算法</li>
<li>给一群陌生的人进行分组，但是我们并没有这些人的类别信息，所以选择无监督学习算法、通过他们身高、体重等特征进行处理。</li>
</ul>
</li>
<li>需要收集或分析的数据是什么</li>
</ol>
<h4 id="选择算法图"><a href="#选择算法图" class="headerlink" title="选择算法图"></a>选择算法图</h4><p><img src="https://camo.githubusercontent.com/3d53b6befc5c3d0b6df6a890d1bc698de5205315/687474703a2f2f646174612e617061636865636e2e6f72672f696d672f41694c6561726e696e672f6d6c2f312e4d4c466f756e646174696f6e2f2545362539432542412545352539392541382545352541442541362545342542392541302545352539462542412545372541312538302d2545392538302538392545362538422541392545372541452539372545362542332539352e6a7067#align=left&display=inline&height=662&margin=%5Bobject%20Object%5D&originHeight=662&originWidth=1238&status=done&style=none&width=1238"></p>
<h4 id="机器学习-开发流程"><a href="#机器学习-开发流程" class="headerlink" title="机器学习 开发流程"></a>机器学习 开发流程</h4><ol>
<li>收集数据: 收集样本数据</li>
<li>准备数据: 注意数据的格式</li>
<li>分析数据: 为了确保数据集中没有垃圾数据；<ul>
<li>如果是算法可以处理的数据格式或可信任的数据源，则可以跳过该步骤；</li>
<li>另外该步骤需要人工干预，会降低自动化系统的价值。</li>
</ul>
</li>
<li>训练算法: [机器学习算法核心]如果使用无监督学习算法，由于不存在目标变量值，则可以跳过该步骤</li>
<li>测试算法: [机器学习算法核心]评估算法效果</li>
<li>使用算法: 将机器学习算法转为应用程序</li>
</ol>
<h1 id="深度学习中激活函数的优缺点"><a href="#深度学习中激活函数的优缺点" class="headerlink" title="深度学习中激活函数的优缺点"></a>深度学习中激活函数的优缺点</h1><p><strong>为什么要使用非线性激活函数？</strong></p>
<p>答：如果不使用激活函数，这种情况下每一层输出都是上一层输入的线性函数。无论神经网络有多少层，输出都是输入的线性函数，这样就和只有一个隐藏层的效果是一样的。这种情况相当于多层感知机(MLP)。</p>
<h2 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h2><p><img src="https://raw.githubusercontent.com/Zauther/figurebed/blog/imgs/activation_function.webp"></p>
<h2 id="1-Sigmoid函数"><a href="#1-Sigmoid函数" class="headerlink" title="1. Sigmoid函数"></a>1. Sigmoid函数</h2><p><strong>sigmoid函数</strong></p>
<p><img src="https://raw.githubusercontent.com/Zauther/figurebed/blog/imgs/sigmoid.svg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x =  np.arange(-<span class="number">10</span>,<span class="number">10</span>,<span class="number">0.01</span>)</span><br><span class="line">y=<span class="number">1</span>/(<span class="number">1</span>+np.exp(-x))</span><br><span class="line"></span><br><span class="line"><span class="comment">#sigmoid函数图像</span></span><br><span class="line">plt.plot(x,y,label=<span class="string">&#x27;sigmoid函数图像&#x27;</span>)</span><br><span class="line">plt.grid(color=<span class="string">&#x27;b&#x27;</span>,linewidth=<span class="string">&#x27;0.1&#x27;</span> ,linestyle=<span class="string">&#x27;--&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>sigmoid的导数</strong></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/svg/286414/1615626070574-9232b0e5-c18b-48c8-b18c-b2d9b44d0865.svg#align=left&display=inline&height=51&margin=%5Bobject%20Object%5D&originHeight=51&originWidth=478&size=0&status=done&style=none&width=478"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sigmoid导数图像</span></span><br><span class="line">dev_y = y*(<span class="number">1</span>-y)</span><br><span class="line">plt.plot(x,dev_y,label=<span class="string">&#x27;sigmoid导数图像&#x27;</span>)</span><br><span class="line">plt.grid(color=<span class="string">&#x27;b&#x27;</span>,linewidth=<span class="string">&#x27;0.2&#x27;</span> ,linestyle=<span class="string">&#x27;--&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>优点：</strong></p>
<ol>
<li>便于求导的平滑函数；</li>
<li>能压缩数据，保证数据幅度不会有问题；</li>
<li>适合用于前向传播。</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>容易出现梯度消失（gradient vanishing）的现象：当激活函数接近饱和区时，变化太缓慢，导数接近0，根据后向传递的数学依据是微积分求导的链式法则，当前导数需要之前各层导数的乘积，几个比较小的数相乘，导数结果很接近0，从而无法完成深层网络的训练。</li>
<li>Sigmoid的输出不是0均值（zero-centered）的：这会导致后层的神经元的输入是非0均值的信号，这会对梯度产生影响。以 f&#x3D;sigmoid(wx+b)为例， 假设输入均为正数（或负数），那么对w的导数总是正数（或负数），这样在反向传播过程中要么都往正方向更新，要么都往负方向更新，导致有一种捆绑效果，使得收敛缓慢。</li>
<li>幂运算相对耗时</li>
</ol>
<h2 id="2-tanh函数"><a href="#2-tanh函数" class="headerlink" title="2. tanh函数"></a>2. tanh函数</h2><p><strong>tanh函数</strong></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/svg/286414/1615626070582-be05cbae-f668-46fe-acee-fa862ee1184a.svg#align=left&display=inline&height=69&margin=%5Bobject%20Object%5D&originHeight=69&originWidth=337&size=0&status=done&style=none&width=337"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x =  np.arange(-<span class="number">10</span>,<span class="number">10</span>,<span class="number">0.01</span>)</span><br><span class="line">y=(np.exp(x)-np.exp(-x))/(np.exp(x)+np.exp(-x))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#tanh函数图像</span></span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.grid(color=<span class="string">&#x27;b&#x27;</span> , linewidth=<span class="string">&#x27;0.1&#x27;</span> ,linestyle=<span class="string">&#x27;--&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="tanh导数"><a href="#tanh导数" class="headerlink" title="tanh导数"></a><strong>tanh导数</strong></h1><p><img src="https://cdn.nlark.com/yuque/0/2021/svg/286414/1615626070575-609126fe-8170-4da6-823a-e0bf1d473c1c.svg#align=left&display=inline&height=25&margin=%5Bobject%20Object%5D&originHeight=25&originWidth=212&size=0&status=done&style=none&width=212"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#tanh导数图像</span></span><br><span class="line">dev_y=<span class="number">1</span>-np.square(y)</span><br><span class="line">plt.plot(x,dev_y)</span><br><span class="line">plt.grid(color=<span class="string">&#x27;b&#x27;</span> , linewidth=<span class="string">&#x27;0.1&#x27;</span> ,linestyle=<span class="string">&#x27;--&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>tanh函数将输入值压缩到 -1~1 的范围，因此它是0均值的，解决了Sigmoid函数的非zero-centered问题，但是它也存在梯度消失和幂运算的问题。</p>
<p>其实 tanh(x)&#x3D;2sigmoid(2x)-1</p>
<h2 id="3-ReLU-Rectified-Linear-Unit-修正的线性单元"><a href="#3-ReLU-Rectified-Linear-Unit-修正的线性单元" class="headerlink" title="3. ReLU(Rectified Linear Unit 修正的线性单元)"></a>3. ReLU(Rectified Linear Unit 修正的线性单元)</h2><p><strong>ReLU</strong></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/svg/286414/1615626070587-7e1d9949-1ee2-4c7f-ac10-125c561ca2a8.svg#align=left&display=inline&height=49&margin=%5Bobject%20Object%5D&originHeight=49&originWidth=208&size=0&status=done&style=none&width=208"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x =  np.arange(-<span class="number">10</span>,<span class="number">10</span>,<span class="number">0.01</span>)</span><br><span class="line">y=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x <span class="keyword">if</span> x&gt;<span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>,x))</span><br><span class="line"></span><br><span class="line"><span class="comment">#ReLU函数图像</span></span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.grid(color=<span class="string">&#x27;b&#x27;</span> , linewidth=<span class="string">&#x27;0.1&#x27;</span> ,linestyle=<span class="string">&#x27;--&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>ReLU函数导数</strong></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/svg/286414/1615626070615-c09c6263-6790-4d44-8472-d7a7cbc0e83e.svg#align=left&display=inline&height=49&margin=%5Bobject%20Object%5D&originHeight=49&originWidth=212&size=0&status=done&style=none&width=212"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#ReLU函数导数图像</span></span><br><span class="line">dev_y =<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="number">1</span> <span class="keyword">if</span> x&gt;<span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>,x))</span><br><span class="line">plt.plot(x,dev_y)</span><br><span class="line">plt.grid(color=<span class="string">&#x27;b&#x27;</span> , linewidth=<span class="string">&#x27;0.1&#x27;</span> ,linestyle=<span class="string">&#x27;--&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>优点：</strong></p>
<ol>
<li>SGD算法的收敛速度比 sigmoid 和 tanh 快；（梯度不会饱和，解决了梯度消失问题）</li>
<li>计算复杂度低，不需要进行指数运算；</li>
<li>适合用于后向传播。</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>ReLU的输出不是zero-centered；</li>
<li>Dead ReLU Problem（神经元坏死现象）：某些神经元可能永远不会被激活，导致相应参数永远不会被更新（在负数部分，梯度为0）。产生这种现象的两个原因：参数初始化问题；learning rate太高导致在训练过程中参数更新太大。 解决方法：采用Xavier初始化方法，以及避免将learning rate设置太大或使用adagrad等自动调节learning rate的算法。</li>
<li>ReLU不会对数据做幅度压缩，所以数据的幅度会随着模型层数的增加不断扩张。</li>
</ol>
<h2 id="4-Leakly-ReLU函数"><a href="#4-Leakly-ReLU函数" class="headerlink" title="4. Leakly ReLU函数"></a>4. Leakly ReLU函数</h2><p><strong>Leakly ReLU函数</strong></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/svg/286414/1615626070591-621633f8-781a-4c2e-8830-e80854df13e8.svg#align=left&display=inline&height=49&margin=%5Bobject%20Object%5D&originHeight=49&originWidth=219&size=0&status=done&style=none&width=219"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x =  np.arange(-<span class="number">10</span>,<span class="number">10</span>,<span class="number">0.01</span>)</span><br><span class="line">lambda1=<span class="number">0.1</span>   <span class="comment">#指定lambda为0.1</span></span><br><span class="line">y=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x <span class="keyword">if</span> x&gt;<span class="number">0</span> <span class="keyword">else</span> lambda1*x,x))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#leaky ReLU函数图像</span></span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.grid(color=<span class="string">&#x27;b&#x27;</span> , linewidth=<span class="string">&#x27;0.1&#x27;</span> ,linestyle=<span class="string">&#x27;--&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>Leaky ReLU函数导数</strong></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/svg/286414/1615626070595-969cd82f-775e-4997-91de-dbe05c785759.svg#align=left&display=inline&height=49&margin=%5Bobject%20Object%5D&originHeight=49&originWidth=214&size=0&status=done&style=none&width=214"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#leaky ReLU函数导数图像</span></span><br><span class="line">dev_y = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="number">1</span> <span class="keyword">if</span> x&gt;<span class="number">0</span> <span class="keyword">else</span> lambda1,x))</span><br><span class="line">plt.plot(x,dev_y)</span><br><span class="line">plt.grid(color=<span class="string">&#x27;b&#x27;</span> , linewidth=<span class="string">&#x27;0.1&#x27;</span> ,linestyle=<span class="string">&#x27;--&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>用来解决ReLU带来的神经元坏死的问题，可以将0.01设置成一个变量a，其中a由后向传播学出来。_但是其表现并不一定比ReLU好_。</p>
<h2 id="5-ELU函数（指数线性函数）"><a href="#5-ELU函数（指数线性函数）" class="headerlink" title="5. ELU函数（指数线性函数）"></a>5. ELU函数（指数线性函数）</h2><p><strong>ELU函数（指数线性函数）</strong></p>
<p><img src="https://cdn.nlark.com/yuque/__latex/f899941d2acb44b4ffa1cc1dfdd903b8.svg#card=math&code=f%28x%29%3D%5Cbegin%7Bcases%7D%0Ax%2C%5Cquad%20if%20%5Cquad%20x%20%3C%200%20%5C%5C%5C%5C%0A%5Calpha%28e%5Ex-1%29%2C%5Cquad%20otherwise%0A%5Cend%7Bcases%7D&height=61&width=241"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x =  np.arange(-10,10,0.01)</span><br><span class="line">y=list(map(lambda x:x if x&gt;0 else (np.exp(x)-1),x))</span><br><span class="line"></span><br><span class="line"># ELU函数（指数线性函数）图像</span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.grid(color=&#x27;b&#x27;,linewidth=&#x27;0.1&#x27; ,linestyle=&#x27;--&#x27;)</span><br></pre></td></tr></table></figure>

<p><strong>ELU函数（指数线性函数）导数</strong></p>
<p><img src="https://cdn.nlark.com/yuque/__latex/aa44f735dfcacbb5534b9070249b0192.svg#card=math&code=f%28x%29%27%3D%5Cbegin%7Bcases%7D%0A1%2C%5Cquad%20if%20%5Cquad%20x%20%3C%200%20%5C%5C%5C%5C%0Af%28x%29%20%2B%20%5Calpha%20%2C%5Cquad%20otherwise%0A%5Cend%7Bcases%7D&height=61&width=240"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># dev_y = list(map(lambda x: 1 if x&gt;0 else lambda1,x))</span><br><span class="line"></span><br><span class="line"># ELU函数（指数线性函数）图像</span><br><span class="line"># plt.plot(x,dev_y)</span><br><span class="line"># plt.grid(color=&#x27;b&#x27;,linewidth=&#x27;0.1&#x27; ,linestyle=&#x27;--&#x27;)</span><br></pre></td></tr></table></figure>

<p>ELU有ReLU的所有优点，并且不会有 Dead ReLU问题，输出的均值接近0（zero-centered）。但是计算量大，其表现并不一定比ReLU好。。</p>
<h2 id="6-softmax"><a href="#6-softmax" class="headerlink" title="6. softmax"></a>6. softmax</h2><p><strong>softmax</strong></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/svg/286414/1615626070597-cfb40bdd-fc19-4ef5-8f50-b42cbec0bd33.svg#align=left&display=inline&height=57&margin=%5Bobject%20Object%5D&originHeight=57&originWidth=133&size=0&status=done&style=none&width=133"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import math</span><br><span class="line"></span><br><span class="line">z = np.arange(-10, 10, 0.05)</span><br><span class="line">exp_z = [math.exp(z) for z in z]</span><br><span class="line">sum_exp_z = sum(exp_z)</span><br><span class="line">softmax_z = [round(i / sum_exp_z, 6) for i in exp_z]</span><br><span class="line">plt.plot(z, softmax_z)</span><br><span class="line">plt.grid(color=&#x27;b&#x27;,linewidth=&#x27;0.1&#x27; ,linestyle=&#x27;--&#x27;)</span><br></pre></td></tr></table></figure>

<p>多分类任务，当类别数k＝2时，Softmax回归退化为Logistic回归。</p>
<h1 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h1><p><a href="https://zhuanlan.zhihu.com/p/32626442">https://zhuanlan.zhihu.com/p/32626442</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/gif/286414/1615626070588-ad4a7f87-c8d1-4d45-b38e-fc5d9e649eba.gif#align=left&display=inline&height=480&margin=%5Bobject%20Object%5D&originHeight=480&originWidth=620&size=0&status=done&style=none&width=620"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/gif/286414/1615626070576-53f54d5c-3464-4e71-bcc6-070ba700e787.gif#align=left&display=inline&height=557&margin=%5Bobject%20Object%5D&originHeight=557&originWidth=720&size=0&status=done&style=none&width=720"></p>
<h1 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h1><p><a href="https://zhuanlan.zhihu.com/p/60302475">https://zhuanlan.zhihu.com/p/60302475</a></p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/06/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<span id="more"></span>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>从零开构建树莓派64位操作系统</title>
    <url>/2021/04/04/%E4%BB%8E%E9%9B%B6%E5%BC%80%E6%9E%84%E5%BB%BA%E6%A0%91%E8%8E%93%E6%B4%BE64%E4%BD%8D%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="1-首次安装树莓派"><a href="#1-首次安装树莓派" class="headerlink" title="1. 首次安装树莓派"></a>1. 首次安装树莓派</h2><h3 id="1-1-安装树莓派"><a href="#1-1-安装树莓派" class="headerlink" title="1.1 安装树莓派"></a>1.1 安装树莓派</h3><h4 id="1-1-1-下载树莓派镜像-可跳过"><a href="#1-1-1-下载树莓派镜像-可跳过" class="headerlink" title="1.1.1 下载树莓派镜像(可跳过)"></a>1.1.1 下载树莓派镜像(可跳过)</h4><p>从<a href="https://www.raspberrypi.org/software/operating-systems/">https://www.raspberrypi.org/software/operating-systems/</a> 下载树莓派镜像，为了快速下载，这里下载的是 <code>Raspberry Pi OS Lite</code> ，体积最小，后面主要在命令行环境使用。这里下载的版本是 <code>2021-03-04-raspios-buster-armhf-lite.zip</code><br>准备2张SD卡，一张安装树莓派系统（这里取代号A卡），另外一张（B卡）用于我们自己的构建系统。</p>
<h4 id="1-1-2-安装树莓派系统"><a href="#1-1-2-安装树莓派系统" class="headerlink" title="1.1.2 安装树莓派系统"></a>1.1.2 安装树莓派系统</h4><p>在Ubuntu主机上安装树莓派烧写工具 <code>rpi-imager</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install rpi-imager</span><br></pre></td></tr></table></figure>

<p>在命令行执行 <code>rpi-imager</code> 后会出现工具</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpi-imager</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<p><img src="https://cdn.jsdelivr.net/gh/Zauther/figurebed/imgs/20210404180357.png"><br>选择刚才下载的zip文件：<br><img src="https://cdn.jsdelivr.net/gh/Zauther/figurebed/imgs/20210404192504.png"><br>或者直接选择需要安装的系统在线安装<br><img src="https://cdn.jsdelivr.net/gh/Zauther/figurebed/imgs/20210404192732.png"><br>选择A卡，点击烧录即可完成安装。</p>
<h4 id="1-1-3-无屏幕键盘初始化树莓派"><a href="#1-1-3-无屏幕键盘初始化树莓派" class="headerlink" title="1.1.3 无屏幕键盘初始化树莓派"></a>1.1.3 无屏幕键盘初始化树莓派</h4><p>如果没有屏幕，可通过配置WIFI和SSH，通过SSH来连接树莓派。在烧录系统到A卡后，A卡上有2个分区 <code>root</code> <code>rootfs</code> ， <code>root</code> 分区上是包含树莓派引导文件已经Linux Kerne、设备数文件等等，具体的内容后面会详细介绍。<br><strong>配置网络</strong><br>如果有网线，直接插线就可以。连接WIFI需要以下操作：<br>在 <code>root</code> 分区新建 <code>wpa_supplicant.conf</code> 文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class="line">update_config=1</span><br><span class="line">country=US</span><br><span class="line"></span><br><span class="line">network=&#123;</span><br><span class="line">ssid=&quot;WIFI名称&quot;</span><br><span class="line">psk=&quot;WIFI密码&quot;</span><br><span class="line">key_mgmt=WPA-PSK</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>配置SSH</strong><br>在<code>root</code>  分区新建名为SSH的文件即可。<br>将A卡插入树莓派即可启动树莓派系统。</p>
<h3 id="1-2-树莓派系统初始化"><a href="#1-2-树莓派系统初始化" class="headerlink" title="1.2 树莓派系统初始化"></a>1.2 树莓派系统初始化</h3><h4 id="1-2-1-SSH连接"><a href="#1-2-1-SSH连接" class="headerlink" title="1.2.1 SSH连接"></a>1.2.1 SSH连接</h4><p>通过SSH连接树莓派：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh pi@xx.xx.xx.xx</span><br></pre></td></tr></table></figure>

<p>默认密码为：<code>raspberry</code><br>到此即可通过SSH来使用树莓派。<br><strong>修改密码：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">passwd</span></span><br><span class="line">Changing password for pi.</span><br><span class="line">Current password: </span><br><span class="line">New password: </span><br><span class="line">Retype new password:</span><br></pre></td></tr></table></figure>

<p>输入默认密码 <code>raspberry</code>  和自己的密码。</p>
<h4 id="1-2-2-树莓派系统配置和VNC连接-可选"><a href="#1-2-2-树莓派系统配置和VNC连接-可选" class="headerlink" title="1.2.2 树莓派系统配置和VNC连接(可选)"></a>1.2.2 树莓派系统配置和VNC连接(可选)</h4><p>通过raspi-config可对树莓派进行设置，比如打来<code>GPIO</code> 端口，开启<code>VNC</code> 服务等</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo raspi-config</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Zauther/figurebed/imgs/20210404195151.png"><br>在 <code>3 Interface Options</code> &#x2F; <code>P3 VNC</code>  中开启<code>VNC</code> 。<br>在Ubuntu中安装VNC客户端:<br>在 <a href="https://www.realvnc.com/en/connect/download/viewer/linux/">https://www.realvnc.com/en/connect/download/viewer/linux/</a> 中下载VNC View <a href="https://www.realvnc.com/download/file/viewer.files/VNC-Viewer-6.20.529-Linux-x64.deb">https://www.realvnc.com/download/file/viewer.files/VNC-Viewer-6.20.529-Linux-x64.deb</a><br>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i VNC-Viewer-6.20.529-Linux-x64.deb</span><br></pre></td></tr></table></figure>

<p>打开vnc view，新建Connection 输入树莓派IP地址和用户名密码即可进入远程桌面。</p>
<p>至此完成了树莓派系统的初步安装。</p>
<h2 id="2-从零构建树莓派"><a href="#2-从零构建树莓派" class="headerlink" title="2 从零构建树莓派"></a>2 从零构建树莓派</h2><h3 id="2-1-串口连接树莓派"><a href="#2-1-串口连接树莓派" class="headerlink" title="2.1 串口连接树莓派"></a>2.1 串口连接树莓派</h3><p>这一步需要使用到USB转TTL串口的线，淘宝和京东有售。<br><img src="https://cdn.jsdelivr.net/gh/Zauther/figurebed/imgs/20210404200452.png"></p>
<h4 id="2-1-2-串口接线"><a href="#2-1-2-串口接线" class="headerlink" title="2.1.2 串口接线"></a>2.1.2 串口接线</h4><p>USB 串口工具<br><img src="https://cdn.jsdelivr.net/gh/Zauther/figurebed/imgs/20210404204409.png"></p>
<p>树莓派GPIO借口<br><img src="https://cdn.jsdelivr.net/gh/Zauther/figurebed/imgs/20210404205936.png"><br>1,2号pin是远离树莓派USB的那一端。</p>
<p>接线：<br>usb转串口工具的TX连接树莓派的RX，RX连接树莓派的TX，VCC与GND正常连接</p>
<p>通过 <code>raspi-config</code>  设置 <code>3 Interface Options</code> &#x2F; <code>P6 Serial Port</code>  开启串口<br><img src="https://cdn.jsdelivr.net/gh/Zauther/figurebed/imgs/20210404204614.png"></p>
<h4 id="2-1-2-Ubuntu上安装串口工具"><a href="#2-1-2-Ubuntu上安装串口工具" class="headerlink" title="2.1.2 Ubuntu上安装串口工具"></a>2.1.2 Ubuntu上安装串口工具</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install minicom</span><br></pre></td></tr></table></figure>

<p>启动minicom</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo minicom -D /dev/ttyUSB0</span><br></pre></td></tr></table></figure>

<p><code>-D</code> 参数Device，<code>ttyUSB0</code> 即为电脑连接上的USB串口。</p>
<p>在接好线，插好USB，启动minicom后，接通树莓派电源，可看到minicom打印内核启动过程：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo minicom -D /dev/ttyUSB0                  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Welcome to minicom 2.7.1</span><br><span class="line"></span><br><span class="line">OPTIONS: I18n </span><br><span class="line">Compiled on Dec 23 2019, 02:06:26.</span><br><span class="line">Port /dev/ttyUSB0, 20:27:33</span><br><span class="line"></span><br><span class="line">Press CTRL-A Z for help on special keys</span><br><span class="line"></span><br><span class="line">[    0.000000] Booting Linux on physical CPU 0x0</span><br><span class="line">[    0.000000] Linux version 5.10.11-v7l+ (dom@buildbot) (arm-linux-gnueabihf-gcc-8 (Ubuntu/Linaro 8.4.0-3ubuntu1) 8.4.0, GNU ld (GNU Binutils f1</span><br><span class="line">[    0.000000] CPU: ARMv7 Processor [410fd083] revision 3 (ARMv7), cr=30c5383d</span><br><span class="line">[    0.000000] CPU: div instructions available: patching division code</span><br><span class="line">[    0.000000] CPU: PIPT / VIPT nonaliasing data cache, PIPT instruction cache</span><br><span class="line">[    0.000000] OF: fdt: Machine model: Raspberry Pi 4 Model B Rev 1.2</span><br><span class="line">[    0.000000] Memory policy: Data cache writealloc</span><br><span class="line">[    0.000000] Reserved memory: created CMA memory pool at 0x000000001ec00000, size 256 MiB</span><br><span class="line">[    0.000000] OF: reserved mem: initialized node linux,cma, compatible id shared-dma-pool</span><br><span class="line">[    0.000000] Zone ranges:</span><br><span class="line">[    0.000000]   DMA      [mem 0x0000000000000000-0x000000002fffffff]</span><br><span class="line">[    0.000000]   Normal   empty</span><br><span class="line">[    0.000000]   HighMem  [mem 0x0000000030000000-0x00000000fbffffff]</span><br><span class="line">[    0.000000] Movable zone start for each node</span><br><span class="line">[    0.000000] Early memory node ranges</span><br><span class="line">[    0.000000]   node   0: [mem 0x0000000000000000-0x0000000037ffffff]</span><br><span class="line">[    0.000000]   node   0: [mem 0x0000000040000000-0x00000000fbffffff]</span><br><span class="line">[    0.000000] Initmem setup node 0 [mem 0x0000000000000000-0x00000000fbffffff]</span><br><span class="line">[    0.000000] percpu: Embedded 20 pages/cpu s50636 r8192 d23092 u81920</span><br><span class="line">[    0.000000] Built 1 zonelists, mobility grouping on.  Total pages: 997120</span><br><span class="line">[    0.000000] Kernel command line: coherent_pool=1M 8250.nr_uarts=1 snd_bcm2835.enable_compat_alsa=0 snd_bcm2835.enable_hdmi=1 video=HDMI-A-1:1t</span><br><span class="line">[    0.000000] Kernel parameter elevator= does not have any effect anymore.</span><br><span class="line">[    0.000000] Please use sysfs to set IO scheduler for individual devices.</span><br><span class="line">[    0.000000] Dentry cache hash table entries: 131072 (order: 7, 524288 bytes, linear)</span><br><span class="line">[    0.000000] Inode-cache hash table entries: 65536 (order: 6, 262144 bytes, linear)</span><br><span class="line">[    0.000000] mem auto-init: stack:off, heap alloc:off, heap free:off</span><br><span class="line">[    0.000000] software IO TLB: mapped [mem 0x0000000017cc0000-0x000000001bcc0000] (64MB)</span><br><span class="line">[    0.000000] Memory: 3602320K/3997696K available (10240K kernel code, 1354K rwdata, 3152K rodata, 2048K init, 890K bss, 133232K reserved, 2621)</span><br><span class="line">[    0.000000] SLUB: HWalign=64, Order=0-3, MinObjects=0, CPUs=4, Nodes=1</span><br><span class="line">[    0.000000] ftrace: allocating 33824 entries in 67 pages</span><br><span class="line">[    0.000000] ftrace: allocated 67 pages with 3 groups</span><br><span class="line">[    0.000000] rcu: Hierarchical RCU implementation.</span><br><span class="line">[    0.000000]  Rude variant of Tasks RCU enabled.</span><br><span class="line">[    0.000000]  Tracing variant of Tasks RCU enabled.</span><br><span class="line">[    0.000000] rcu: RCU calculated value of scheduler-enlistment delay is 10 jiffies.</span><br><span class="line">[    0.000000] NR_IRQS: 16, nr_irqs: 16, preallocated irqs: 16</span><br><span class="line">[    0.000000] GIC: Using split EOI/Deactivate mode</span><br><span class="line">[    0.000000] random: get_random_bytes called from start_kernel+0x3c8/0x59c with crng_init=0</span><br><span class="line">[    0.000008] sched_clock: 32 bits at 1000kHz, resolution 1000ns, wraps every 2147483647500ns</span><br><span class="line">[    0.000035] clocksource: timer: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 1911260446275 ns</span><br><span class="line">[    0.000099] bcm2835: system timer (irq = 25)</span><br><span class="line">[    0.000743] arch_timer: cp15 timer(s) running at 54.00MHz (phys).</span><br><span class="line">[    0.000765] clocksource: arch_sys_counter: mask: 0xffffffffffffff max_cycles: 0xc743ce346, max_idle_ns: 440795203123 ns</span><br><span class="line">[    0.000786] sched_clock: 56 bits at 54MHz, resolution 18ns, wraps every 4398046511102ns</span><br><span class="line">[    0.000804] Switching to timer-based delay loop, resolution 18ns</span><br><span class="line">[    0.001051] Console: colour dummy device 80x30</span><br><span class="line">[    0.001772] printk: console [tty1] enabled</span><br><span class="line">[    0.001840] Calibrating delay loop (skipped), value calculated using timer frequency.. 108.00 BogoMIPS (lpj=540000)</span><br><span class="line">[    0.001894] pid_max: default: 32768 minimum: 301</span><br><span class="line">[    0.002074] LSM: Security Framework initializing</span><br><span class="line">[    0.002266] Mount-cache hash table entries: 2048 (order: 1, 8192 bytes, linear)</span><br><span class="line">[    0.002311] Mountpoint-cache hash table entries: 2048 (order: 1, 8192 bytes, linear)</span><br><span class="line">[    0.003882] Disabling memory control group subsystem</span><br><span class="line">[    0.004016] CPU: Testing write buffer coherency: ok</span><br><span class="line">[    0.004476] CPU0: thread -1, cpu 0, socket 0, mpidr 80000000</span><br><span class="line">[    0.005683] Setting up static identity map for 0x200000 - 0x20003c</span><br><span class="line">[    0.005896] rcu: Hierarchical SRCU implementation.</span><br><span class="line">[    0.006824] smp: Bringing up secondary CPUs ...</span><br><span class="line">[    0.008018] CPU1: thread -1, cpu 1, socket 0, mpidr 80000001</span><br><span class="line">[    0.009364] CPU2: thread -1, cpu 2, socket 0, mpidr 80000002</span><br><span class="line">[    0.010646] CPU3: thread -1, cpu 3, socket 0, mpidr 80000003</span><br><span class="line">[    0.010895] smp: Brought up 1 node, 4 CPUs</span><br><span class="line">[    0.010927] SMP: Total of 4 processors activated (432.00 BogoMIPS).</span><br><span class="line">[    0.010957] CPU: All CPU(s) started in HYP mode.</span><br><span class="line">[    0.010984] CPU: Virtualization extensions available.</span><br><span class="line">[    0.011809] devtmpfs: initialized</span><br><span class="line">[    0.025623] VFP support v0.3: implementor 41 architecture 3 part 40 variant 8 rev 0</span><br><span class="line">[    0.025866] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns</span><br><span class="line">[    0.025919] futex hash table entries: 1024 (order: 4, 65536 bytes, linear)</span><br><span class="line">[    0.032638] pinctrl core: initialized pinctrl subsystem</span><br><span class="line">[    0.033713] NET: Registered protocol family 16</span><br><span class="line">[    0.037476] DMA: preallocated 1024 KiB pool for atomic coherent allocations</span><br><span class="line">[    0.038273] audit: initializing netlink subsys (disabled)</span><br><span class="line">[    0.038568] audit: type=2000 audit(0.030:1): state=initialized audit_enabled=0 res=1</span><br><span class="line">[    0.039138] thermal_sys: Registered thermal governor &#x27;step_wise&#x27;</span><br><span class="line">[    0.039819] hw-breakpoint: found 5 (+1 reserved) breakpoint and 4 watchpoint registers.</span><br><span class="line">[    0.039873] hw-breakpoint: maximum watchpoint size is 8 bytes.</span><br><span class="line">[    0.040268] Serial: AMBA PL011 UART driver</span><br><span class="line">[    0.072212] bcm2835-mbox fe00b880.mailbox: mailbox enabled</span><br><span class="line">[    0.090908] raspberrypi-firmware soc:firmware: Attached to firmware from 2021-01-27T22:19:57, variant start</span><br><span class="line">[    0.100922] raspberrypi-firmware soc:firmware: Firmware hash is 99d9a48302e4553cff3688692bb7e9ac760a03fa</span><br><span class="line">[    0.145578] bcm2835-dma fe007000.dma: DMA legacy API manager, dmachans=0x1</span><br><span class="line">[    0.149725] vgaarb: loaded</span><br><span class="line">[    0.150191] SCSI subsystem initialized</span><br><span class="line">[    0.150419] usbcore: registered new interface driver usbfs</span><br><span class="line">[    0.150507] usbcore: registered new interface driver hub</span><br><span class="line">[    0.150595] usbcore: registered new device driver usb</span><br><span class="line">[    0.151041] usb_phy_generic phy: supply vcc not found, using dummy regulator</span><br><span class="line">[    0.153196] clocksource: Switched to clocksource arch_sys_counter</span><br><span class="line">[    1.180263] VFS: Disk quotas dquot_6.6.0</span><br><span class="line">[    1.180389] VFS: Dquot-cache hash table entries: 1024 (order 0, 4096 bytes)</span><br><span class="line">[    1.180588] FS-Cache: Loaded</span><br><span class="line">[    1.180789] CacheFiles: Loaded</span><br><span class="line">[    1.181786] simple-framebuffer 3e6c7000.framebuffer: framebuffer at 0x3e6c7000, 0x500000 bytes, mapped to 0x(ptrval)</span><br><span class="line">[    1.181830] simple-framebuffer 3e6c7000.framebuffer: format=a8r8g8b8, mode=1280x1024x32, linelength=5120</span><br><span class="line">[    1.188675] Console: switching to colour frame buffer device 160x64</span><br><span class="line">[    1.194941] simple-framebuffer 3e6c7000.framebuffer: fb0: simplefb registered!</span><br><span class="line">[    1.204680] NET: Registered protocol family 2</span><br><span class="line">[    1.205611] tcp_listen_portaddr_hash hash table entries: 512 (order: 0, 6144 bytes, linear)</span><br><span class="line">[    1.205834] TCP established hash table entries: 8192 (order: 3, 32768 bytes, linear)</span><br><span class="line">[    1.205979] TCP bind hash table entries: 8192 (order: 4, 65536 bytes, linear)</span><br><span class="line">[    1.206114] TCP: Hash tables configured (established 8192 bind 8192)</span><br><span class="line">[    1.206324] UDP hash table entries: 512 (order: 2, 16384 bytes, linear)</span><br><span class="line">[    1.206423] UDP-Lite hash table entries: 512 (order: 2, 16384 bytes, linear)</span><br><span class="line">[    1.206743] NET: Registered protocol family 1</span><br><span class="line">[    1.207511] RPC: Registered named UNIX socket transport module.</span><br><span class="line">[    1.207589] RPC: Registered udp transport module.</span><br><span class="line">[    1.207652] RPC: Registered tcp transport module.</span><br><span class="line">[    1.207714] RPC: Registered tcp NFSv4.1 backchannel transport module.</span><br><span class="line">[    1.207799] PCI: CLS 0 bytes, default 64</span><br><span class="line">[    1.210729] Initialise system trusted keyrings</span><br><span class="line">[    1.211026] workingset: timestamp_bits=14 max_order=20 bucket_order=6</span><br><span class="line">[    1.219381] zbud: loaded</span><br><span class="line">[    1.221358] FS-Cache: Netfs &#x27;nfs&#x27; registered for caching</span><br><span class="line">[    1.222193] NFS: Registering the id_resolver key type</span><br><span class="line">[    1.222304] Key type id_resolver registered</span><br><span class="line">[    1.222364] Key type id_legacy registered</span><br><span class="line">[    1.222547] nfs4filelayout_init: NFSv4 File Layout Driver Registering...</span><br><span class="line">[    1.223725] Key type asymmetric registered</span><br><span class="line">[    1.223789] Asymmetric key parser &#x27;x509&#x27; registered</span><br><span class="line">[    1.224032] bounce: pool size: 64 pages</span><br><span class="line">[    1.224117] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 249)</span><br><span class="line">[    1.224399] io scheduler mq-deadline registered</span><br><span class="line">[    1.224465] io scheduler kyber registered</span><br><span class="line">[    1.228738] brcm-pcie fd500000.pcie: host bridge /scb/pcie@7d500000 ranges:</span><br><span class="line">[    1.231271] brcm-pcie fd500000.pcie:   No bus range found for /scb/pcie@7d500000, using [bus 00-ff]</span><br><span class="line">[    1.233925] brcm-pcie fd500000.pcie:      MEM 0x0600000000..0x063fffffff -&gt; 0x00c0000000</span><br><span class="line">[    1.236493] brcm-pcie fd500000.pcie:   IB MEM 0x0000000000..0x00bfffffff -&gt; 0x0400000000</span><br><span class="line">[    1.295300] brcm-pcie fd500000.pcie: link up, 5.0 GT/s PCIe x1 (SSC)</span><br><span class="line">[    1.298093] brcm-pcie fd500000.pcie: PCI host bridge to bus 0000:00</span><br><span class="line">[    1.300511] pci_bus 0000:00: root bus resource [bus 00-ff]</span><br><span class="line">[    1.302938] pci_bus 0000:00: root bus resource [mem 0x600000000-0x63fffffff] (bus address [0xc0000000-0xffffffff])</span><br><span class="line">[    1.305532] pci 0000:00:00.0: [14e4:2711] type 01 class 0x060400</span><br><span class="line">[    1.308205] pci 0000:00:00.0: PME# supported from D0 D3hot</span><br><span class="line">[    1.314106] PCI: bus0: Fast back to back transfers disabled</span><br><span class="line">[    1.316839] pci 0000:01:00.0: [1106:3483] type 00 class 0x0c0330</span><br><span class="line">[    1.319343] pci 0000:01:00.0: reg 0x10: [mem 0x00000000-0x00000fff 64bit]</span><br><span class="line">[    1.322172] pci 0000:01:00.0: PME# supported from D0 D3cold</span><br><span class="line">[    1.328028] PCI: bus1: Fast back to back transfers disabled</span><br><span class="line">[    1.330422] pci 0000:00:00.0: BAR 8: assigned [mem 0x600000000-0x6000fffff]</span><br><span class="line">[    1.332810] pci 0000:01:00.0: BAR 0: assigned [mem 0x600000000-0x600000fff 64bit]</span><br><span class="line">[    1.335291] pci 0000:00:00.0: PCI bridge to [bus 01]</span><br><span class="line">[    1.337675] pci 0000:00:00.0:   bridge window [mem 0x600000000-0x6000fffff]</span><br><span class="line">[    1.340468] pcieport 0000:00:00.0: enabling device (0140 -&gt; 0142)</span><br><span class="line">[    1.343081] pcieport 0000:00:00.0: PME: Signaling with IRQ 63</span><br><span class="line">[    1.351160] Serial: 8250/16550 driver, 1 ports, IRQ sharing enabled</span><br><span class="line">[    1.354458] bcm2835-aux-uart fe215040.serial: there is not valid maps for state default</span><br><span class="line">[    1.359294] iproc-rng200 fe104000.rng: hwrng registered</span><br><span class="line">[    1.361981] vc-mem: phys_addr:0x00000000 mem_base=0x3ec00000 mem_size:0x40000000(1024 MiB)</span><br><span class="line">[    1.365371] gpiomem-bcm2835 fe200000.gpiomem: Initialised: Registers at 0xfe200000</span><br><span class="line">[    1.380748] brd: module loaded</span><br><span class="line">[    1.395318] loop: module loaded</span><br><span class="line">[    1.399348] Loading iSCSI transport class v2.0-870.</span><br><span class="line">[    1.404157] libphy: Fixed MDIO Bus: probed</span><br><span class="line">[    1.407776] bcmgenet fd580000.ethernet: GENET 5.0 EPHY: 0x0000</span><br><span class="line">[    1.423223] libphy: bcmgenet MII bus: probed</span><br><span class="line">[    1.503347] unimac-mdio unimac-mdio.-19: Broadcom UniMAC MDIO bus</span><br><span class="line">[    1.506805] usbcore: registered new interface driver r8152</span><br><span class="line">[    1.509183] usbcore: registered new interface driver lan78xx</span><br><span class="line">[    1.511502] usbcore: registered new interface driver smsc95xx</span><br><span class="line">[    1.515385] xhci_hcd 0000:01:00.0: enabling device (0140 -&gt; 0142)</span><br><span class="line">[    1.517778] xhci_hcd 0000:01:00.0: xHCI Host Controller</span><br><span class="line">[    1.520019] xhci_hcd 0000:01:00.0: new USB bus registered, assigned bus number 1</span><br><span class="line">[    1.525563] xhci_hcd 0000:01:00.0: hcc params 0x002841eb hci version 0x100 quirks 0x0000030000000890</span><br><span class="line">[    1.529114] usb usb1: New USB device found, idVendor=1d6b, idProduct=0002, bcdDevice= 5.10</span><br><span class="line">[    1.531401] usb usb1: New USB device strings: Mfr=3, Product=2, SerialNumber=1</span><br><span class="line">[    1.533729] usb usb1: Product: xHCI Host Controller</span><br><span class="line">[    1.536026] usb usb1: Manufacturer: Linux 5.10.11-v7l+ xhci-hcd</span><br><span class="line">[    1.538319] usb usb1: SerialNumber: 0000:01:00.0</span><br><span class="line">[    1.541333] hub 1-0:1.0: USB hub found</span><br><span class="line">[    1.543716] hub 1-0:1.0: 1 port detected</span><br><span class="line">[    1.546630] xhci_hcd 0000:01:00.0: xHCI Host Controller</span><br><span class="line">[    1.548897] xhci_hcd 0000:01:00.0: new USB bus registered, assigned bus number 2</span><br><span class="line">[    1.551175] xhci_hcd 0000:01:00.0: Host supports USB 3.0 SuperSpeed</span><br><span class="line">[    1.553989] usb usb2: New USB device found, idVendor=1d6b, idProduct=0003, bcdDevice= 5.10</span><br><span class="line">[    1.556309] usb usb2: New USB device strings: Mfr=3, Product=2, SerialNumber=1</span><br><span class="line">[    1.558613] usb usb2: Product: xHCI Host Controller</span><br><span class="line">[    1.560891] usb usb2: Manufacturer: Linux 5.10.11-v7l+ xhci-hcd</span><br><span class="line">[    1.563206] usb usb2: SerialNumber: 0000:01:00.0</span><br><span class="line">[    1.566198] hub 2-0:1.0: USB hub found</span><br><span class="line">[    1.568559] hub 2-0:1.0: 4 ports detected</span><br><span class="line">[    1.572456] dwc_otg: version 3.00a 10-AUG-2012 (platform bus)</span><br><span class="line">[    1.575615] usbcore: registered new interface driver uas</span><br><span class="line">[    1.577961] usbcore: registered new interface driver usb-storage</span><br><span class="line">[    1.580371] mousedev: PS/2 mouse device common for all mice</span><br><span class="line">[    1.584260] bcm2835-wdt bcm2835-wdt: Broadcom BCM2835 watchdog timer</span><br><span class="line">[    1.589977] sdhci: Secure Digital Host Controller Interface driver</span><br><span class="line">[    1.592240] sdhci: Copyright(c) Pierre Ossman</span><br><span class="line">[    1.595223] sdhci-pltfm: SDHCI platform and OF driver helper</span><br><span class="line">[    1.600204] ledtrig-cpu: registered to indicate activity on CPUs</span><br><span class="line">[    1.602781] hid: raw HID events driver (C) Jiri Kosina</span><br><span class="line">[    1.605191] usbcore: registered new interface driver usbhid</span><br><span class="line">[    1.607409] usbhid: USB HID core driver</span><br><span class="line">[    1.614965] Initializing XFRM netlink socket</span><br><span class="line">[    1.617362] NET: Registered protocol family 17</span><br><span class="line">[    1.619680] Key type dns_resolver registered</span><br><span class="line">[    1.622214] Registering SWP/SWPB emulation handler</span><br><span class="line">[    1.624581] registered taskstats version 1</span><br><span class="line">[    1.626751] Loading compiled-in X.509 certificates</span><br><span class="line">[    1.629732] Key type ._fscrypt registered</span><br><span class="line">[    1.631899] Key type .fscrypt registered</span><br><span class="line">[    1.634124] Key type fscrypt-provisioning registered</span><br><span class="line">[    1.647476] uart-pl011 fe201000.serial: there is not valid maps for state default</span><br><span class="line">[    1.649974] uart-pl011 fe201000.serial: cts_event_workaround enabled</span><br><span class="line">[    1.652213] fe201000.serial: ttyAMA0 at MMIO 0xfe201000 (irq = 36, base_baud = 0) is a PL011 rev2</span><br><span class="line">[    1.661041] bcm2835-aux-uart fe215040.serial: there is not valid maps for state default</span><br><span class="line">[    1.664051] printk: console [ttyS0] disabled</span><br><span class="line">[    1.666328] fe215040.serial: ttyS0 at MMIO 0xfe215040 (irq = 37, base_baud = 62500000) is a 16550</span><br><span class="line">[    2.967163] printk: console [ttyS0] enabled</span><br><span class="line">[    2.976253] bcm2835-power bcm2835-power: Broadcom BCM2835 power domains driver</span><br><span class="line">[    2.989191] of_cfs_init</span><br><span class="line">[    2.994060] of_cfs_init: OK</span><br><span class="line">[    3.037147] mmc0: SDHCI controller on fe340000.emmc2 [fe340000.emmc2] using ADMA</span><br><span class="line">[    3.048226] Waiting for root device PARTUUID=37dc5df3-02...</span><br><span class="line">[    3.123239] usb 1-1: new high-speed USB device number 2 using xhci_hcd</span><br><span class="line">[    3.148244] mmc0: new ultra high speed DDR50 SDHC card at address aaaa</span><br><span class="line">[    3.157974] mmcblk0: mmc0:aaaa SC16G 14.8 GiB</span><br><span class="line">[    3.170257]  mmcblk0: p1 p2</span><br><span class="line">[    3.213492] EXT4-fs (mmcblk0p2): mounted filesystem with ordered data mode. Opts: (null)</span><br><span class="line">[    3.224119] VFS: Mounted root (ext4 filesystem) readonly on device 179:2.</span><br><span class="line">[    3.242393] devtmpfs: mounted</span><br><span class="line">[    3.256691] Freeing unused kernel memory: 2048K</span><br><span class="line">[    3.263934] Run /sbin/init as init process</span><br><span class="line">[    3.305845] usb 1-1: New USB device found, idVendor=2109, idProduct=3431, bcdDevice= 4.21</span><br><span class="line">[    3.316511] usb 1-1: New USB device strings: Mfr=0, Product=1, SerialNumber=0</span><br><span class="line">[    3.326113] usb 1-1: Product: USB2.0 Hub</span><br><span class="line">[    3.334293] hub 1-1:1.0: USB hub found</span><br><span class="line">[    3.340665] hub 1-1:1.0: 4 ports detected</span><br><span class="line">[    3.357666] random: fast init done</span><br><span class="line">[    3.709677] systemd[1]: System time before build time, advancing clock.</span><br><span class="line">[    3.820447] NET: Registered protocol family 10</span><br><span class="line">[    3.828660] Segment Routing with IPv6</span><br><span class="line">[    3.894632] systemd[1]: systemd 241 running in system mode. (+PAM +AUDIT +SELINUX +IMA +APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYP)</span><br><span class="line">[    3.922400] systemd[1]: Detected architecture arm.</span><br><span class="line">[    4.013351] systemd[1]: Set hostname to &lt;raspberrypi&gt;.</span><br><span class="line">[    4.784874] random: systemd: uninitialized urandom read (16 bytes read)</span><br><span class="line">[    4.807407] random: systemd: uninitialized urandom read (16 bytes read)</span><br><span class="line">[    4.821131] systemd[1]: Created slice system-systemd\x2dfsck.slice.</span><br><span class="line">[    4.833750] random: systemd: uninitialized urandom read (16 bytes read)</span><br><span class="line">[    4.843600] systemd[1]: Listening on udev Kernel Socket.</span><br><span class="line">[    4.855139] systemd[1]: Reached target Swap.</span><br><span class="line">[    4.866153] systemd[1]: Listening on Journal Socket.</span><br><span class="line">[    4.886705] systemd[1]: Starting Restore / save the current clock...</span><br><span class="line">[    4.900496] systemd[1]: Condition check resulted in Huge Pages File System being skipped.</span><br><span class="line">[    4.912097] systemd[1]: Listening on initctl Compatibility Named Pipe.</span><br><span class="line">[    5.179601] i2c /dev entries driver</span><br><span class="line"></span><br><span class="line">Raspbian GNU/Linux 10 raspberrypi ttyS0</span><br><span class="line"></span><br><span class="line">raspberrypi login: </span><br></pre></td></tr></table></figure>

<p>从日志中我们可以看到，Linux内核为<code>5.10.11-v7l</code>  使用的是armv7l架构的版本，编译的gcc为arm，32位</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Linux version 5.10.11-v7l+ (dom@buildbot) (arm-linux-gnueabihf-gcc-8 (Ubuntu/Linaro 8.4.0-3ubuntu1) 8.4.0</span><br></pre></td></tr></table></figure>

<p>在串口里面我们可以直接登录。<br>到这里，串口的部分结束了，为了和后面做对比，我们登录后，看一下<code>/boot</code> 下的这个2个文件。<br><code>**cmdline.txt**</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">console=serial0,115200 console=tty1 root=PARTUUID=37dc5df3-02 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait</span><br></pre></td></tr></table></figure>

<p><code>cmdline.txt</code> 是树莓派BootLoader启动Linux内核时，传给内核的启动参数<br><code>console=serial0,115200</code> 设置串口控制台，波特率为115200<br><code>console=tty1</code> 设置tty1控制台<br><code>root=PARTUUID=37dc5df3-02</code> rootfs目录挂在的位置，这里的PARTUUID&#x3D;37dc5df3-02直接制定了分区号<br><code>rootfstype=ext4</code> rootfs的分区类型为ext4<br><code>elevator=``deadline</code> 磁盘扫描算法为deadline<br><code>fsck.repair=true</code> 开启磁盘修复能力<br><code>rootwait</code> 等待root设备加载完毕，如果不设置，会出现加载完内核后，无法找到磁盘的情况</p>
<p>Linux启动参数后面会有更多介绍，这里暂时列出现有的。</p>
<p><code>**config.txt**</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[all]</span><br><span class="line">start_x=0</span><br><span class="line">gpu_mem=128</span><br><span class="line">enable_uart=1</span><br></pre></td></tr></table></figure>

<p><code>start_x</code> 是否启动桌面<br><code>enable_uart</code> 开启串口<br><code>gpu_mem</code> 设置GPU内存<br>其他的配置暂时没列。</p>
<h3 id="2-2-构建64位Linux系统"><a href="#2-2-构建64位Linux系统" class="headerlink" title="2.2 构建64位Linux系统"></a>2.2 构建64位Linux系统</h3><p>在准备完串口工具后，我们正式开始构建系统</p>
<h4 id="2-2-1-编译U-boot（可选）"><a href="#2-2-1-编译U-boot（可选）" class="headerlink" title="2.2.1 编译U-boot（可选）"></a>2.2.1 编译U-boot（可选）</h4><p>在树莓派有自己的BootLoader，可以直接加载Kernel，也可以先加载U-Boot再启动Kernel，这里选择编译一下U-Boot。<br>64位构建过程参考 <a href="https://www.cwiki.cn/archives/u-boot%E5%AE%89%E8%A3%85%E5%88%B0%E6%A0%91%E8%8E%93%E6%B4%BE">https://www.cwiki.cn/archives/u-boot安装到树莓派</a></p>
<h4 id="2-2-2-编译Linux-Kernel"><a href="#2-2-2-编译Linux-Kernel" class="headerlink" title="2.2.2 编译Linux Kernel"></a>2.2.2 编译Linux Kernel</h4><p>kernel 建议使用树莓派的，里面已经配置好了各种选项。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/raspberrypi/linux.git</span><br><span class="line">cd linux</span><br><span class="line">make distclean</span><br><span class="line">make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- bcm2711_defconfig</span><br><span class="line">make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- menuconfig # 可选择自己定制</span><br><span class="line">make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu-  -j12 # 自己设置编译进程数</span><br></pre></td></tr></table></figure>

<p>构建完成后，在<code>arch/arm64/boot</code> 目录下，可找到 <code>Image</code> <code>Image.gz</code> 镜像文件，其中<code>Image</code>  是未经压缩的Kernel文件，<code>Image.gz</code>  是gzip压缩过的镜像文件。64位的树莓派需要使用未经压缩的内核，即<code>Image</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">file Image</span> </span><br><span class="line">Image: MS-DOS executable PE32+ executable (EFI application) Aarch64 (stripped to external PDB), for MS Windows</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">file Image.gz</span> </span><br><span class="line">Image.gz: gzip compressed data, max compression, from Unix, original size modulo 2^32 21043712</span><br></pre></td></tr></table></figure>

<h4 id="2-2-3-通过BusyBox构建文件系统（可选）"><a href="#2-2-3-通过BusyBox构建文件系统（可选）" class="headerlink" title="2.2.3 通过BusyBox构建文件系统（可选）"></a>2.2.3 通过BusyBox构建文件系统（可选）</h4><p>下载BusyBox <a href="https://busybox.net/">https://busybox.net/</a> ，解压后，进入Busybox目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- menuconfig</span><br><span class="line">make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j12</span><br></pre></td></tr></table></figure>

<p>选择静态编译 <code>Settings  ---&gt;</code> &#x2F; <code>--- Build Options</code> 下的 <code>Build static binary (no shared libs)</code> ，如果不选择静态编译，会带上很多so库，静态编译会方便一些。<br>编译后会有下面的显示，这个可以不用管，编译已经成功。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Static linking against glibc, can&#x27;t use --gc-sections</span><br><span class="line">Trying libraries: crypt m resolv rt</span><br><span class="line"> Library crypt is not needed, excluding it</span><br><span class="line"> Library m is needed, can&#x27;t exclude it (yet)</span><br><span class="line"> Library resolv is needed, can&#x27;t exclude it (yet)</span><br><span class="line"> Library rt is not needed, excluding it</span><br><span class="line"> Library m is needed, can&#x27;t exclude it (yet)</span><br><span class="line"> Library resolv is needed, can&#x27;t exclude it (yet)</span><br><span class="line">Final link with: m resolv</span><br></pre></td></tr></table></figure>

<p>构建Busybox文件系统：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- install</span><br></pre></td></tr></table></figure>

<p>在busybox目录下生成 <code>_install</code> 目录。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu-  PREFIX=/path/sdcark/rootfs install</span><br></pre></td></tr></table></figure>

<p>通过PREFIX参数可以制定安装位置，建议直接安装到需要的地方。具体参考 <a href="https://git.busybox.net/busybox/tree/INSTALL">https://git.busybox.net/busybox/tree/INSTALL</a><br>在将BusyBox生成的install文件拷贝到rootfs目录后，进入rootfs目录，补充完所需目录。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir root dev etc bin sbin mnt sys proc lib home tmp var usr</span><br><span class="line">mkdir usr/sbin usr/bin usr/lib usr/modules</span><br><span class="line">mkdir mnt/usb mnt/nfs mnt/etc mnt/etc/init.d</span><br><span class="line">mkdir lib/modules</span><br><span class="line">sudo chmod 1777 tmp</span><br></pre></td></tr></table></figure>

<p>创建必要设备</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd dev</span><br><span class="line">sudo mknod -m 660 console c 5 1</span><br><span class="line">sudo mknod -m 660 null c 1 3</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd etc</span><br><span class="line">vim fstab</span><br><span class="line"></span><br><span class="line">proc    /proc   proc    defaults    0   0</span><br><span class="line">none    /tmp    ramfs   defaults    0   0</span><br><span class="line">mdev    /dev    ramfs   defaults    0   0</span><br><span class="line">sysfs   /sys    sysfs   defaults    0   0</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd etc/init.d</span><br><span class="line">vim rcS</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/sh</span></span><br><span class="line"></span><br><span class="line">/bin/mount -a</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd etc</span><br><span class="line">vim inittab</span><br><span class="line"></span><br><span class="line">::sysinit:/etc/init.d/rcS</span><br><span class="line">::respawn:-/bin/sh</span><br><span class="line">::restart:/sbin/init</span><br><span class="line">::ctrlaltdel:/bin/umount -a -r</span><br><span class="line">::shutdown:/bin/umount -a -r</span><br><span class="line">::shutdown:/sbin/swapoff –a</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd etc</span><br><span class="line">vim group</span><br><span class="line"></span><br><span class="line">root:*:0:</span><br><span class="line">daemon:*:1:</span><br><span class="line">bin:*:2:</span><br><span class="line">sys:*:3:</span><br><span class="line">adm:*:4:</span><br><span class="line">tty:*:5:</span><br><span class="line">disk:*:6:</span><br><span class="line">lp:*:7:lp</span><br><span class="line">mail:*:8:</span><br><span class="line">news:*:9:</span><br><span class="line">uucp:*:10:</span><br><span class="line">proxy:*:13:</span><br><span class="line">kmem:*:15:</span><br><span class="line">dialout:*:20:</span><br><span class="line">fax:*:21:</span><br><span class="line">voice:*:22:</span><br><span class="line">cdrom:*:24:</span><br><span class="line">floppy:*:25:</span><br><span class="line">tape:*:26:</span><br><span class="line">sudo:*:27:</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd etc </span><br><span class="line">vim profile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/etc/profile: system-wide .profile file <span class="keyword">for</span> the Bourne shells</span></span><br><span class="line"></span><br><span class="line">echo</span><br><span class="line">echo &quot;FileSystem is Ready ...&quot;</span><br><span class="line">echo</span><br><span class="line"></span><br><span class="line">USER=&quot;`id -un`&quot;</span><br><span class="line">LOGNAME=$USER</span><br><span class="line">PS1=&#x27;[\u@\h \W]\# &#x27;</span><br><span class="line">PATH=$PATH</span><br><span class="line">HOSTNAME=`/bin/hostname`</span><br><span class="line"></span><br><span class="line">export USER LOGNAME PS1 PATH</span><br></pre></td></tr></table></figure>

<p>至此完成了文件系统制作。也可以将这个文件系统打包成镜像，在Kernel启动时制定<code>initrd</code></p>
<h4 id="2-2-4-通过debootstrap构建基于Debian的文件系统（建议）"><a href="#2-2-4-通过debootstrap构建基于Debian的文件系统（建议）" class="headerlink" title="2.2.4 通过debootstrap构建基于Debian的文件系统（建议）"></a>2.2.4 通过debootstrap构建基于Debian的文件系统（建议）</h4><p>通过debootstrap制作文件系统就相当简单，建议以这种方式。debootstrap制作的文件系统包含了Debian所需的软件，文件系统完善，可直接使用apt等命令等。<br>在为了避免跨平台到来的麻烦，我们直接在树莓派现有系统上操作。<br>在树莓派上通过读卡器插入B卡</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo fdisk -l</span><br></pre></td></tr></table></figure>

<p>找到B的的rootfs分区</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mount /dev/sdb2 /mnt</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install debootstrap</span><br><span class="line">sudo debootstrap --arch=arm64 --foreign buster /mnt/ http://ftp.cn.debian.org/debian/</span><br><span class="line">sudo chroot /mnt/</span><br><span class="line">debootstrap/debootstrap --second-stage</span><br></pre></td></tr></table></figure>

<p>设置清华源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim.tiny /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free</span></span><br></pre></td></tr></table></figure>

<p>配置时区、串口、SSH、Vimd等等</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">passwd</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">localtime</span></span><br><span class="line">ln -sf /usr/slocaltimehare/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">serial port</span></span><br><span class="line">ln -s /lib/systemd/system/serial-getty\@.service /etc/systemd/system/getty.target.wants/serial-getty@ttyAMA0.service</span><br><span class="line"></span><br><span class="line">apt-get install vim ssh</span><br><span class="line">apt-get install ifupdown net-tools</span><br><span class="line">apt-get install udev sudo wget curl</span><br><span class="line">apt-get install alsa-utils libasound2-dev</span><br></pre></td></tr></table></figure>

<p>添加用户、设置网络、设置中文</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">USER=pi</span><br><span class="line">HOST=raspberry</span><br><span class="line">useradd -G sudo -m -s /bin/bash $USER</span><br><span class="line">passwd $USER</span><br><span class="line"></span><br><span class="line">echo $HOST &gt; /etc/hostname</span><br><span class="line">echo &quot;127.0.0.1    localhost.localdomain localhost&quot; &gt; /etc/hosts</span><br><span class="line">echo &quot;127.0.0.1    $HOST&quot; &gt;&gt; /etc/hosts</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/network/interfaces.d/eth0</span><br><span class="line"> auto eth0</span><br><span class="line"> iface eth0 inet static</span><br><span class="line"> address 192.168.1.9</span><br><span class="line"> gateway 192.168.1.1</span><br><span class="line"> netmask 255.255.255.0</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">apt-get install locales</span><br><span class="line">dpkg-reconfigure locales</span><br></pre></td></tr></table></figure>

<h3 id="2-3-配置引导"><a href="#2-3-配置引导" class="headerlink" title="2.3 配置引导"></a>2.3 配置引导</h3><p>拷贝编译好的Linux Kernel文件<code>Image</code> 到root分区，如果需要使用U-Boot引用，好需要将<code>u-boot.bin</code> 拷贝到root分区。</p>
<h4 id="2-3-1-配置树莓派基本引导文件"><a href="#2-3-1-配置树莓派基本引导文件" class="headerlink" title="2.3.1 配置树莓派基本引导文件"></a>2.3.1 配置树莓派基本引导文件</h4><p>将<a href="https://github.com/raspberrypi/firmware.git">https://github.com/raspberrypi/firmware.git</a> 中root目录下的文件拷贝到root分区，参考<a href="https://www.cwiki.cn/archives/u-boot%E5%AE%89%E8%A3%85%E5%88%B0%E6%A0%91%E8%8E%93%E6%B4%BE">https://www.cwiki.cn/archives/u-boot安装到树莓派</a></p>
<h4 id="2-3-2-配置启动内核Linux"><a href="#2-3-2-配置启动内核Linux" class="headerlink" title="2.3.2 配置启动内核Linux"></a>2.3.2 配置启动内核Linux</h4><p>修改cmdline.txt，这个文件里面是Linux启动参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">console=ttyAMA0,115200 console=serial0,115200 console=tty1 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait</span><br></pre></td></tr></table></figure>

<p>修改config.txt为</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kernel=kernel8.img # 启动内核</span><br><span class="line">arm_64bit=1 # 64位</span><br><span class="line">enable_uart=1 # 打开串口</span><br></pre></td></tr></table></figure>

<p>当设置位U-Boot启动时，设置为</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kernel=u-boot.bin  # 启动内核</span><br><span class="line">arm_64bit=1 # 64位</span><br><span class="line">enable_uart=1 # 打开串口</span><br></pre></td></tr></table></figure>

<p>由于uboot编译的是树莓派的<code>rpi_4_defconfig</code> ，启动后自动加载配置，包括 <code>cmdline.txt</code> <code>config.txt</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">MESS:00:00:05.410376:0: arasan: arasan_emmc_open                                                         </span><br><span class="line">MESS:00:00:05.578211:0: brfs: File read: /mfs/sd/config.txt                                              </span><br><span class="line">MESS:00:00:05.581017:0: brfs: File read: 257 bytes                                                       </span><br><span class="line">MESS:00:00:05.648806:0: brfs: File read: /mfs/sd/config.txt                                              </span><br><span class="line">MESS:00:00:05.667051:0: brfs: File read: 257 bytes                                                       </span><br><span class="line">MESS:00:00:06.147877:0: gpioman: gpioman_get_pin_num: pin DISPLAY_DSI_PORT not defined                   </span><br><span class="line">MESS:00:00:06.155166:0: *** Restart logging                                                              </span><br><span class="line">MESS:00:00:06.160428:0: hdmi: HDMI:hdmi_get_state is deprecated, use hdmi_get_display_state instead      </span><br><span class="line">MESS:00:00:06.169785:0: hdmi: HDMI:hdmi_get_state is deprecated, use hdmi_get_display_state instead      </span><br><span class="line">MESS:00:00:06.175719:0: HDMI0: hdmi_pixel_encoding: 300000000                                            </span><br><span class="line">MESS:00:00:06.181188:0: HDMI1: hdmi_pixel_encoding: 300000000                                            </span><br><span class="line">MESS:00:00:06.191390:0: dtb_file &#x27;bcm2711-rpi-4-b.dtb&#x27;                                                   </span><br><span class="line">MESS:00:00:06.198297:0: brfs: File read: /mfs/sd/bcm2711-rpi-4-b.dtb</span><br><span class="line">MESS:00:00:06.201544:0: Loading &#x27;bcm2711-rpi-4-b.dtb&#x27; to 0x100 size 0xbd2d</span><br><span class="line">MESS:00:00:06.220694:0: brfs: File read: 48429 bytes</span><br><span class="line">MESS:00:00:06.232960:0: brfs: File read: /mfs/sd/overlays/overlay_map.dtb</span><br><span class="line">MESS:00:00:06.298769:0: brfs: File read: 1523 bytes</span><br><span class="line">MESS:00:00:06.301317:0: brfs: File read: /mfs/sd/config.txt</span><br><span class="line">MESS:00:00:06.311815:0: brfs: File read: 257 bytes</span><br><span class="line">MESS:00:00:06.315176:0: brfs: File read: /mfs/sd/cmdline.txt</span><br><span class="line">MESS:00:00:06.318896:0: Read command line from file &#x27;cmdline.txt&#x27;:</span><br><span class="line">MESS:00:00:06.324775:0: &#x27;console=serial0,115200 console=tty1 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait&#x27;</span><br><span class="line">MESS:00:00:07.446637:0: brfs: File read: 115 bytes</span><br><span class="line">MESS:00:00:08.020689:0: brfs: File read: /mfs/sd/kernel8.img</span><br><span class="line">MESS:00:00:08.023242:0: Loading &#x27;kernel8.img&#x27; to 0x80000 size 0x76f687</span><br><span class="line">MESS:00:00:09.138881:0: Kernel relocated to 0x200000</span><br><span class="line">MESS:00:00:09.140734:0: Device tree loaded to 0x2eff3d00 (size 0xc203)</span><br><span class="line">MESS:00:00:09.148754:0: uart: Set PL011 baud rate to 103448.300000 Hz</span><br><span class="line">MESS:00:00:09.156064:0: uart: Baud rate change done...</span><br><span class="line">MESS:00:00:09.158083:0:[    0.000000] Booting Linux on physical CPU 0x0000000000 [0x410fd083]</span><br><span class="line">[    0.000000] Linux version 5.10.25-v8+ (zauther@zauther-MS-7B98) (aarch64-linux-gnu-gcc (GNU Toolchain for the A-profile Architecture 8.3-201</span><br></pre></td></tr></table></figure>

<p> 从串口中启动打印可以知道，u-boot启动时，会依次读取<code>config.txt</code> 配置，加载<code>bcm2711-rpi-4-b.dtb</code> 设备树描述文件， <code>overlay_map.dtb</code> 等。从<code>cmdline.txt</code> 中读取Linux Kernel启动参数，加载<code>kernel8.img</code> 默认文件名。加载kernel到内存位置 0x80000 ，重定位到0x200000 ；加载设备树到0x2eff3d00，设置串口波特率，并启动Kernel。<br>至此完成了Kernel的加载，并启动文件系统。<br>如果遇到文件系统出现损坏，为只读文件系统，可尝试切换到root用户，重新挂载根文件系统：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount -o remount rw /</span><br></pre></td></tr></table></figure>

<p>由于之前配置的是静态IP，通过SSH即可连接到树莓派。</p>
<p>DONE.</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派使用V2ray</title>
    <url>/2021/03/26/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8V2ray/</url>
    <content><![CDATA[<h4 id="安裝和更新-V2Ray"><a href="#安裝和更新-V2Ray" class="headerlink" title="安裝和更新 V2Ray"></a>安裝和更新 V2Ray</h4><p>地址：<br><a href="https://github.com/v2fly/fhs-install-v2ray">https://github.com/v2fly/fhs-install-v2ray</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh)</span><br></pre></td></tr></table></figure>

<h4 id="安裝最新發行的-geoip-dat-和-geosite-dat"><a href="#安裝最新發行的-geoip-dat-和-geosite-dat" class="headerlink" title="安裝最新發行的 geoip.dat 和 geosite.dat"></a>安裝最新發行的 geoip.dat 和 geosite.dat</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-dat-release.sh)</span><br></pre></td></tr></table></figure>

<h4 id="移除-V2Ray"><a href="#移除-V2Ray" class="headerlink" title="移除 V2Ray"></a>移除 V2Ray</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh) --remove</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h4 id="离线安装V2Ray"><a href="#离线安装V2Ray" class="headerlink" title="离线安装V2Ray"></a>离线安装V2Ray</h4><p>下载v2ray core:<br><a href="https://github.com/v2ray/v2ray-core/releases">https://github.com/v2ray/v2ray-core/releases</a><br>树莓派选择：<br><a href="https://github.com/v2ray/v2ray-core/releases/download/v4.28.2/v2ray-linux-arm32-v7a.zip">v2ray-linux-arm32-v7a.zip</a></p>
<p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -O v2ray-install.sh  https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh</span><br><span class="line">sudo ./v2ray-install.sh --local v2ray-linux-arm32-v7a.zip</span><br></pre></td></tr></table></figure>

<p>修改v2ray配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mousepad /usr/local/etc/v2ray/config.json</span><br></pre></td></tr></table></figure>

<p>启动v2ray:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start v2ray </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或使用 service v2ray start</span></span><br><span class="line">ps -ef|grep v2ray</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或使用 service v2ray status</span></span><br></pre></td></tr></table></figure>

<h4 id="代理配置"><a href="#代理配置" class="headerlink" title="代理配置"></a>代理配置</h4><p>编译安装 <code>ProxyChains-NG</code> 进行全局代理设置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/rofl0r/proxychains-ng.git</span><br><span class="line">cd proxychains-ng/</span><br><span class="line">./configure &amp;&amp; make &amp;&amp; make install</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改配置</span></span><br><span class="line">sudo mousepad /usr/local/etc/proxychains.conf</span><br></pre></td></tr></table></figure>

<p>proxychains.conf 内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">proxy_dns</span><br><span class="line">[ProxyList]</span><br><span class="line">socks5 127.0.0.1 1080</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">proxychains4 curl -I google.com</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
        <tag>V2ray</tag>
      </tags>
  </entry>
  <entry>
    <title>科学上网工具</title>
    <url>/2019/06/04/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h3 id="V2Ray（ubutnu：websocket-ssl-cdn）"><a href="#V2Ray（ubutnu：websocket-ssl-cdn）" class="headerlink" title="V2Ray（ubutnu：websocket+ssl+cdn）"></a>V2Ray（ubutnu：websocket+ssl+cdn）</h3><h4 id="0x01-设置时区"><a href="#0x01-设置时区" class="headerlink" title="0x01 设置时区"></a>0x01 设置时区</h4><p>v2ray 对时间要求比较严格，服务器时间与本地时间相差在<code>90s</code>内</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dpkg-reconfigure tzdata  # 选择时区</span><br><span class="line">hwclock -w # 将当前时区写入bios</span><br></pre></td></tr></table></figure>

<h4 id="0x02-安装"><a href="#0x02-安装" class="headerlink" title="0x02 安装"></a>0x02 安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh)</span><br></pre></td></tr></table></figure>

<p>此脚本会自动安装以下文件：</p>
<ul>
<li><code>/usr/bin/v2ray/v2ray</code>：V2Ray 程序；</li>
<li><code>/usr/bin/v2ray/v2ctl</code>：V2Ray 工具；</li>
<li><code>/etc/v2ray/config.json</code>：配置文件；</li>
<li><code>/usr/bin/v2ray/geoip.dat</code>：IP 数据文件</li>
<li><code>/usr/bin/v2ray/geosite.dat</code>：域名数据文件</li>
</ul>
<p>此脚本会配置自动运行脚本。自动运行脚本会在系统重启之后，自动运行 V2Ray。目前自动运行脚本只支持带有 Systemd 的系统，以及 Debian &#x2F; Ubuntu 全系列。</p>
<span id="more"></span>

<p>运行脚本位于系统的以下位置：</p>
<ul>
<li><code>/etc/systemd/system/v2ray.service</code>: Systemd</li>
<li><code>/etc/init.d/v2ray</code>: SysV</li>
</ul>
<p>脚本运行完成后，你需要：</p>
<ol>
<li>编辑 &#x2F;etc&#x2F;v2ray&#x2F;config.json 文件来配置你需要的代理方式；</li>
<li>运行 service v2ray start 来启动 V2Ray 进程；</li>
<li>之后可以使用 service v2ray start|stop|status|reload|restart|force-reload 控制 V2Ray 的运行。</li>
</ol>
<p>问题：</p>
<ol>
<li><p><code>main: failed to load config:  &gt; v2ray.com/core/main/confloader/external: config file not readable &gt; open : no such file or directory</code><br>此问题是<code>/etc/v2ray/config.json</code>  配置文件缺失，将<code>/usr/bin/v2ray/config.json</code>中的文件拷贝至<code>/etc/v2ray/</code>。</p>
<p>而事实上仅仅拷贝只是默认配置，需要根据自己的服务来配置。</p>
</li>
</ol>
<h4 id="0x03-配置-WebSocket-TLS-Web"><a href="#0x03-配置-WebSocket-TLS-Web" class="headerlink" title="0x03 配置(WebSocket+TLS+Web)"></a>0x03 配置(WebSocket+TLS+Web)</h4><h5 id="服务器-V2Ray-配置-x2F-etc-x2F-v2ray-x2F-config-json"><a href="#服务器-V2Ray-配置-x2F-etc-x2F-v2ray-x2F-config-json" class="headerlink" title="服务器 V2Ray 配置(&#x2F;etc&#x2F;v2ray&#x2F;config.json)"></a>服务器 V2Ray 配置(&#x2F;etc&#x2F;v2ray&#x2F;config.json)</h5><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;inbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">10000</span><span class="punctuation">,</span>  <span class="comment">// 服务器监听端口</span></span><br><span class="line">      <span class="attr">&quot;listen&quot;</span><span class="punctuation">:</span><span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span><span class="comment">//只监听 127.0.0.1，避免除本机外的机器探测到开放了 10000 端口</span></span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vmess&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;clients&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UUID&quot;</span><span class="punctuation">,</span> <span class="comment">// https://www.uuidgenerator.net/ 可在这个网站上随机生成</span></span><br><span class="line">            <span class="attr">&quot;alterId&quot;</span><span class="punctuation">:</span> <span class="number">64</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;streamSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;network&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ws&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;wsSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/path&quot;</span>  <span class="comment">// 客户端连接时的地址</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;outbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;freedom&quot;</span><span class="punctuation">,</span>  <span class="comment">//允许所有协议</span></span><br><span class="line">      <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h5><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span>  <span class="number">443</span> ssl;</span><br><span class="line">  <span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line">  <span class="attribute">ssl_certificate</span>       /etc/v2ray/v2ray.crt;</span><br><span class="line">  <span class="attribute">ssl_certificate_key</span>   /etc/v2ray/v2ray.key;</span><br><span class="line">  <span class="attribute">ssl_protocols</span>         TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">  <span class="attribute">ssl_ciphers</span>           HIGH:!aNULL:!MD5;</span><br><span class="line">  <span class="attribute">server_name</span>           mydomain.me;  <span class="comment"># 你的域名</span></span><br><span class="line">  <span class="section">location</span> /path &#123;  <span class="comment"># 与 V2Ray 配置中的 path 保持一致</span></span><br><span class="line">        <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:10000; <span class="comment">#假设WebSocket监听在环回地址的10000端口上</span></span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Show realip in v2ray access.log</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h5><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;dns&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;servers&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;localhost&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;inbounds&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;listen&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;port&quot;</span> <span class="punctuation">:</span> <span class="number">1081</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;socks&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tag&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;socksinbound&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;settings&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;auth&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;noauth&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;udp&quot;</span> <span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ip&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;listen&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;port&quot;</span> <span class="punctuation">:</span> <span class="number">8001</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;http&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tag&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;httpinbound&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;settings&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;timeout&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;outbounds&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;sendThrough&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;0.0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;mux&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;enabled&quot;</span> <span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;concurrency&quot;</span> <span class="punctuation">:</span> <span class="number">8</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;vmess&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;settings&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vnext&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;mydomain.me&quot;</span><span class="punctuation">,</span>  <span class="comment">//mydomain.me，你的域名</span></span><br><span class="line">            <span class="attr">&quot;users&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;UUID&quot;</span><span class="punctuation">,</span>  <span class="comment">//你的uuid</span></span><br><span class="line">                <span class="attr">&quot;alterId&quot;</span> <span class="punctuation">:</span> <span class="number">64</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;security&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;auto&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;level&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">              <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;port&quot;</span> <span class="punctuation">:</span> <span class="number">443</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tag&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Server Name&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;streamSettings&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;network&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;ws&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;wsSettings&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;path&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;\/path&quot;</span>  <span class="comment">// 对于服务器/path</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;security&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;tls&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;routing&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;all_to_main&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;domainStrategy&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;AsIs&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rules&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;field&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;outboundTag&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Server Jupyter&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;port&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;0-65535&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;log&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;error&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;\/var\/folders\/q5\/0000gn\/T\/cenmrev.v2rayx.log\/error.log&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;loglevel&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;error&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;access&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;\/var\/folders\/q5\/0000gn\/T\/cenmrev.v2rayx.log\/access.log&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>(<a href="https://github.com/Cenmrev/V2RayX">V2RayX 客户端下载</a>)</p>
<p><strong>以上可实现websoket + ssl 实现代理</strong></p>
<h4 id="0x04-与网站流量混淆配置（WebSocket-TLS-Web）"><a href="#0x04-与网站流量混淆配置（WebSocket-TLS-Web）" class="headerlink" title="0x04 与网站流量混淆配置（WebSocket+TLS+Web）"></a>0x04 与网站流量混淆配置（WebSocket+TLS+Web）</h4><p>将代理流量与网站流量进行混淆，防干扰能力更好。</p>
<h5 id="将链接混入网站中"><a href="#将链接混入网站中" class="headerlink" title="将链接混入网站中"></a>将链接混入网站中</h5><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">server_name</span>           mydomain.me;  <span class="comment"># 你的域名</span></span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span>;</span><br><span class="line">    <span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_certificate</span>             /etc/v2ray/v2ray.crt;  <span class="comment"># ssl证书配置</span></span><br><span class="line">    <span class="attribute">ssl_certificate_key</span>   /etc/v2ray/v2ray.key;  <span class="comment"># ssl证书配置</span></span><br><span class="line">    <span class="attribute">ssl_protocols</span>         TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span>           HIGH:!aNULL:!MD5;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attribute">rewrite</span> <span class="string">&#x27;/site/path&#x27;</span>  /path <span class="literal">last</span>;  <span class="comment"># /site/path 网站中的某个地址  /path v2ray地址</span></span><br><span class="line">    <span class="section">location</span> / &#123;  <span class="comment"># 网站配置</span></span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8888/; <span class="comment"># 网站的端口地址        </span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">        <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">if</span> ( <span class="variable">$uri</span> = <span class="string">&#x27;/site/path&#x27;</span> ) &#123;   <span class="comment"># /site/path 网站中的某个地址</span></span><br><span class="line">            <span class="attribute">rewrite</span> <span class="variable">$uri</span> /path <span class="literal">break</span>; <span class="comment"># /path v2ray地址</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="section">location</span> /path &#123; <span class="comment"># 与 V2Ray 配置中的 path 保持一致</span></span><br><span class="line">        <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:10000;<span class="comment">#假设WebSocket监听在环回地址的10000端口上</span></span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Show realip in v2ray access.log</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">   <span class="comment">#     proxy_set_header Host $host;</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 其中主要步骤是:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">rewrite</span> <span class="string">&#x27;/site/path&#x27;</span>  /path <span class="literal">last</span>;  <span class="comment"># /site/path 网站中的某个地址  /path v2ray地址</span></span><br></pre></td></tr></table></figure>

<p>制造一个与网站相似的链接，重写到真实地址上。</p>
<p>v2ry的服务器配置不变，客户端配置只需要将<code>/path</code>改为<code>/site/path</code> ,即你的混淆的网站地址。这时，你的代理请求会”变为网站中的一个websocket”。</p>
<h4 id="0x05-与网站流量混淆配置（WebSocket-TLS-Web-CDN）"><a href="#0x05-与网站流量混淆配置（WebSocket-TLS-Web-CDN）" class="headerlink" title="0x05 与网站流量混淆配置（WebSocket+TLS+Web+CDN）"></a>0x05 与网站流量混淆配置（WebSocket+TLS+Web+CDN）</h4><p><strong>核心：通过cloudflare来分发websocket流量，从而隐藏自己真实IP</strong></p>
<ol>
<li><p>在 (<a href="https://cloudflare.com/">cloudflare.com</a>) 注册，并添加自己的网址</p>
</li>
<li><p>在DNS记录中添加A记录，指向服务器<br><img src="https://raw.githubusercontent.com/zauther/figurebed/blog/images/20200208210956.png"></p>
</li>
<li><p>在Network中打开，websockets代理</p>
<p><img src="https://raw.githubusercontent.com/zauther/figurebed/blog/images/image-20200208203655760.png"></p>
</li>
</ol>
<h4 id="Done"><a href="#Done" class="headerlink" title="Done."></a>Done.</h4><iframe src="https://qiyukf.com/sdk/res/delegate.html?1559402955156" style="border: 0px; margin: 0px; padding: 0px; cursor: default !important; height: 0px; width: 0px;"></iframe>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>使用NDK和CMake进行交叉编译库</title>
    <url>/2020/08/10/%E4%BD%BF%E7%94%A8NDK%E5%92%8CCMake%E8%BF%9B%E8%A1%8C%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E5%BA%93/</url>
    <content><![CDATA[<p><a href="https://developer.android.com/ndk/guides/cmake?hl=zh-cn">https://developer.android.com/ndk/guides/cmake?hl=zh-cn</a></p>
<p><a href="https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html#cross-compiling-for-android-with-the-ndk">https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html#cross-compiling-for-android-with-the-ndk</a></p>
<p>NDK 通过工具链文件支持 CMake。工具链文件是用于自定义交叉编译工具链行为的 CMake 文件。用于 NDK 的工具链文件位于 NDK 中的 &#x2F;build&#x2F;cmake&#x2F;android.toolchain.cmake 内。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">/bin/bash</span></span><br><span class="line"></span><br><span class="line">export ANDROID_NDK=/opt/env/android-ndk-r14b</span><br><span class="line"></span><br><span class="line">rm -r build</span><br><span class="line">mkdir build &amp;&amp; cd build </span><br><span class="line"></span><br><span class="line">cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK/build/cmake/android.toolchain.cmake \</span><br><span class="line">    -DANDROID_ABI=&quot;armeabi-v7a&quot; \</span><br><span class="line">    -DANDROID_NDK=$ANDROID_NDK \</span><br><span class="line">    -DANDROID_PLATFORM=android-22 \</span><br><span class="line">    ..</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">cd ..</span><br></pre></td></tr></table></figure>

<span id="more"></span>
<h4 id="opencv-NDK-编译"><a href="#opencv-NDK-编译" class="headerlink" title="opencv NDK 编译"></a>opencv NDK 编译</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cmake -D CMAKE_BUILD_TYPE=RELEASE \</span><br><span class="line">    -D CMAKE_TOOLCHAIN_FILE=/Users/zauther/Library/Android/sdk/ndk-bundle/build/cmake/android.toolchain.cmake \</span><br><span class="line">    -D ANDROID_TOOLCHAIN=clang \</span><br><span class="line">    -D PYTHON_DEFAULT_EXECUTABLE=$(python -c &quot;import sys; print(sys.executable)&quot;)   \</span><br><span class="line">    -D PYTHON3_EXECUTABLE=$(python -c &quot;import sys; print(sys.executable)&quot;)   \</span><br><span class="line">    -D PYTHON3_NUMPY_INCLUDE_DIRS=$(python -c &quot;import numpy; print (numpy.get_include())&quot;) \</span><br><span class="line">    -D PYTHON3_INCLUDE_PATH=/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Headers \</span><br><span class="line">    -D PYTHON3_PACKAGES_PATH=$(python -c &quot;from distutils.sysconfig import get_python_lib; print(get_python_lib())&quot;) \</span><br><span class="line">    -D PYTHON2_EXECUTABLE=/Users/zauther/Downloads/head_file/AliNNPython   \</span><br><span class="line">    -D PYTHON2_NUMPY_INCLUDE_DIRS=/Users/zauther/Downloads/head_file \</span><br><span class="line">    -D PYTHON2_INCLUDE_PATH=/Library/Frameworks/Python.framework/Versions/2.7/Headers \</span><br><span class="line">    -D PYTHON2_PACKAGES_PATH=$(python -c &quot;from distutils.sysconfig import get_python_lib; print(get_python_lib())&quot;) \</span><br><span class="line">    -D CMAKE_CXX_FLAGS=&quot;-std=c++11&quot; \</span><br><span class="line">    -D CMAKE_C_FLAGS=&quot;-D__ANDROID_API__=26&quot; \</span><br><span class="line">    -D ANDROID_NDK=/Users/zauther/Library/Android/sdk/ndk-bundle \</span><br><span class="line">    -D ANDROID_ABI=&quot;arm64-v8a&quot; \</span><br><span class="line">    -D ANDROID_NATIVE_API_LEVEL=android-26 \</span><br><span class="line">    -D ANDROID_NO_UNDEFINED=ON \</span><br><span class="line">    -D BUILD_opencv_python3=ON \</span><br><span class="line">    -D BUILD_opencv_python2=ON \</span><br><span class="line">    -D ANDROID_SO_UNDEFINED=OFF \</span><br><span class="line">    -D DBUILD_SHARED_LIBS=ON \</span><br><span class="line">    -D ENABLE_SOLUTION_FOLDERS=ON \</span><br><span class="line">    ../opencv/</span><br><span class="line"></span><br><span class="line">make opencv_python2</span><br><span class="line">make opencv_python3</span><br><span class="line">ninja -j 8 # -GNinja \</span><br></pre></td></tr></table></figure>

<p>需要使用android 24以上，<a href="https://android.googlesource.com/platform/bionic/+/master/libc/include/bits/fortify/unistd.h">https://android.googlesource.com/platform/bionic/+/master/libc/include/bits/fortify/unistd.h</a> 中的__write_chk以来24以上的版本。</p>
<h2 id="NDK编译问题"><a href="#NDK编译问题" class="headerlink" title="NDK编译问题"></a>NDK编译问题</h2><ul>
<li>bionic&#x2F;libc&#x2F;include&#x2F;bits&#x2F;fortify&#x2F;stdio.h:43: error</li>
</ul>
<p><a href="https://www.jianshu.com/p/9079766aa28c">https://www.jianshu.com/p/9079766aa28c</a><br>问题是android不同版本支持的api有变动，需要使用高版本的android，api列表如下：<br><a href="https://android.googlesource.com/platform/bionic/+/master/android-changes-for-ndk-developers.md#available-in-api-level-23">https://android.googlesource.com/platform/bionic/+/master/android-changes-for-ndk-developers.md#available-in-api-level-23</a></p>
<ul>
<li>ndk 编译工具链</li>
</ul>
<p>一般位于NDK 中的 &#x2F;build&#x2F;cmake&#x2F;android.toolchain.cmake 内。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>使用wsl替代ubuntu</title>
    <url>/2022/05/29/%E4%BD%BF%E7%94%A8wsl%E6%9B%BF%E4%BB%A3ubuntu/</url>
    <content><![CDATA[<p>从接触Linux开始到现在，使用Linux也接近十年了，期间也尝试过各种Linux发行版。目前主要开发环境使用的时MacOS，使用起来还算是非常顺手。但是在有些时候也不太方便，比如Linux Kernel的编译、有些工具链的使用、一些Linux下工具使用，等还是使用Linux环境比较方便。Linux凭借其开源特点，各种发行版百花齐放，主流服务器大多都是使用Linux系统，比如Debain、Ubuntu、OpenSUSE等等接近十来种。Desktop发行版也有很多，常用的有Debain、Ubuntu、Deepin等等也是一堆，相关的大大小小桌面环境也有好多种，如GNOME、KDE、Xfce、LXDE等等。  </p>
<span id="more"></span>

<p>这些基本上都有试过，能用，但是不够好用。也许因为开源与百花齐放，没有一个强有力的商业支撑，Desktop使用体验真的不如MacOS。</p>
<p>在使用Linux这段时间里，自己的使用诉求并不是很强，主要也是各种工具链的使用，实际上使用非桌面系统也能满足要求，但是效率会很低。因从更多时候是装了Win和Linux双系统。</p>
<p>随着WSL的发展，WSL2已经支持挂载ext4磁盘或LVM。在WSL2种也能直接使用CUDA，基本上都能满足需求。VSCode也能直接是使用Remote Host。Win下能直接访问Linux文件系统。并且安装和重置都很简单，因此试着使用WSL2 来替代Ubuntu。</p>
<p>近几天使用下来，基本上都能满足要求，也能支持GUI。非必须使用Linux的，使用Win环境下的工具也非常方便，省去了各种折腾的时间，更聚焦于当前所做的事情上。</p>
<p>下面记录一些相关使用。</p>
<ul>
<li>wsl bash找不到路径的问题，Liunx安装出现问题</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wsl.exe --list --all // 列出所有wsl</span><br><span class="line">wsl.exe --unregister xxx //注销 出问题的wsl，之后重新安装wsl</span><br></pre></td></tr></table></figure>

<ul>
<li>多个发行版，设置默认发行版</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">wslconfig /list</span></span><br><span class="line">适用于 Linux 的 Windows 子系统分发:</span><br><span class="line">Ubuntu-20.04 (默认)</span><br><span class="line">Ubuntu-22.04</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">wslconfig /setdefault Ubuntu-22.04</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">wslconfig /list</span></span><br><span class="line">适用于 Linux 的 Windows 子系统分发:</span><br><span class="line">Ubuntu-20.04 </span><br><span class="line">Ubuntu-22.04 (默认)</span><br></pre></td></tr></table></figure>

<ul>
<li>挂载LVM磁盘</li>
</ul>
<p>powershell下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GET-CimInstance -query &quot;SELECT * from Win32_DiskDrive&quot;</span><br><span class="line">wsl --mount \\.\PHYSICALDRIVE0 --bare</span><br></pre></td></tr></table></figure>

<p>wsl linux环境中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">lvm 挂载</span></span><br><span class="line">sudo vgscan #扫描得到逻辑分区vgkubuntu</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">激活</span></span><br><span class="line">sudo vgchange -a y vgkubuntu</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出设备</span></span><br><span class="line">sudo fdisk -l</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">挂载</span></span><br><span class="line">sudo mount /dev/dm-0 /mnt/wsl/ubuntu_host</span><br></pre></td></tr></table></figure>

<p>非LVM直接挂载。</p>
]]></content>
  </entry>
</search>
